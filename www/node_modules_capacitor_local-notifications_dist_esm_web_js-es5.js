(function () {
  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  (self["webpackChunksheriff"] = self["webpackChunksheriff"] || []).push([["node_modules_capacitor_local-notifications_dist_esm_web_js"], {
    /***/
    81161:
    /*!*********************************************************************!*\
      !*** ./node_modules/@capacitor/local-notifications/dist/esm/web.js ***!
      \*********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "LocalNotificationsWeb": function LocalNotificationsWeb() {
          return (
            /* binding */
            _LocalNotificationsWeb
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _capacitor_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @capacitor/core */
      68384);

      var _LocalNotificationsWeb = /*#__PURE__*/function (_capacitor_core__WEBP) {
        _inherits(_LocalNotificationsWeb, _capacitor_core__WEBP);

        var _super = _createSuper(_LocalNotificationsWeb);

        function _LocalNotificationsWeb() {
          var _this;

          _classCallCheck(this, _LocalNotificationsWeb);

          _this = _super.apply(this, arguments);
          _this.pending = [];

          _this.hasNotificationSupport = function () {
            if (!('Notification' in window) || !Notification.requestPermission) {
              return false;
            }

            if (Notification.permission !== 'granted') {
              // don't test for `new Notification` if permission has already been granted
              // otherwise this sends a real notification on supported browsers
              try {
                new Notification('');
              } catch (e) {
                if (e.name == 'TypeError') {
                  return false;
                }
              }
            }

            return true;
          };

          return _this;
        }

        _createClass(_LocalNotificationsWeb, [{
          key: "createChannel",
          value: function () {
            var _createChannel = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
              return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      throw this.unimplemented('Not implemented on web.');

                    case 1:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee, this);
            }));

            function createChannel() {
              return _createChannel.apply(this, arguments);
            }

            return createChannel;
          }()
        }, {
          key: "deleteChannel",
          value: function () {
            var _deleteChannel = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
              return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      throw this.unimplemented('Not implemented on web.');

                    case 1:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2, this);
            }));

            function deleteChannel() {
              return _deleteChannel.apply(this, arguments);
            }

            return deleteChannel;
          }()
        }, {
          key: "listChannels",
          value: function () {
            var _listChannels = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
              return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      throw this.unimplemented('Not implemented on web.');

                    case 1:
                    case "end":
                      return _context3.stop();
                  }
                }
              }, _callee3, this);
            }));

            function listChannels() {
              return _listChannels.apply(this, arguments);
            }

            return listChannels;
          }()
        }, {
          key: "schedule",
          value: function () {
            var _schedule = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(options) {
              var _iterator, _step, notification;

              return regeneratorRuntime.wrap(function _callee4$(_context4) {
                while (1) {
                  switch (_context4.prev = _context4.next) {
                    case 0:
                      if (this.hasNotificationSupport()) {
                        _context4.next = 2;
                        break;
                      }

                      throw this.unavailable('Notifications not supported in this browser.');

                    case 2:
                      _iterator = _createForOfIteratorHelper(options.notifications);

                      try {
                        for (_iterator.s(); !(_step = _iterator.n()).done;) {
                          notification = _step.value;
                          this.sendNotification(notification);
                        }
                      } catch (err) {
                        _iterator.e(err);
                      } finally {
                        _iterator.f();
                      }

                      return _context4.abrupt("return", {
                        notifications: options.notifications.map(function (notification) {
                          return {
                            id: notification.id
                          };
                        })
                      });

                    case 5:
                    case "end":
                      return _context4.stop();
                  }
                }
              }, _callee4, this);
            }));

            function schedule(_x) {
              return _schedule.apply(this, arguments);
            }

            return schedule;
          }()
        }, {
          key: "getPending",
          value: function () {
            var _getPending = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
              return regeneratorRuntime.wrap(function _callee5$(_context5) {
                while (1) {
                  switch (_context5.prev = _context5.next) {
                    case 0:
                      return _context5.abrupt("return", {
                        notifications: this.pending
                      });

                    case 1:
                    case "end":
                      return _context5.stop();
                  }
                }
              }, _callee5, this);
            }));

            function getPending() {
              return _getPending.apply(this, arguments);
            }

            return getPending;
          }()
        }, {
          key: "registerActionTypes",
          value: function () {
            var _registerActionTypes = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
              return regeneratorRuntime.wrap(function _callee6$(_context6) {
                while (1) {
                  switch (_context6.prev = _context6.next) {
                    case 0:
                      throw this.unimplemented('Not implemented on web.');

                    case 1:
                    case "end":
                      return _context6.stop();
                  }
                }
              }, _callee6, this);
            }));

            function registerActionTypes() {
              return _registerActionTypes.apply(this, arguments);
            }

            return registerActionTypes;
          }()
        }, {
          key: "cancel",
          value: function () {
            var _cancel = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(pending) {
              return regeneratorRuntime.wrap(function _callee7$(_context7) {
                while (1) {
                  switch (_context7.prev = _context7.next) {
                    case 0:
                      this.pending = this.pending.filter(function (notification) {
                        return !pending.notifications.find(function (n) {
                          return n.id === notification.id;
                        });
                      });

                    case 1:
                    case "end":
                      return _context7.stop();
                  }
                }
              }, _callee7, this);
            }));

            function cancel(_x2) {
              return _cancel.apply(this, arguments);
            }

            return cancel;
          }()
        }, {
          key: "areEnabled",
          value: function () {
            var _areEnabled = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
              var _yield$this$checkPerm, display;

              return regeneratorRuntime.wrap(function _callee8$(_context8) {
                while (1) {
                  switch (_context8.prev = _context8.next) {
                    case 0:
                      _context8.next = 2;
                      return this.checkPermissions();

                    case 2:
                      _yield$this$checkPerm = _context8.sent;
                      display = _yield$this$checkPerm.display;
                      return _context8.abrupt("return", {
                        value: display === 'granted'
                      });

                    case 5:
                    case "end":
                      return _context8.stop();
                  }
                }
              }, _callee8, this);
            }));

            function areEnabled() {
              return _areEnabled.apply(this, arguments);
            }

            return areEnabled;
          }()
        }, {
          key: "requestPermissions",
          value: function () {
            var _requestPermissions = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
              var display;
              return regeneratorRuntime.wrap(function _callee9$(_context9) {
                while (1) {
                  switch (_context9.prev = _context9.next) {
                    case 0:
                      if (this.hasNotificationSupport()) {
                        _context9.next = 2;
                        break;
                      }

                      throw this.unavailable('Notifications not supported in this browser.');

                    case 2:
                      _context9.t0 = this;
                      _context9.next = 5;
                      return Notification.requestPermission();

                    case 5:
                      _context9.t1 = _context9.sent;
                      display = _context9.t0.transformNotificationPermission.call(_context9.t0, _context9.t1);
                      return _context9.abrupt("return", {
                        display: display
                      });

                    case 8:
                    case "end":
                      return _context9.stop();
                  }
                }
              }, _callee9, this);
            }));

            function requestPermissions() {
              return _requestPermissions.apply(this, arguments);
            }

            return requestPermissions;
          }()
        }, {
          key: "checkPermissions",
          value: function () {
            var _checkPermissions = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
              var display;
              return regeneratorRuntime.wrap(function _callee10$(_context10) {
                while (1) {
                  switch (_context10.prev = _context10.next) {
                    case 0:
                      if (this.hasNotificationSupport()) {
                        _context10.next = 2;
                        break;
                      }

                      throw this.unavailable('Notifications not supported in this browser.');

                    case 2:
                      display = this.transformNotificationPermission(Notification.permission);
                      return _context10.abrupt("return", {
                        display: display
                      });

                    case 4:
                    case "end":
                      return _context10.stop();
                  }
                }
              }, _callee10, this);
            }));

            function checkPermissions() {
              return _checkPermissions.apply(this, arguments);
            }

            return checkPermissions;
          }()
        }, {
          key: "transformNotificationPermission",
          value: function transformNotificationPermission(permission) {
            switch (permission) {
              case 'granted':
                return 'granted';

              case 'denied':
                return 'denied';

              default:
                return 'prompt';
            }
          }
        }, {
          key: "sendPending",
          value: function sendPending() {
            var _a;

            var toRemove = [];
            var now = new Date().getTime();

            var _iterator2 = _createForOfIteratorHelper(this.pending),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var notification = _step2.value;

                if (((_a = notification.schedule) === null || _a === void 0 ? void 0 : _a.at) && notification.schedule.at.getTime() <= now) {
                  this.buildNotification(notification);
                  toRemove.push(notification);
                }
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }

            this.pending = this.pending.filter(function (notification) {
              return !toRemove.find(function (n) {
                return n === notification;
              });
            });
          }
        }, {
          key: "sendNotification",
          value: function sendNotification(notification) {
            var _this2 = this;

            var _a;

            if ((_a = notification.schedule) === null || _a === void 0 ? void 0 : _a.at) {
              var diff = notification.schedule.at.getTime() - new Date().getTime();
              this.pending.push(notification);
              setTimeout(function () {
                _this2.sendPending();
              }, diff);
              return;
            }

            this.buildNotification(notification);
          }
        }, {
          key: "buildNotification",
          value: function buildNotification(notification) {
            var localNotification = new Notification(notification.title, {
              body: notification.body
            });
            localNotification.addEventListener('click', this.onClick.bind(this, notification), false);
            localNotification.addEventListener('show', this.onShow.bind(this, notification), false);
            return localNotification;
          }
        }, {
          key: "onClick",
          value: function onClick(notification) {
            var data = {
              actionId: 'tap',
              notification: notification
            };
            this.notifyListeners('localNotificationActionPerformed', data);
          }
        }, {
          key: "onShow",
          value: function onShow(notification) {
            this.notifyListeners('localNotificationReceived', notification);
          }
        }]);

        return _LocalNotificationsWeb;
      }(_capacitor_core__WEBPACK_IMPORTED_MODULE_0__.WebPlugin); //# sourceMappingURL=web.js.map

      /***/

    }
  }]);
})();
//# sourceMappingURL=node_modules_capacitor_local-notifications_dist_esm_web_js-es5.js.map