(self["webpackChunksheriff"] = self["webpackChunksheriff"] || []).push([["main"],{

/***/ 98255:
/*!*******************************************************!*\
  !*** ./$_lazy_route_resources/ lazy namespace object ***!
  \*******************************************************/
/***/ (function(module) {

function webpackEmptyAsyncContext(req) {
	// Here Promise.resolve().then() is used instead of new Promise() to prevent
	// uncaught exception popping up in devtools
	return Promise.resolve().then(function() {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	});
}
webpackEmptyAsyncContext.keys = function() { return []; };
webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
webpackEmptyAsyncContext.id = 98255;
module.exports = webpackEmptyAsyncContext;

/***/ }),

/***/ 63074:
/*!*************************************!*\
  !*** ./src/app/animations/index.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getIonPageElement": function() { return /* binding */ getIonPageElement; },
/* harmony export */   "fancyAnimation": function() { return /* binding */ fancyAnimation; },
/* harmony export */   "modalEnterAnimation": function() { return /* binding */ modalEnterAnimation; },
/* harmony export */   "modalLeaveAnimation": function() { return /* binding */ modalLeaveAnimation; }
/* harmony export */ });
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ionic/angular */ 80476);

const animationCtrl = new _ionic_angular__WEBPACK_IMPORTED_MODULE_0__.AnimationController();
const getIonPageElement = (element) => {
    if (element.classList.contains('ion-page')) {
        return element;
    }
    const ionPage = element.querySelector(':scope > .ion-page, :scope > ion-nav, :scope > ion-tabs');
    if (ionPage) {
        return ionPage;
    }
    // idk, return the original element so at least something animates and we don't have a null pointer
    return element;
};
const fancyAnimation = (_, opts) => {
    const backDirection = opts.direction === 'back';
    const enteringEl = opts.enteringEl;
    const leavingEl = opts.leavingEl;
    const enteringPageEl = getIonPageElement(enteringEl);
    const rootTransition = animationCtrl.create();
    const enterTransition = animationCtrl.create();
    const leavingTransition = animationCtrl.create();
    leavingTransition.addElement(getIonPageElement(leavingEl)).duration(250);
    enterTransition
        .addElement(enteringPageEl)
        .duration(250)
        .fill('both')
        .beforeRemoveClass('ion-page-invisible');
    if (!backDirection) {
        enterTransition
            .beforeStyles({ border: 'thin solid black' })
            .keyframes([
            { offset: 0, transform: 'scale(0)' },
            { offset: 1, transform: 'scale(1)' }
        ])
            .afterClearStyles(['border']);
        leavingTransition.keyframes([
            { offset: 0, opacity: 1 },
            { offset: 1, opacity: 0.1 }
        ]);
    }
    else {
        enterTransition.keyframes([
            { offset: 0, opacity: 0.1 },
            { offset: 1, opacity: 1 }
        ]);
        leavingTransition
            .beforeStyles({ border: 'thin solid black' })
            .keyframes([
            { offset: 0, transform: 'scale(1)' },
            { offset: 1, transform: 'scale(0)' }
        ])
            .afterClearStyles(['border']);
    }
    rootTransition.addAnimation([enterTransition, leavingTransition]);
    return rootTransition;
};
const modalEnterAnimation = (baseEl) => {
    const backdropAnimation = animationCtrl
        .create()
        .addElement(baseEl.querySelector('ion-backdrop'))
        .fromTo('opacity', '0.01', '0.9')
        .duration(500);
    const wrapperAnimation = animationCtrl
        .create()
        .addElement(baseEl.querySelector('.modal-wrapper'))
        .delay(500)
        .keyframes([
        { offset: 0, opacity: '0', transform: 'scale(0)' },
        { offset: 1, opacity: '0.99', transform: 'scale(1)' }
    ])
        .duration(250);
    return animationCtrl
        .create()
        .addElement(baseEl)
        .easing('ease-out')
        .addAnimation([backdropAnimation, wrapperAnimation]);
};
const modalLeaveAnimation = (baseEl) => {
    return modalEnterAnimation(baseEl).direction('reverse');
};


/***/ }),

/***/ 90158:
/*!***************************************!*\
  !*** ./src/app/app-routing.module.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppRoutingModule": function() { return /* binding */ AppRoutingModule; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ 39895);
/* harmony import */ var _auth_auth_guard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./auth/auth.guard */ 3870);




////////////////////////////////////////////////////////////////////////////////////////////
const routes = [
    { path: '', redirectTo: '/auth', pathMatch: 'full' },
    ///// AUTH /////
    { path: 'auth', loadChildren: () => __webpack_require__.e(/*! import() */ "src_app_auth_auth_module_ts").then(__webpack_require__.bind(__webpack_require__, /*! ./auth/auth.module */ 71674)).then(m => m.AuthPageModule) },
    ///// TABS /////
    { path: 'tabs', loadChildren: () => Promise.all(/*! import() */[__webpack_require__.e("default-node_modules_ng-circle-progress___ivy_ngcc___fesm2015_ng-circle-progress_js"), __webpack_require__.e("src_app_tabs_tabs_module_ts")]).then(__webpack_require__.bind(__webpack_require__, /*! ./tabs/tabs.module */ 15564)).then(m => m.TabsPageModule), canLoad: [_auth_auth_guard__WEBPACK_IMPORTED_MODULE_0__.AuthGuard] },
    ///// PAGES /////
    { path: 'settings', loadChildren: () => Promise.all(/*! import() */[__webpack_require__.e("default-node_modules_ng-circle-progress___ivy_ngcc___fesm2015_ng-circle-progress_js"), __webpack_require__.e("src_app_settings_settings_module_ts")]).then(__webpack_require__.bind(__webpack_require__, /*! ./settings/settings.module */ 27075)).then(m => m.SettingsPageModule), canLoad: [_auth_auth_guard__WEBPACK_IMPORTED_MODULE_0__.AuthGuard] },
    { path: 'profile', loadChildren: () => Promise.all(/*! import() */[__webpack_require__.e("default-node_modules_ng-circle-progress___ivy_ngcc___fesm2015_ng-circle-progress_js"), __webpack_require__.e("src_app_profile_profile_module_ts")]).then(__webpack_require__.bind(__webpack_require__, /*! ./profile/profile.module */ 84523)).then(m => m.ProfilePageModule), canLoad: [_auth_auth_guard__WEBPACK_IMPORTED_MODULE_0__.AuthGuard] },
    { path: 'people', loadChildren: () => Promise.all(/*! import() */[__webpack_require__.e("default-node_modules_ng-circle-progress___ivy_ngcc___fesm2015_ng-circle-progress_js"), __webpack_require__.e("src_app_people_people_people_module_ts")]).then(__webpack_require__.bind(__webpack_require__, /*! ./people/people/people.module */ 38710)).then(m => m.PeoplePageModule), canLoad: [_auth_auth_guard__WEBPACK_IMPORTED_MODULE_0__.AuthGuard] },
    { path: 'pay', loadChildren: () => Promise.all(/*! import() */[__webpack_require__.e("default-node_modules_ng-circle-progress___ivy_ngcc___fesm2015_ng-circle-progress_js"), __webpack_require__.e("src_app_pay_pay_module_ts")]).then(__webpack_require__.bind(__webpack_require__, /*! ./pay/pay.module */ 59485)).then(m => m.PayPageModule), canLoad: [_auth_auth_guard__WEBPACK_IMPORTED_MODULE_0__.AuthGuard] },
    { path: 'serverlog', loadChildren: () => Promise.all(/*! import() */[__webpack_require__.e("default-node_modules_ng-circle-progress___ivy_ngcc___fesm2015_ng-circle-progress_js"), __webpack_require__.e("src_app_serverlog_serverlog_module_ts")]).then(__webpack_require__.bind(__webpack_require__, /*! ./serverlog/serverlog.module */ 36958)).then(m => m.ServerlogPageModule), canLoad: [_auth_auth_guard__WEBPACK_IMPORTED_MODULE_0__.AuthGuard] },
    { path: 'snoop', loadChildren: () => Promise.all(/*! import() */[__webpack_require__.e("default-node_modules_ng-circle-progress___ivy_ngcc___fesm2015_ng-circle-progress_js"), __webpack_require__.e("src_app_snoop_snoop_module_ts")]).then(__webpack_require__.bind(__webpack_require__, /*! ./snoop/snoop.module */ 47607)).then(m => m.SnoopPageModule), canLoad: [_auth_auth_guard__WEBPACK_IMPORTED_MODULE_0__.AuthGuard] },
    ///// MODALS /////  
    // FirstRun
    { path: 'firstrun', loadChildren: () => Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./modals/firstrun/firstrun.module */ 5628)).then(m => m.FirstRunPageModule), canLoad: [_auth_auth_guard__WEBPACK_IMPORTED_MODULE_0__.AuthGuard] },
    // DateRange
    { path: 'daterange', loadChildren: () => Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./modals/daterange/daterange.module */ 71369)).then(m => m.DateRangePageModule), canLoad: [_auth_auth_guard__WEBPACK_IMPORTED_MODULE_0__.AuthGuard] },
    // TSheets
    { path: 'tsheet-detail', loadChildren: () => Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./modals/detail/tsheet-detail/tsheet-detail.module */ 77963)).then(m => m.TSheetDetailPageModule), canLoad: [_auth_auth_guard__WEBPACK_IMPORTED_MODULE_0__.AuthGuard] },
    { path: 'tsheet-add', loadChildren: () => Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./modals/detail/tsheet-detail/tsheet-add/tsheet-add.module */ 3690)).then(m => m.TSheetAddPageModule), canLoad: [_auth_auth_guard__WEBPACK_IMPORTED_MODULE_0__.AuthGuard] },
    { path: 'tsheet-breaks', loadChildren: () => Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./modals/detail/tsheet-detail/tsheet-breaks/tsheet-breaks.module */ 91806)).then(m => m.TSheetBreaksPageModule), canLoad: [_auth_auth_guard__WEBPACK_IMPORTED_MODULE_0__.AuthGuard] },
    { path: 'tsheet-history', loadChildren: () => Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./modals/detail/tsheet-detail/tsheet-history/tsheet-history.module */ 29080)).then(m => m.TSheetHistoryPageModule), canLoad: [_auth_auth_guard__WEBPACK_IMPORTED_MODULE_0__.AuthGuard] },
    // Rosters
    { path: 'roster-detail', loadChildren: () => __webpack_require__.e(/*! import() */ "src_app_modals_detail_roster-detail_roster-detail_module_ts").then(__webpack_require__.bind(__webpack_require__, /*! ./modals/detail/roster-detail/roster-detail.module */ 22191)).then(m => m.RosterDetailPageModule), canLoad: [_auth_auth_guard__WEBPACK_IMPORTED_MODULE_0__.AuthGuard] },
    // Tasks
    { path: 'task-add', loadChildren: () => Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./modals/detail/task-add/task-add.module */ 43357)).then(m => m.TaskAddPageModule), canLoad: [_auth_auth_guard__WEBPACK_IMPORTED_MODULE_0__.AuthGuard] },
    { path: 'taskassignee', loadChildren: () => Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./modals/detail/task-add/taskassignee/taskassignee.module */ 46361)).then(m => m.TaskAssigneePageModule), canLoad: [_auth_auth_guard__WEBPACK_IMPORTED_MODULE_0__.AuthGuard] },
    // News/Memos
    { path: 'news-detail', loadChildren: () => Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./modals/detail/news-detail/news-detail.module */ 43175)).then(m => m.NewsDetailPageModule), canLoad: [_auth_auth_guard__WEBPACK_IMPORTED_MODULE_0__.AuthGuard] },
    { path: 'news-add', loadChildren: () => Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./modals/detail/news-detail/news-add/news-add.module */ 48990)).then(m => m.NewsAddPageModule), canLoad: [_auth_auth_guard__WEBPACK_IMPORTED_MODULE_0__.AuthGuard] },
    { path: 'recipients', loadChildren: () => Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./modals/detail/news-detail/news-add/recipients/recipients.module */ 76356)).then(m => m.RecipientsPageModule), canLoad: [_auth_auth_guard__WEBPACK_IMPORTED_MODULE_0__.AuthGuard] }
];
////////////////////////////////////////////////////////////////////////////////////////////
let AppRoutingModule = class AppRoutingModule {
};
AppRoutingModule = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule)({
        imports: [_angular_router__WEBPACK_IMPORTED_MODULE_3__.RouterModule.forRoot(routes, { preloadingStrategy: _angular_router__WEBPACK_IMPORTED_MODULE_3__.PreloadAllModules, enableTracing: false })],
        exports: [_angular_router__WEBPACK_IMPORTED_MODULE_3__.RouterModule]
    })
], AppRoutingModule);

////////////////////////////////////////////////////////////////////////////////////////////


/***/ }),

/***/ 55041:
/*!**********************************!*\
  !*** ./src/app/app.component.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppComponent": function() { return /* binding */ AppComponent; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _raw_loader_app_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !raw-loader!./app.component.html */ 91106);
/* harmony import */ var _app_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./app.component.scss */ 43069);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @angular/router */ 39895);
/* harmony import */ var _services_deputy_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./services/deputy.service */ 22092);
/* harmony import */ var _services_events_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./services/events.service */ 80106);
/* harmony import */ var _services_detail_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./services/detail.service */ 52153);
/* harmony import */ var _services_storage_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./services/storage.service */ 71188);
/* harmony import */ var _services_sqlite_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./services/sqlite.service */ 90636);
/* harmony import */ var _services_datetime_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./services/datetime.service */ 12826);
/* harmony import */ var _services_app_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./services/app.service */ 66475);
/* harmony import */ var _services_calendar_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./services/calendar.service */ 49603);
/* harmony import */ var _services_notifications_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./services/notifications.service */ 79744);
/* harmony import */ var _services_push_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./services/push.service */ 52314);
/* harmony import */ var _services_firebase_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./services/firebase.service */ 19446);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! rxjs/operators */ 45435);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var _capacitor_status_bar__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @capacitor/status-bar */ 64909);
/* harmony import */ var _capacitor_splash_screen__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @capacitor/splash-screen */ 88592);
/* harmony import */ var _capacitor_app__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @capacitor/app */ 42138);
/* harmony import */ var _capacitor_dialog__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @capacitor/dialog */ 63540);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! jquery */ 91704);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! lodash */ 23815);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_18__);

























//////////////////////////////////////////////////////////////////////////////////////
let AppComponent = class AppComponent {
    //////////////////////////////////////////////////////////////////////////////////////
    constructor(platform, menu, navController, evServ, router, logger, deputy, detailServ, sqlServ, storeServ, dT, noteServ, appServ, calServ, fireServ, pushServ) {
        this.platform = platform;
        this.menu = menu;
        this.navController = navController;
        this.evServ = evServ;
        this.router = router;
        this.logger = logger;
        this.deputy = deputy;
        this.detailServ = detailServ;
        this.sqlServ = sqlServ;
        this.storeServ = storeServ;
        this.dT = dT;
        this.noteServ = noteServ;
        this.appServ = appServ;
        this.calServ = calServ;
        this.fireServ = fireServ;
        this.pushServ = pushServ;
        this.tabLinksShowing = false;
        this.menuBioInfoDone = false;
        this.shouldSaveShield = false;
        this.appInitDone = false;
        this.fb_login_method = null;
        this.fct_token = null;
        this.fe_token = null;
        this.fct_expires = null;
        this.deputyRefresh = null;
        this.sserverRefresh = null;
        this.doShowIAPBubble = false;
        this.iapBubbleData = null;
        if (localStorage.getItem('myDoReload') !== null) {
            localStorage.removeItem('myDoReload');
        }
        ;
        this.initApp();
    }
    //////////////////////////////////////////////////////////////////////////////////////
    initApp() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[App|initApp] ()...');
            this.platform.ready().then(() => (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
                _capacitor_splash_screen__WEBPACK_IMPORTED_MODULE_14__.SplashScreen.hide({ fadeOutDuration: 250 });
                _capacitor_status_bar__WEBPACK_IMPORTED_MODULE_13__.StatusBar.setOverlaysWebView({ overlay: true });
                _capacitor_status_bar__WEBPACK_IMPORTED_MODULE_13__.StatusBar.setBackgroundColor({ color: '#00000000' });
                yield this.detailServ.getHasNetConn();
                this.initNavMon();
                this.initAppPluginListeners();
                this.FCTFns('init');
                this.initIAPBubbleListen();
                this.logger.info('[App|initApp|eventServ] ➕👂 [LISTEN] for "setAuthGVarsDone"...');
                const initSub = this.evServ.subscribe('setAuthGVarsDone', (dpAuthSetRes) => (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
                    this.logger.info('[App|initApp|eventServ] 📥👂 (IN) [EVENT] for "setAuthGVarsDone".');
                    if (dpAuthSetRes.result) {
                        this.initSyncAuth(dpAuthSetRes.data);
                    }
                    ;
                    const doAInits = () => {
                        this.logger.info('[App|initApp|eventServ) ➕👂 [LISTEN] for "doPushNoteInit"...');
                        this.evServ.subscribe('doPushNoteInit', tf => {
                            this.logger.info('[App|initApp|eventServ] 📥👂 (IN) [EVENT] for "doPushNoteInit".');
                            if (tf) {
                                this.pushServ.doPushNoteInit();
                            }
                            ;
                            this.logger.info('[App|initApp|eventServ) 🧨👂 [DESTROY] for "doPushNoteInit".');
                            this.evServ.destroy('doPushNoteInit');
                        });
                        this.noteServ.doNoteInit();
                        this.calServ.doInitCal();
                        this.logger.info('[App|initApp] (EventServ) ➖👂 [LISTEN] for "setAuthGVarsDone".');
                        initSub.unsubscribe();
                        this.postInitTokenListen();
                    };
                    // IF FR-SETUP DONE INIT
                    if ((yield this.detailServ.getFRSetupDone())) {
                        this.logger.info('[App|initApp|eventServ) ➕👂 [LISTEN] for "EnteringApp"...');
                        const entAppSub = this.evServ.subscribe('EnteringApp', () => {
                            this.logger.info('[App|initApp|eventServ] 📥👂 (IN) [EVENT] for "EnteringApp".');
                            this.logger.info('[App|doAInits] 🟩 INIT = IMMEDIATE...');
                            doAInits();
                            this.logger.info('[App|initApp] (EventServ) ➖👂 [LISTEN] for "EntertingApp".');
                            entAppSub.unsubscribe();
                        });
                        // IF FIRST-RUN INIT
                    }
                    else {
                        this.logger.info('[App|initApp|eventServ) ➕👂 [LISTEN] for "doDelayedAppInits"...');
                        this.evServ.subscribe('doDelayedAppInits', dbWasImported => {
                            this.logger.info('[App|initApp|eventServ] 📥👂 (IN) [EVENT] for "doDelayedAppInits".');
                            if (!dbWasImported) {
                                this.logger.info('[App|initApp|eventServ) ➕👂 [LISTEN] for "EnteringApp"...');
                                const entAppSub = this.evServ.subscribe('EnteringApp', () => {
                                    this.logger.info('[App|initApp|eventServ] 📥👂 (IN) [EVENT] for "EnteringApp".');
                                    this.logger.info('[App|doAInits] 🟧 INIT > FIRSTRUN (DB!=Import)...');
                                    doAInits();
                                    this.logger.info('[App|initApp] (EventServ) ➖👂 [LISTEN] for "EntertingApp".');
                                    entAppSub.unsubscribe();
                                });
                                this.logger.info('[App|initApp|eventServ) 🧨👂 [DESTROY] for "doDelayedAppInits".');
                                this.evServ.destroy('doDelayedAppInits');
                            }
                            else if (dbWasImported) {
                                this.logger.info('[App|initApp|eventServ) ➕👂 [LISTEN] for "delayedSyncDone"...');
                                this.evServ.subscribe('delayedSyncDone', () => {
                                    this.logger.info('[App|initApp|eventServ] 📥👂 (IN) [EVENT] for "delayedSyncDone".');
                                    this.logger.info('[App|doAInits] 🟨 INIT > SYNC (DB=Import)...');
                                    doAInits();
                                    this.logger.info('[App|initApp|eventServ) 🧨👂 [DESTROY] for "delayedSyncDone".');
                                    this.evServ.destroy('delayedSyncDone');
                                });
                                this.logger.info('[App|initApp|eventServ) 🧨👂 [DESTROY] for "doDelayedAppInits".');
                                this.evServ.destroy('doDelayedAppInits');
                            }
                        });
                    }
                    ;
                }));
                window.addEventListener('readyLR', () => (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
                    this.logger.info('[App|initApp] (\u26A1LiveReload\u267B) >>>>> QUICK CLOSE SQLite DB <<<<<');
                    const closeDBRes = yield this.sqlServ.lrQC();
                    if (closeDBRes) {
                        localStorage.setItem('myDoReload', 'true');
                    }
                }));
                this.logger.info('[App|initApp|eventServ) ➕👂 [LISTEN] for "EnteringApp"...');
                const menuEASub = this.evServ.subscribe('EnteringApp', () => {
                    this.logger.info('[App|initApp|eventServ] 📥👂 (IN) [EVENT] for "EnteringApp".');
                    this.menuBioInfo();
                    this.logger.info('[App|initApp] (EventServ) ➖👂 [LISTEN] for "EntertingApp".');
                    menuEASub.unsubscribe();
                });
            }));
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    FCTFns(mode) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
            const doSuccess = () => { this.sserverRefresh = 'success'; setTimeout(() => { this.sserverRefresh = null; }, 1500); };
            const doFail = () => { this.sserverRefresh = 'fail'; setTimeout(() => { this.sserverRefresh = null; }, 1500); };
            if (mode === 'init') {
                this.logger.info('[App|newFCTListener|eventServ] ➕👂 [LISTEN] for "fbUserAccount"...');
                this.evServ.subscribe('fbUserAccount', () => { this.logger.info('[App|newFCTListener|eventServ] 📥👂 (IN) [EVENT] for "fbUserAccount".'); this.checkSServerInfo(); });
            }
            else {
                this.sserverRefresh = 'inprog';
                this.fb_login_method = '...';
                this.fct_token = '...';
                this.fe_token = '...';
                this.fct_expires = '...';
                const loutRes = yield this.fireServ.logoutUser();
                if (loutRes) {
                    const lCTRes = yield this.fireServ.loginCustomToken();
                    if (lCTRes) {
                        doSuccess();
                    }
                    else {
                        const upRes = yield this.sqlServ.getADBItem('up');
                        if (upRes.result) {
                            const upLogRes = yield this.fireServ.loginUserEmail(upRes.data);
                            if (upLogRes) {
                                doSuccess();
                            }
                            else {
                                doFail();
                            }
                        }
                        else {
                            doFail();
                        }
                    }
                }
                else {
                    doSuccess();
                }
            }
            ;
            this.checkSServerInfo();
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    postInitTokenListen() {
        this.logger.info('[App|postInitTokenListen] ()...');
        this.logger.info('[App|postInitTokenListen|eventServ] ➕👂 [LISTEN] for "setAuthGVarsDone"...');
        this.evServ.subscribe('setAuthGVarsDone', (newDPAuthRes) => (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[App|postInitTokenListen|eventServ] 📥👂 (IN) [EVENT] for "setAuthGVarsDone".');
            if (newDPAuthRes.result) {
                this.initSyncAuth(newDPAuthRes.data);
            }
            else {
                this.logger.info('[App|postInitTokenListen->setAuthGVars] (❌ERROR) - !setAuthGVars.result');
            }
            ;
        }));
    }
    //////////////////////////////////////////////////////////////////////////////////////
    initSyncAuth(dpAuth) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
            function myDiff(object, base) {
                return (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () { function changes(object, base) { return lodash__WEBPACK_IMPORTED_MODULE_18__.transform(object, function (result, value, key) { if (!lodash__WEBPACK_IMPORTED_MODULE_18__.isEqual(value, base[key])) {
                    result[key] = (lodash__WEBPACK_IMPORTED_MODULE_18__.isObject(value) && lodash__WEBPACK_IMPORTED_MODULE_18__.isObject(base[key])) ? changes(value, base[key]) : value;
                } }); } ; return changes(object, base); });
            }
            ;
            let sqlAuth;
            if ((yield this.detailServ.getADBSetupDone())) {
                if (!this.detailServ.getADBIsOpen()) {
                    yield this.sqlServ.openAuth();
                }
                ;
                sqlAuth = yield this.sqlServ.getADBItem('auth');
            }
            else {
                sqlAuth = { result: false };
                this.logger.info('[App|initUpdateAuthDB] - initSyncAuth() - sqlAuth ERROR = dS.getADBSetupDone() = false');
            }
            ;
            let fireAuth;
            if ((yield this.detailServ.getHasNetConn())) {
                if (this.fireServ.fbLoggedIn) {
                    fireAuth = yield this.fireServ.getFireUserAuth();
                }
                else {
                    fireAuth = { result: false };
                    this.logger.info('[App|initUpdateAuthDB] - initSyncAuth() - FireAuth ERROR = fireServ.fbLoggedIn = false');
                }
            }
            else {
                fireAuth = { result: false };
                this.logger.info('[App|initUpdateAuthDB] - initSyncAuth() - FireAuth ERROR = dS.getHasNetConn = false');
            }
            ;
            // -----------------------------------
            if (sqlAuth.result) {
                if (!lodash__WEBPACK_IMPORTED_MODULE_18__.isEqual(sqlAuth.data, dpAuth)) {
                    this.logger.info('[App|initUpdateAuthDB] (🟡UPDATING): DB!==DP Auth Values - Updating ADBItem for Fields:');
                    const diffObj = yield myDiff(dpAuth, sqlAuth.data);
                    this.logger.info(diffObj);
                    const updateDPAuthDB = yield this.sqlServ.setADBItem(null, dpAuth);
                    this.sqlServ.closeAuth();
                    updateDPAuthDB ? this.logger.info('[App|initUpdateAuthDB] (✅SUCCESS) - Auth Database Updated') : this.logger.info('[App|initUpdateAuthDB] (❌ERROR) - Auth Database NOT Updated');
                }
                else {
                    this.logger.info('[App|initUpdateAuthDB] (🟢SKIP): DB===DP Auth Values - No Update Required');
                    this.sqlServ.closeAuth();
                }
            }
            else {
                this.logger.info('[App|initSyncAuth] (❌ERROR) - Failed to Retrieve AuthObj from SQL');
                this.sqlServ.closeAuth();
            }
            ;
            // -----------------------------------
            if (fireAuth.result) {
                if (!lodash__WEBPACK_IMPORTED_MODULE_18__.isEqual(fireAuth.data, dpAuth)) {
                    this.logger.info('[App|initUpdateAuthDB] (🟡UPDATING): FIRE!==DP Auth Values - Updating fireUserDoc for Fields: ');
                    const diffObj = yield myDiff(dpAuth, fireAuth.data);
                    this.logger.info(diffObj);
                    const updateDPAuthFire = yield this.fireServ.setFireUserDoc(this.deputy.userEmail, dpAuth);
                    if (updateDPAuthFire) {
                        this.logger.info('[App|initUpdateAuthDB] (✅SUCCESS) - Firebase AuthDoc Updated');
                    }
                    else {
                        this.logger.info('[App|initUpdateAuthDB] (❌ERROR) - Firebase AuthDoc NOT Updated');
                    }
                }
                else {
                    this.logger.info('[App|initUpdateAuthDB] (🟢SKIP): FIRE===DP Auth Values - No Update Required');
                }
            }
            else {
                this.logger.info('[App|initUpdateAuthDB] (❌ERROR) - Firebase AuthDoc NOT FOUND/UPDATED');
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    initAppPluginListeners() {
        this.logger.info('[App|initAppPluginListeners] ()...');
        if (this.appInitDone === false) {
            this.appInitDone = true;
            this.evServ.subscribe('myAppStateActive', tf => { this.logger.info('[App|AppPlugin|AppState] \u269C (isActive?): ' + tf.toString().toUpperCase()); });
            this.evServ.subscribe('myAppRestoredResult', data => {
                if (data) {
                    this.logger.info('[App|AppPlugin|AppRestored] - Data:');
                    this.logger.info('[App|AppPlugin|RestoredResult] \u269C (Result): ');
                    this.logger.info('\u269C pluginId:   ' + data.pluginId);
                    this.logger.info('\u269C methodName: ' + data.methodName);
                    this.logger.info('\u269C data:       ' + data.data);
                }
                else {
                    this.logger.info('[App|AppPlugin|AppRestored] - No Data Returned');
                }
            });
            this.evServ.subscribe('myAppCanGoBack', tf => { this.logger.info('[App|AppPlugin|AppCanGoBack] \u269C (appCanGoBack?): ' + tf.toString().toUpperCase()); });
            this.appServ.doAppInit();
        }
    }
    //////////////////////////////////////////////////////////////////////////////////////
    initNavMon() {
        this.logger.info('[App|initNavMon] ()...');
        this.startNavPipe = this.router.events.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_20__.filter)(evt => evt instanceof _angular_router__WEBPACK_IMPORTED_MODULE_21__.NavigationStart));
        this.endNavPipe = this.router.events.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_20__.filter)(evt => evt instanceof _angular_router__WEBPACK_IMPORTED_MODULE_21__.NavigationEnd));
        const eV = this.evServ;
        this.startNavPipe.subscribe(() => {
            const oldURLStr = this.router.url;
            const oldURLArr = oldURLStr.split('/');
            const oldURLArrNo = oldURLArr.length;
            const oldPageIndex = oldURLArrNo - 1;
            const oldPage = oldURLArr[oldPageIndex];
            eV.subscribe('gotNewPage', newPage => {
                if (oldPage !== newPage) {
                    jquery__WEBPACK_IMPORTED_MODULE_17__('.sheriff-mainmenu-topitem').removeClass('isactivemenulink');
                    jquery__WEBPACK_IMPORTED_MODULE_17__('#mainmenu-' + newPage).addClass('isactivemenulink');
                }
                ;
                eV.destroy('gotNewPage');
            });
        });
        this.endNavPipe.subscribe(() => {
            const newURLStr = this.router.url;
            const newURLArr = newURLStr.split('/');
            const newURLArrNo = newURLArr.length;
            const newPageIndex = newURLArrNo - 1;
            const newPage = newURLArr[newPageIndex];
            if (newPage) {
                const cPageObj = { url: newURLStr, lName: newPage, cName: `${newPage[0].toUpperCase()}${newPage.slice(1)}` };
                this.evServ.currentPageName(cPageObj);
                eV.publish('gotNewPage', newPage);
            }
        });
    }
    ///////////////////////////////////////////////////////////////////////
    checkSServerInfo() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[App|checkSServerInfo] ()...');
            const gPKeys = ['fct_token', 'fe_token', 'fct_expires'];
            const nEAt = (exAtUTS) => { const expD = this.dT.Dut(exAtUTS); return this.dT.format(expD, 'd MMM h:mma'); };
            const loginMethodTxt = { notsignedin: 'Not Signed In', uplogin: 'Username/Password (Login)', upregister: 'Username/Password (Register)', fctokenfet: 'Custom Token (FET)', fctokendpt: 'Custom Token (DPT)' };
            const fbLIMethodKey = this.fireServ.loginMethodKey;
            this.fb_login_method = loginMethodTxt[fbLIMethodKey];
            if (fbLIMethodKey === 'notsignedin') {
                for (let i = 0; i < gPKeys.length; i++) {
                    this[gPKeys[i]] = '-';
                }
            }
            else if (fbLIMethodKey === 'uplogin' || fbLIMethodKey === 'upregister') {
                for (let i = 0; i < gPKeys.length; i++) {
                    this[gPKeys[i]] = 'N/A';
                }
            }
            else if (fbLIMethodKey === 'fctokenfet' || fbLIMethodKey === 'fctokendpt') {
                this.fct_token = this.deputy.SServer.FCT.custom_token.substring(0, 16) + '...';
                this.fe_token = this.deputy.SServer.FCT.fe_token.substring(0, 16) + '...';
                this.fct_expires = nEAt(Number(this.deputy.SServer.FCT.expires_at));
            }
            ;
        });
    }
    ///////////////////////////////////////////////////////////////////////
    initIAPBubbleListen() {
        this.logger.info('[App|toggleIAPBubble] ()...');
        this.evServ.subscribe('iapBubble', iapB => {
            if (this.doShowIAPBubble) {
                this.doShowIAPBubble = false;
            }
            ;
            if (typeof iapB === 'object') {
                this.iapBubbleData = iapB;
            }
            ;
            if (this.iapBubbleData !== null) {
                if (!this.doShowIAPBubble) {
                    this.doShowIAPBubble = true;
                }
                ;
                setTimeout(() => { this.doShowIAPBubble = false; }, 5000);
            }
            else {
                this.evServ.showToast('warning', 'No Prior Notification');
            }
        });
    }
    ///////////////////////////////////////////////////////////////////////
    mainMenu(action) {
        this.logger.info('[App|MenuCtrl] Main Menu ' + action.toString().toUpperCase());
        if (action === 'opened') {
            jquery__WEBPACK_IMPORTED_MODULE_17__('.sheriff-menu-button').addClass('sheriff-menu-open');
            const actLinkLabel = jquery__WEBPACK_IMPORTED_MODULE_17__('#mainmenu-' + this.currentPageKey + ' > div.sheriff-mainmenu-topitem-label');
            const actLinkIco = jquery__WEBPACK_IMPORTED_MODULE_17__('#mainmenu-' + this.currentPageKey + ' > div.sheriff-mainmenu-topitem-label > ion-icon');
            jquery__WEBPACK_IMPORTED_MODULE_17__('#mainmenu-' + this.currentPageKey).addClass('animate__animated animate__headShake animate__fast');
            jquery__WEBPACK_IMPORTED_MODULE_17__(actLinkLabel).addClass('isactivemenulink');
            jquery__WEBPACK_IMPORTED_MODULE_17__(actLinkIco).addClass('isactivemenulink');
        }
        ;
        if (action === 'closed') {
            jquery__WEBPACK_IMPORTED_MODULE_17__('.sheriff-menu-button').removeClass('sheriff-menu-open');
        }
        ;
        if (action === 'willopen') {
            this.checkSServerInfo();
            this.checkShouldSave();
            jquery__WEBPACK_IMPORTED_MODULE_17__('.sheriff-mainmenu-topitem').removeClass('animate__animated animate__headShake animate__fast');
            jquery__WEBPACK_IMPORTED_MODULE_17__('.sheriff-mainmenu-topitem-label').removeClass('isactivemenulink');
            jquery__WEBPACK_IMPORTED_MODULE_17__('.sheriff-mainmenu-linkico').removeClass('isactivemenulink');
            if (!this.router.url.includes('auth')) {
                if (this.router.url.includes('tabs')) {
                    this.currentPageKey = 'tabs';
                }
                else {
                    const localCurrentPageKey = this.router.url.replace('/', '');
                    this.currentPageKey = localCurrentPageKey;
                }
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////
    checkShouldSave() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () { this.detailServ.shouldSave.value ? this.shouldSaveShield = true : this.shouldSaveShield = false; });
    }
    ///////////////////////////////////////////////////////////////////////
    promptShouldSave(navPath) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[App|promptShouldSave] (' + navPath + ')...');
            const { value } = yield _capacitor_dialog__WEBPACK_IMPORTED_MODULE_16__.Dialog.confirm({ title: 'Save/Discard ' + this.detailServ.shouldSave.data + ' Details?', message: '𝗦𝗮𝘃𝗲 updated details to Deputy or 𝗗𝗶𝘀𝗰𝗮𝗿𝗱 changes?', okButtonTitle: '\uD83D\uDCBE Save', cancelButtonTitle: '\u274C Discard' });
            if (value) {
                this.menu.close();
                this.logger.info('[App|promptShouldSave|eventServ] 📤👂 (OUT) [EVENT] for "menuShieldSave".');
                this.evServ.publish('menuShieldSave', navPath);
            }
            else {
                this.detailServ.setShouldSave(false, null);
                this.shouldSaveShield = false;
                if (navPath === 'logout') {
                    this.onLogout();
                }
                else if (navPath === 'exit') {
                    this.onExit('noprompt');
                }
                else {
                    this.navController.navigateRoot(navPath);
                }
            }
        });
    }
    ///////////////////////////////////////////////////////////////////////
    onLogout() {
        if (!this.shouldSaveShield) {
            this.detailServ.setAuthLogout(true);
            jquery__WEBPACK_IMPORTED_MODULE_17__('#sheriff-auth-networkstatus-wrapper').removeClass('adjust-for-auth-toolbar-overlay');
            const myAniCSS = (jqEle, animName) => new Promise((resolve) => { const animClassStr = 'animate__animated animate__' + animName + ' animate__faster'; jquery__WEBPACK_IMPORTED_MODULE_17__(jqEle).addClass(animClassStr); jquery__WEBPACK_IMPORTED_MODULE_17__(jqEle).on('animationend', () => { jquery__WEBPACK_IMPORTED_MODULE_17__(jqEle).removeClass(animClassStr); resolve('done'); }); });
            myAniCSS('#sheriff-custom-splash-wrapper', 'fadeIn').then(() => jquery__WEBPACK_IMPORTED_MODULE_17__('#sheriff-custom-splash-wrapper').show());
            jquery__WEBPACK_IMPORTED_MODULE_17__('#sheriff-custom-splash-logo-img').addClass('animate__animated animate__headShake animate__infinite');
            jquery__WEBPACK_IMPORTED_MODULE_17__('#sheriff-custom-splash-titletexttop-wrapper').removeClass('animate__animated animate__slideOutUp animate__faster');
            jquery__WEBPACK_IMPORTED_MODULE_17__('#sheriff-custom-splash-zer0ne-wrapper').removeClass('animate__animated animate__slideOutDown animate__faster');
            jquery__WEBPACK_IMPORTED_MODULE_17__('.bar-horizontal').removeClass('finished');
            jquery__WEBPACK_IMPORTED_MODULE_17__('#sheriff-custom-splash-logo-img').prop('src', '../assets/img/lilheader-s.png');
            jquery__WEBPACK_IMPORTED_MODULE_17__('.sheriff-cutom-splash-text-wrapper.texttop').removeClass('animate__slideOutLeft').addClass('animate__slideInLeft');
            jquery__WEBPACK_IMPORTED_MODULE_17__('.sheriff-cutom-splash-text-wrapper.textbottom').removeClass('animate__slideOutRight').addClass('animate__slideInRight');
            jquery__WEBPACK_IMPORTED_MODULE_17__('#sheriff-custom-splash-wrapper, .sheriff-col.custom-splash-col.middlelogocol').css('background', '#121212');
            this.menu.close().then(() => { this.navController.navigateRoot('/auth'); });
        }
        else {
            this.promptShouldSave('logout');
        }
    }
    ///////////////////////////////////////////////////////////////////////
    onExit(mode) {
        this.logger.info('[App|onExit] (' + mode + ')...');
        if (!this.shouldSaveShield) {
            const exitPromptOpts = { title: 'Exiting Sheriff', message: 'Are you sure?', okButtonTitle: 'OK', cancelButtonTitle: 'Cancel' };
            if (mode === 'noprompt') {
                _capacitor_app__WEBPACK_IMPORTED_MODULE_15__.App.exitApp();
            }
            else {
                _capacitor_dialog__WEBPACK_IMPORTED_MODULE_16__.Dialog.confirm(exitPromptOpts).then((wasConfirmed) => (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () { if (wasConfirmed.value) {
                    _capacitor_app__WEBPACK_IMPORTED_MODULE_15__.App.exitApp();
                }
                else {
                    this.menu.close();
                } }));
            }
        }
        else {
            this.promptShouldSave('exit');
        }
    }
    ////////////////////////////////////////////////////////////////////////////////////////
    menuBioInfo() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[App|menuBioInfo] ()...');
            const mBIFields = ['access_token', 'refresh_token', 'expires_at', 'meName', 'meEmail', 'mePhone', 'workCode', 'workAva', 'meAva'];
            for (let i = 0; i < mBIFields.length; i++) {
                if (i < 2) {
                    this[mBIFields[i]] = this.deputy.Client.auth[mBIFields[i]];
                }
                else if (i === 2) {
                    const eAtD = this.dT.Dut(this.deputy.Client.auth[mBIFields[i]]);
                    this.expires_time = this.dT.format(eAtD, 'd MMM h:mma');
                }
                else {
                    this[mBIFields[i]] = this.detailServ[mBIFields[i]];
                }
            }
            ;
            this.menuBioInfoDone = true;
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////
    menuDeputyRefresh() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[TabsShifts|localDoRefresh] ()...');
            this.deputyRefresh = 'inprog';
            this.access_token = '...';
            this.refresh_token = '...';
            this.expires_time = '...';
            this.evServ.subscribe('setAuthGVarsDone', refreshRes => {
                if (refreshRes.result) {
                    this.deputyRefresh = 'success';
                    setTimeout(() => (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__awaiter)(this, void 0, void 0, function* () {
                        this.access_token = this.deputy.Client.auth.access_token;
                        this.refresh_token = this.deputy.Client.auth.refresh_token;
                        const eAtD = this.dT.Dut(this.deputy.Client.auth.expires_at);
                        this.expires_time = this.dT.format(eAtD, 'd MMM h:mma');
                        this.deputyRefresh = null;
                        this.evServ.destroy('setAuthGVarsDone');
                    }), 1500);
                }
                else {
                    this.deputyRefresh = 'fail';
                    setTimeout(() => { this.deputyRefresh = null; this.evServ.destroy('setAuthGVarsDone'); }, 1500);
                }
            });
            this.deputy.setAuthGVars(false);
        });
    }
};
AppComponent.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_22__.Platform },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_22__.MenuController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_22__.NavController },
    { type: _services_events_service__WEBPACK_IMPORTED_MODULE_3__.EventsService },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_21__.Router },
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_23__.NGXLogger },
    { type: _services_deputy_service__WEBPACK_IMPORTED_MODULE_2__.DeputyService },
    { type: _services_detail_service__WEBPACK_IMPORTED_MODULE_4__.DetailService },
    { type: _services_sqlite_service__WEBPACK_IMPORTED_MODULE_6__.SQLiteService },
    { type: _services_storage_service__WEBPACK_IMPORTED_MODULE_5__.StorageService },
    { type: _services_datetime_service__WEBPACK_IMPORTED_MODULE_7__.DateTimeService },
    { type: _services_notifications_service__WEBPACK_IMPORTED_MODULE_10__.NotificationsService },
    { type: _services_app_service__WEBPACK_IMPORTED_MODULE_8__.AppService },
    { type: _services_calendar_service__WEBPACK_IMPORTED_MODULE_9__.CalendarService },
    { type: _services_firebase_service__WEBPACK_IMPORTED_MODULE_12__.FirebaseService },
    { type: _services_push_service__WEBPACK_IMPORTED_MODULE_11__.PushService }
];
AppComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_19__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_24__.Component)({ selector: 'app-root', template: _raw_loader_app_component_html__WEBPACK_IMPORTED_MODULE_0__.default, styles: [_app_component_scss__WEBPACK_IMPORTED_MODULE_1__.default] })
    //////////////////////////////////////////////////////////////////////////////////////
], AppComponent);



/***/ }),

/***/ 36747:
/*!*******************************!*\
  !*** ./src/app/app.module.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppModule": function() { return /* binding */ AppModule; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _modals_inapp_pushnote_inapp_pushnote_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modals/inapp-pushnote/inapp-pushnote.module */ 20811);
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../environments/environment */ 92340);
/* harmony import */ var _modals_detail_tsheet_detail_tsheet_add_tsheet_add_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modals/detail/tsheet-detail/tsheet-add/tsheet-add.module */ 3690);
/* harmony import */ var _modals_detail_task_add_task_add_module__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modals/detail/task-add/task-add.module */ 43357);
/* harmony import */ var _modals_detail_task_add_taskassignee_taskassignee_module__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modals/detail/task-add/taskassignee/taskassignee.module */ 46361);
/* harmony import */ var _modals_detail_news_detail_news_add_news_add_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modals/detail/news-detail/news-add/news-add.module */ 48990);
/* harmony import */ var _modals_detail_news_detail_news_add_recipients_recipients_module__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modals/detail/news-detail/news-add/recipients/recipients.module */ 76356);
/* harmony import */ var _modals_detail_tsheet_detail_tsheet_breaks_tsheet_breaks_module__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modals/detail/tsheet-detail/tsheet-breaks/tsheet-breaks.module */ 91806);
/* harmony import */ var _modals_detail_tsheet_detail_tsheet_history_tsheet_history_module__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modals/detail/tsheet-detail/tsheet-history/tsheet-history.module */ 29080);
/* harmony import */ var _popovers_detailmenu_detailmenu_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./popovers/detailmenu/detailmenu.component */ 70518);
/* harmony import */ var _modals_detail_tsheet_detail_tsheet_detail_module__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./modals/detail/tsheet-detail/tsheet-detail.module */ 77963);
/* harmony import */ var _modals_detail_news_detail_news_detail_module__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./modals/detail/news-detail/news-detail.module */ 43175);
/* harmony import */ var _popovers_datepresets_datepresets_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./popovers/datepresets/datepresets.component */ 51568);
/* harmony import */ var _popovers_peopledetail_peopledetail_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./popovers/peopledetail/peopledetail.component */ 2925);
/* harmony import */ var _modals_alertschedule_alertschedule_module__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./modals/alertschedule/alertschedule.module */ 88987);
/* harmony import */ var _modals_profilecsselect_profilecsselect_module__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./modals/profilecsselect/profilecsselect.module */ 67170);
/* harmony import */ var _modals_daterange_daterange_module__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./modals/daterange/daterange.module */ 71369);
/* harmony import */ var _modals_firstrun_firstrun_module__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./modals/firstrun/firstrun.module */ 5628);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var _animations__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./animations */ 63074);
/* harmony import */ var _app_routing_module__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./app-routing.module */ 90158);
/* harmony import */ var _app_component__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./app.component */ 55041);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! @angular/platform-browser */ 39075);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! @angular/router */ 39895);
/* harmony import */ var _ionic_native_splash_screen_ngx__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @ionic-native/splash-screen/ngx */ 51524);
/* harmony import */ var _ionic_native_status_bar_ngx__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @ionic-native/status-bar/ngx */ 73494);
/* harmony import */ var _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @ionic-native/http/ngx */ 68589);
/* harmony import */ var _ionic_native_in_app_browser_ngx__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @ionic-native/in-app-browser/ngx */ 53760);
/* harmony import */ var _ionic_native_calendar_ngx__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @ionic-native/calendar/ngx */ 20287);
/* harmony import */ var _ionic_native_file_ngx__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @ionic-native/file/ngx */ 20138);
/* harmony import */ var _ionic_native_file_path_ngx__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @ionic-native/file-path/ngx */ 59865);
/* harmony import */ var _ionic_native_file_transfer_ngx__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @ionic-native/file-transfer/ngx */ 97905);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var _ionic_native_file_chooser_ngx__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @ionic-native/file-chooser/ngx */ 81953);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! @angular/common */ 38583);
/* harmony import */ var _services_sqlite_service__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./services/sqlite.service */ 90636);
/* harmony import */ var _services_detail_service__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./services/detail.service */ 52153);
/* harmony import */ var _ionic_native_date_picker_ngx__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @ionic-native/date-picker/ngx */ 61194);
/* harmony import */ var swiper_angular__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! swiper/angular */ 52635);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var ionic2_calendar__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ionic2-calendar */ 87732);
/* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! @angular/platform-browser/animations */ 75835);
/* harmony import */ var _angular_fire_compat__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! @angular/fire/compat */ 88939);
/* harmony import */ var _angular_fire_compat_database__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! @angular/fire/compat/database */ 79978);
/* harmony import */ var _angular_fire_compat_auth__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! @angular/fire/compat/auth */ 1325);
/* harmony import */ var _angular_fire_compat_storage__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! @angular/fire/compat/storage */ 43893);
/* harmony import */ var _angular_fire_compat_messaging__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! @angular/fire/compat/messaging */ 52577);
















































let AppModule = class AppModule {
};
AppModule = (0,tslib__WEBPACK_IMPORTED_MODULE_33__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_34__.NgModule)({
        declarations: [_app_component__WEBPACK_IMPORTED_MODULE_20__.AppComponent, _popovers_datepresets_datepresets_component__WEBPACK_IMPORTED_MODULE_12__.DatePresetsComponent, _popovers_detailmenu_detailmenu_component__WEBPACK_IMPORTED_MODULE_9__.DetailMenuComponent, _popovers_peopledetail_peopledetail_component__WEBPACK_IMPORTED_MODULE_13__.PeopleDetailComponent],
        entryComponents: [_popovers_datepresets_datepresets_component__WEBPACK_IMPORTED_MODULE_12__.DatePresetsComponent, _popovers_detailmenu_detailmenu_component__WEBPACK_IMPORTED_MODULE_9__.DetailMenuComponent, _popovers_peopledetail_peopledetail_component__WEBPACK_IMPORTED_MODULE_13__.PeopleDetailComponent],
        imports: [
            _angular_fire_compat__WEBPACK_IMPORTED_MODULE_35__.AngularFireModule.initializeApp(_environments_environment__WEBPACK_IMPORTED_MODULE_1__.environment.firebase),
            _angular_fire_compat_auth__WEBPACK_IMPORTED_MODULE_36__.AngularFireAuthModule,
            _angular_fire_compat_database__WEBPACK_IMPORTED_MODULE_37__.AngularFireDatabaseModule,
            _angular_fire_compat_storage__WEBPACK_IMPORTED_MODULE_38__.AngularFireStorageModule,
            _angular_fire_compat_messaging__WEBPACK_IMPORTED_MODULE_39__.AngularFireMessagingModule,
            _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_40__.BrowserAnimationsModule,
            ionic2_calendar__WEBPACK_IMPORTED_MODULE_41__.NgCalendarModule,
            _modals_detail_tsheet_detail_tsheet_add_tsheet_add_module__WEBPACK_IMPORTED_MODULE_2__.TSheetAddPageModule,
            _modals_detail_news_detail_news_add_news_add_module__WEBPACK_IMPORTED_MODULE_5__.NewsAddPageModule,
            _modals_detail_task_add_task_add_module__WEBPACK_IMPORTED_MODULE_3__.TaskAddPageModule,
            _modals_detail_news_detail_news_add_recipients_recipients_module__WEBPACK_IMPORTED_MODULE_6__.RecipientsPageModule,
            _modals_detail_task_add_taskassignee_taskassignee_module__WEBPACK_IMPORTED_MODULE_4__.TaskAssigneePageModule,
            _modals_detail_tsheet_detail_tsheet_breaks_tsheet_breaks_module__WEBPACK_IMPORTED_MODULE_7__.TSheetBreaksPageModule,
            _modals_detail_tsheet_detail_tsheet_history_tsheet_history_module__WEBPACK_IMPORTED_MODULE_8__.TSheetHistoryPageModule,
            _modals_alertschedule_alertschedule_module__WEBPACK_IMPORTED_MODULE_14__.AlertSchedulePageModule,
            _modals_inapp_pushnote_inapp_pushnote_module__WEBPACK_IMPORTED_MODULE_0__.InAppPushNoteModalModule,
            _modals_profilecsselect_profilecsselect_module__WEBPACK_IMPORTED_MODULE_15__.ProfileCSSelectPageModule,
            _modals_detail_tsheet_detail_tsheet_detail_module__WEBPACK_IMPORTED_MODULE_10__.TSheetDetailPageModule,
            _modals_detail_news_detail_news_detail_module__WEBPACK_IMPORTED_MODULE_11__.NewsDetailPageModule,
            _modals_firstrun_firstrun_module__WEBPACK_IMPORTED_MODULE_17__.FirstRunPageModule,
            _modals_daterange_daterange_module__WEBPACK_IMPORTED_MODULE_16__.DateRangePageModule,
            _angular_platform_browser__WEBPACK_IMPORTED_MODULE_42__.BrowserModule,
            _angular_common__WEBPACK_IMPORTED_MODULE_43__.CommonModule,
            _ionic_angular__WEBPACK_IMPORTED_MODULE_44__.IonicModule.forRoot({ navAnimation: _animations__WEBPACK_IMPORTED_MODULE_18__.fancyAnimation, scrollPadding: false, scrollAssist: true }),
            _app_routing_module__WEBPACK_IMPORTED_MODULE_19__.AppRoutingModule,
            ngx_logger__WEBPACK_IMPORTED_MODULE_45__.LoggerModule.forRoot(_environments_environment__WEBPACK_IMPORTED_MODULE_1__.environment.logging),
            _angular_common__WEBPACK_IMPORTED_MODULE_43__.CommonModule,
            swiper_angular__WEBPACK_IMPORTED_MODULE_46__.SwiperModule,
            _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_40__.BrowserAnimationsModule
        ],
        providers: [
            _services_sqlite_service__WEBPACK_IMPORTED_MODULE_30__.SQLiteService,
            _services_detail_service__WEBPACK_IMPORTED_MODULE_31__.DetailService,
            _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_23__.HTTP,
            _ionic_angular__WEBPACK_IMPORTED_MODULE_44__.NavParams,
            _ionic_native_file_chooser_ngx__WEBPACK_IMPORTED_MODULE_29__.FileChooser,
            ngx_logger__WEBPACK_IMPORTED_MODULE_45__.NGXLogger,
            _ionic_native_file_ngx__WEBPACK_IMPORTED_MODULE_26__.File, _ionic_native_file_transfer_ngx__WEBPACK_IMPORTED_MODULE_28__.FileTransfer, _ionic_native_file_path_ngx__WEBPACK_IMPORTED_MODULE_27__.FilePath,
            _ionic_native_in_app_browser_ngx__WEBPACK_IMPORTED_MODULE_24__.InAppBrowser, _ionic_angular__WEBPACK_IMPORTED_MODULE_44__.Platform, _ionic_angular__WEBPACK_IMPORTED_MODULE_44__.AlertController,
            _ionic_native_calendar_ngx__WEBPACK_IMPORTED_MODULE_25__.Calendar,
            _ionic_native_status_bar_ngx__WEBPACK_IMPORTED_MODULE_22__.StatusBar, _ionic_native_splash_screen_ngx__WEBPACK_IMPORTED_MODULE_21__.SplashScreen,
            { provide: _angular_router__WEBPACK_IMPORTED_MODULE_47__.RouteReuseStrategy, useClass: _ionic_angular__WEBPACK_IMPORTED_MODULE_44__.IonicRouteStrategy },
            _ionic_native_date_picker_ngx__WEBPACK_IMPORTED_MODULE_32__.DatePicker
        ],
        bootstrap: [_app_component__WEBPACK_IMPORTED_MODULE_20__.AppComponent],
        exports: [_angular_common__WEBPACK_IMPORTED_MODULE_43__.CommonModule]
    })
], AppModule);



/***/ }),

/***/ 3870:
/*!************************************!*\
  !*** ./src/app/auth/auth.guard.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AuthGuard": function() { return /* binding */ AuthGuard; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _services_deputy_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../services/deputy.service */ 22092);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/operators */ 15257);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ 88002);





let AuthGuard = class AuthGuard {
    constructor(navController, deputy) {
        this.navController = navController;
        this.deputy = deputy;
    }
    ////////////////////////////////////////////////////////////////////////////////////////////
    canLoad() {
        return this.deputy.isAuthenticated.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_1__.take)(1), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_2__.map)(isAuthenticated => { if (isAuthenticated) {
            return true;
        }
        else {
            this.navController.navigateRoot('/auth');
            return false;
        } }));
    }
};
AuthGuard.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__.NavController },
    { type: _services_deputy_service__WEBPACK_IMPORTED_MODULE_0__.DeputyService }
];
AuthGuard = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_5__.Injectable)({ providedIn: 'root' })
    ////////////////////////////////////////////////////////////////////////////////////////////
], AuthGuard);



/***/ }),

/***/ 88987:
/*!**************************************************************!*\
  !*** ./src/app/modals/alertschedule/alertschedule.module.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AlertSchedulePageModule": function() { return /* binding */ AlertSchedulePageModule; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common/http */ 91841);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser */ 39075);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ 38583);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ 3679);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var _alertschedule_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./alertschedule.page */ 20060);








let AlertSchedulePageModule = class AlertSchedulePageModule {
};
AlertSchedulePageModule = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule)({
        imports: [
            _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__.BrowserModule,
            _angular_common__WEBPACK_IMPORTED_MODULE_4__.CommonModule,
            _angular_forms__WEBPACK_IMPORTED_MODULE_5__.FormsModule,
            _ionic_angular__WEBPACK_IMPORTED_MODULE_6__.IonicModule,
            _angular_common_http__WEBPACK_IMPORTED_MODULE_7__.HttpClientModule
        ],
        declarations: [_alertschedule_page__WEBPACK_IMPORTED_MODULE_0__.AlertSchedulePage]
    })
], AlertSchedulePageModule);



/***/ }),

/***/ 20060:
/*!************************************************************!*\
  !*** ./src/app/modals/alertschedule/alertschedule.page.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AlertSchedulePage": function() { return /* binding */ AlertSchedulePage; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _raw_loader_alertschedule_page_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !raw-loader!./alertschedule.page.html */ 29511);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var src_app_services_datetime_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/app/services/datetime.service */ 12826);
/* harmony import */ var src_app_services_notifications_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/notifications.service */ 79744);
/* harmony import */ var src_app_services_events_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/events.service */ 80106);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! jquery */ 91704);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_4__);









////////////////////////////////////////////////////////////////////////////////////////////////////
let AlertSchedulePage = class AlertSchedulePage {
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    constructor(logger, modalCtrl, navParams, dT, noteServ, evServ, plt) {
        this.logger = logger;
        this.modalCtrl = modalCtrl;
        this.navParams = navParams;
        this.dT = dT;
        this.noteServ = noteServ;
        this.evServ = evServ;
        this.plt = plt;
        this.rawAlertList = [];
        this.alertsList = [];
        this.noAlerts = null;
        this.tMode = false;
        this.hasTestable = false;
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    ngOnInit() {
        this.logger.info('[Modal|AlertSchedule|ngOnInit] ()...');
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    ionViewDidEnter() {
        this.plt.ready().then(() => (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            let rawListForSort = [];
            const modalEl = yield this.modalCtrl.getTop();
            this.modalId = modalEl.id;
            this.rawAlertList = [];
            this.alertsList = [];
            this.rawAlertList = this.navParams.get('rawAlertList');
            let testableCount = 0;
            if (this.rawAlertList.length > 0) {
                this.logger.info('[Modal|AlertSchedule] [' + this.rawAlertList.length + '] Alerts Found...');
                for (let i = 0; i < this.rawAlertList.length; i++) {
                    const rawAlertOb = this.rawAlertList[i];
                    let niceAlertOb = rawAlertOb;
                    niceAlertOb['eventatNiceDate'] = this.dT.format(rawAlertOb.eventat, 'dd/MM/yy');
                    niceAlertOb['eventatNiceTime'] = this.dT.format(rawAlertOb.eventat, 'h:mmaaa');
                    niceAlertOb['alertatNiceDate'] = this.dT.format(rawAlertOb.alertat, 'dd/MM/yy');
                    niceAlertOb['alertatNiceTime'] = this.dT.format(rawAlertOb.alertat, 'h:mmaaa');
                    if (rawAlertOb.methods.phone) {
                        this.hasTestable = true;
                    }
                    ;
                    rawListForSort.push(niceAlertOb);
                }
                ;
                //const sortByEvDate=(a:any,b:any)=>{if(a.evD<b.evD){return -1};if(a.evD>b.evD){return 1};return 0};
                this.alertsList = rawListForSort; //.sort(sortByEvDate);
                this.noAlerts = false;
            }
            else {
                this.logger.info('[Modal|AlertSchedule] rawAlertList = NIL Length.');
                this.noAlerts = true;
            }
            ;
        }));
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    deleteAlert(deleteId) {
        this.logger.info('[Modal|AlertsSchedule|deleteNote] (' + deleteId + ')...');
        this.evServ.subscribe('delDone', delRes => { this.logger.info('[Modal|AlertsSchedule|deleteNote] (EVENT): Result: ' + delRes); this.evServ.destroy('delDone'); if (delRes) {
            const lessDelObj = this.alertsList.filter(a => a.id !== deleteId);
            this.alertsList = lessDelObj;
            if (this.alertsList.length === 0) {
                this.noAlerts = true;
            }
            else {
                this.noAlerts = false;
            }
        } });
        setTimeout(() => { this.noteServ.noteCancel(deleteId); }, 500);
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    testNote(testId) {
        this.logger.info('[Modal|AlertSchedule|testNote] (' + testId + ')...');
        let schedOK = false;
        let schedTId;
        this.evServ.subscribe('testRes', tR => {
            console.log(tR);
            if (tR.stage === 'sched') {
                schedOK = true;
                const tN = tR.data;
                schedTId = tN.id;
                this.evServ.showToast('warning', 'Test Note (#' + tN.id + ') in 5s...');
                let tNObj = { type: tN.extra.type, uctype: tN.extra.uctype, id: tN.id, eventat: tN.extra.evdate, alertat: tN.schedule.at, methods: { phone: true } };
                const niceEvAt = this.dT.pISO(tNObj.eventat);
                tNObj['isTest'] = true;
                tNObj['eventatNiceDate'] = this.dT.format(niceEvAt, 'dd/MM/yy');
                tNObj['eventatNiceTime'] = this.dT.format(niceEvAt, 'h:mmaaa');
                tNObj['alertatNiceDate'] = 'Test Alert';
                tNObj['alertatNiceTime'] = 'Now + 5s';
                this.alertsList.push(tNObj);
            }
            else if (tR.stage === 'gottest') {
                setTimeout(() => {
                    this.evServ.destroy('testRes');
                    this.evServ.showToast('success', 'Test Note (#' + schedTId + ') RECEIVED OK');
                    const lessDelObj = this.alertsList.filter(a => a.id !== schedTId);
                    this.alertsList = lessDelObj;
                    if (this.alertsList.length === 0) {
                        this.noAlerts = true;
                    }
                    else {
                        this.noAlerts = false;
                    }
                    ;
                    jquery__WEBPACK_IMPORTED_MODULE_4__('.sheriff-btn.settings-alertschedule-testmode-btn.deactivate').click();
                }, 500);
            }
            else {
                this.evServ.destroy('testRes');
                if (schedOK) {
                    this.evServ.showToast('error', 'Failed to Receive Test Alert');
                    this.alertsList.filter(n => n.id !== schedTId);
                }
                else {
                    this.evServ.showToast('error', 'Failed to Schedule Test Alert');
                }
                ;
            }
        });
        this.noteServ.testNote(testId);
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    closeModal() {
        this.logger.info('[Modal|AlertSchedule|closeModal] ()...');
        if (this.tMode) {
            this.tMode = false;
            setTimeout(() => { this.modalCtrl.dismiss(null, 'dismiss', 'alert-schedule-modal'); }, 500);
        }
        else {
            this.modalCtrl.dismiss(null, 'dismiss', 'alert-schedule-modal');
        }
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    testMode() {
        this.logger.info('[Modal|AlertSchedule|testMode] ()...');
        !this.tMode ? this.tMode = true : this.tMode = false;
    }
};
AlertSchedulePage.ctorParameters = () => [
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_6__.NGXLogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_7__.ModalController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_7__.NavParams },
    { type: src_app_services_datetime_service__WEBPACK_IMPORTED_MODULE_1__.DateTimeService },
    { type: src_app_services_notifications_service__WEBPACK_IMPORTED_MODULE_2__.NotificationsService },
    { type: src_app_services_events_service__WEBPACK_IMPORTED_MODULE_3__.EventsService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_7__.Platform }
];
AlertSchedulePage = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_8__.Component)({ selector: 'app-alertschedule', template: _raw_loader_alertschedule_page_html__WEBPACK_IMPORTED_MODULE_0__.default })
    ////////////////////////////////////////////////////////////////////////////////////////////////////
], AlertSchedulePage);



/***/ }),

/***/ 71369:
/*!******************************************************!*\
  !*** ./src/app/modals/daterange/daterange.module.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DateRangePageModule": function() { return /* binding */ DateRangePageModule; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common/http */ 91841);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser */ 39075);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ 38583);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ 3679);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var _daterange_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./daterange.page */ 34476);








let DateRangePageModule = class DateRangePageModule {
};
DateRangePageModule = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule)({
        imports: [
            _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__.BrowserModule,
            _angular_common__WEBPACK_IMPORTED_MODULE_4__.CommonModule,
            _angular_forms__WEBPACK_IMPORTED_MODULE_5__.FormsModule,
            _ionic_angular__WEBPACK_IMPORTED_MODULE_6__.IonicModule,
            _angular_common_http__WEBPACK_IMPORTED_MODULE_7__.HttpClientModule
        ],
        declarations: [
            _daterange_page__WEBPACK_IMPORTED_MODULE_0__.DateRangePage
        ]
    })
], DateRangePageModule);



/***/ }),

/***/ 34476:
/*!****************************************************!*\
  !*** ./src/app/modals/daterange/daterange.page.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DateRangePage": function() { return /* binding */ DateRangePage; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _raw_loader_daterange_page_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !raw-loader!./daterange.page.html */ 95375);
/* harmony import */ var _daterange_page_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./daterange.page.scss */ 60372);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var _services_datetime_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../services/datetime.service */ 12826);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jquery */ 91704);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_3__);








//////////////////////////////////////////////////////////////////////////////////////
let DateRangePage = class DateRangePage {
    //////////////////////////////////////////////////////////////////////////////////////
    constructor(logger, dT, modalCtrl, navP) {
        this.logger = logger;
        this.dT = dT;
        this.modalCtrl = modalCtrl;
        this.navP = navP;
        this.sDIsToday = false;
        this.eDIsToday = false;
        this.drIsValid = true;
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ngOnInit() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|OnInit] - ' + this.navP.data.list);
            this.modalId = (yield this.modalCtrl.getTop()).id;
            console.log(this.navP.data);
            const { list, dates, mms } = this.navP.data;
            this.listName = list;
            this.sDate = this.dT.Id(dates.start);
            this.exSDate = dates.start;
            this.checkValidToday('start', this.exSDate);
            this.eDate = this.dT.Id(dates.end);
            this.exEDate = dates.end;
            this.checkValidToday('end', this.exEDate);
            let rawDur = this.dT.DifDurStr(this.exEDate, this.exSDate);
            if (rawDur.includes('year')) {
                rawDur.replace(' year', 'y');
                rawDur.replace(' month', 'm');
                rawDur.replace(' day', 'd');
            }
            this.rangeDur = rawDur;
            this.minDate = mms.min;
            this.exMinDate = this.dT.Dut(mms.min);
            this.maxDate = mms.max;
            this.exMaxDate = this.dT.Dut(mms.max);
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    checkValidToday(startOrEnd, testDate) {
        console.log('Checking ' + startOrEnd + ' ... ' + testDate);
        let todayIndic;
        startOrEnd === 'start' ? todayIndic = 'sDIsToday' : todayIndic = 'eDIsToday';
        if (this.dT.isSD(testDate, new Date())) {
            this[todayIndic] = true;
        }
        else {
            this[todayIndic] = false;
        }
        ;
        let valSDate;
        let valEDate;
        if (startOrEnd === 'start') {
            valSDate = testDate;
            valEDate = this.dT.Di(this.eDate);
        }
        else {
            valEDate = testDate;
            valSDate = this.dT.Di(this.sDate);
        }
        ;
        if (this.dT.isSD(valSDate, valEDate)) {
            jquery__WEBPACK_IMPORTED_MODULE_3__('.dr-modal-button.done').prop('disabled', false);
            this.drIsValid = true;
            this.rangeError = '';
        }
        else {
            if (startOrEnd === 'start') {
                if (!this.dT.isB(valSDate, valEDate)) {
                    jquery__WEBPACK_IMPORTED_MODULE_3__('.dr-modal-button.done').prop('disabled', true);
                    this.drIsValid = false;
                    this.rangeError = 'Start Date > End Date';
                }
                else {
                    jquery__WEBPACK_IMPORTED_MODULE_3__('.dr-modal-button.done').prop('disabled', false);
                    this.drIsValid = true;
                    this.rangeError = '';
                }
            }
            else {
                if (!this.dT.isA(valEDate, valSDate)) {
                    jquery__WEBPACK_IMPORTED_MODULE_3__('.dr-modal-button.done').prop('disabled', true);
                    this.drIsValid = false;
                    this.rangeError = 'End Date < Start Date';
                }
                else {
                    jquery__WEBPACK_IMPORTED_MODULE_3__('.dr-modal-button.done').prop('disabled', false);
                    this.drIsValid = true;
                    this.rangeError = '';
                }
            }
        }
    }
    //////////////////////////////////////////////////////////////////////////////////////
    openDateRange(startOrEnd, action, gVarInputName, gVarDateName, gVarDateValue) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|updateRange] (' + startOrEnd + ',' + action + ',' + gVarInputName + ',' + gVarDateName + ',' + gVarDateValue + ')...');
            this.dT.openDRPicker(this.listName, startOrEnd, this.dT.Di(gVarDateValue), (this.minDate * 1000), Number(this.dT.UTSd(new Date()))).then(newD => {
                this[gVarDateName] = this.dT.Id(newD);
                this.checkValidToday(startOrEnd, newD);
                let rawDur = this.dT.DifDurStr((this.dT.Di(this.eDate)), (this.dT.Di(this.sDate)));
                if (rawDur.includes('year')) {
                    console.log('includes "year" true');
                    rawDur = rawDur.replace(' year', 'y');
                    rawDur = rawDur.replace(' month', 'm');
                    rawDur = rawDur.replace(' day', 'd');
                    this.rangeDur = rawDur;
                }
                else {
                    this.rangeDur = rawDur;
                }
            }, dpErr => { console.log(dpErr); });
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    cancelDateRange() {
        this.logger.info('[TabsTSheets|cancelDateRange] ()...');
        this.modalCtrl.dismiss({ start: null, end: null }, 'backdrop', this.modalId);
    }
    //////////////////////////////////////////////////////////////////////////////////////
    drModalAction(action) {
        this.logger.info('[Modal|drModalAction] (' + action + ')...');
        if (action === 'cancel') {
            this.modalCtrl.dismiss({ start: null, end: null }, null, this.modalId);
        }
        else if (action === 'done') {
            if (!this.sDate || !this.eDate) {
                this.modalCtrl.dismiss('nochange');
            }
            else {
                const newSDate = this.dT.Di(this.sDate);
                const newEDate = this.dT.Di(this.eDate);
                if (newSDate === this.exSDate && newEDate === this.exEDate) {
                    this.modalCtrl.dismiss('nochange');
                }
                else {
                    this.modalCtrl.dismiss({ start: newSDate, end: newEDate }, null, this.modalId);
                }
            }
        }
    }
    ////////////////////////////////////////////////////////////////////////////////////////
    useTodayDate(input) {
        this.logger.info('[TabsTSheets|useTodayDate] (' + input + ')...');
        let checkStr;
        input.charAt(0) === 's' ? checkStr = 'start' : checkStr = 'end';
        this[input] = this.dT.Id(new Date());
        this.checkValidToday(checkStr, new Date());
    }
};
DateRangePage.ctorParameters = () => [
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_5__.NGXLogger },
    { type: _services_datetime_service__WEBPACK_IMPORTED_MODULE_2__.DateTimeService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_6__.ModalController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_6__.NavParams }
];
DateRangePage.propDecorators = {
    sDateIn: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.ViewChild, args: ['drStart',] }],
    eDateIn: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_7__.ViewChild, args: ['drEnd',] }]
};
DateRangePage = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.Component)({ selector: 'app-daterange', template: _raw_loader_daterange_page_html__WEBPACK_IMPORTED_MODULE_0__.default, styles: [_daterange_page_scss__WEBPACK_IMPORTED_MODULE_1__.default] })
    //////////////////////////////////////////////////////////////////////////////////////
], DateRangePage);



/***/ }),

/***/ 48990:
/*!***********************************************************************!*\
  !*** ./src/app/modals/detail/news-detail/news-add/news-add.module.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NewsAddPageModule": function() { return /* binding */ NewsAddPageModule; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common/http */ 91841);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser */ 39075);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ 38583);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ 3679);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var _news_add_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./news-add.page */ 97124);








let NewsAddPageModule = class NewsAddPageModule {
};
NewsAddPageModule = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule)({
        imports: [
            _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__.BrowserModule,
            _angular_common__WEBPACK_IMPORTED_MODULE_4__.CommonModule,
            _angular_forms__WEBPACK_IMPORTED_MODULE_5__.FormsModule,
            _ionic_angular__WEBPACK_IMPORTED_MODULE_6__.IonicModule,
            _angular_common_http__WEBPACK_IMPORTED_MODULE_7__.HttpClientModule
        ],
        declarations: [_news_add_page__WEBPACK_IMPORTED_MODULE_0__.NewsAddPage]
    })
], NewsAddPageModule);



/***/ }),

/***/ 97124:
/*!*********************************************************************!*\
  !*** ./src/app/modals/detail/news-detail/news-add/news-add.page.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NewsAddPage": function() { return /* binding */ NewsAddPage; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _raw_loader_news_add_page_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !raw-loader!./news-add.page.html */ 14010);
/* harmony import */ var _news_add_page_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./news-add.page.scss */ 34259);
/* harmony import */ var _services_events_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/events.service */ 80106);
/* harmony import */ var _services_deputy_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/deputy.service */ 22092);
/* harmony import */ var src_app_services_filesystem_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/services/filesystem.service */ 22904);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _recipients_recipients_page__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./recipients/recipients.page */ 73731);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var _capacitor_dialog__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @capacitor/dialog */ 63540);
/* harmony import */ var _capacitor_keyboard__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @capacitor/keyboard */ 87730);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! jquery */ 91704);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_8__);













//////////////////////////////////////////////////////////////////////////////////////
let NewsAddPage = class NewsAddPage {
    //////////////////////////////////////////////////////////////////////////////////////
    constructor(logger, modalCtrl, navP, plt, deputy, evServ, fileServ) {
        this.logger = logger;
        this.modalCtrl = modalCtrl;
        this.navP = navP;
        this.plt = plt;
        this.deputy = deputy;
        this.evServ = evServ;
        this.fileServ = fileServ;
        this.addRecModalOpts = { animated: false, showBackdrop: true, backdropDismiss: false, cssClass: 'memo-recipients-modal-class', component: _recipients_recipients_page__WEBPACK_IMPORTED_MODULE_5__.RecipientsPage, keyboardClose: true };
        this.addRecModalOpen = false;
        this.meAvatar = this.navP.data.meAva;
        this.meObj = this.navP.data.me;
        this.myObj = this.navP.data.my;
        this.workColor = this.navP.data.work.color;
        this.workName = this.navP.data.work.code;
        this.incBright = this.navP.data.work.bright;
        this.myPpl = this.navP.data.ppl;
        // Memo Box
        this.mbIgnore = false;
        this.mbStatus = { type: null, ico: null, name: null, text: '' };
        this.mbCount = 0;
        this.mbFocus = false;
        // Recipient List
        this.recList = [];
        this.recListReady = false;
        this.recShowHead = [];
        // Memo Contents
        this.memoTitle = null;
        this.memoContentReady = false;
        this.memoFiles = [];
        this.memoUrls = [];
        this.memoReqConf = false;
        this.isNegH = false;
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ngOnInit() {
        this.logger.info('[Modal|News-Add|OnInit]');
        this.initPrefs();
    }
    //////////////////////////////////////////////////////////////////////////////////////
    adjustKB(kbE, kbHeight) {
        this.logger.info('[Modal|News-Add|adjustKB] (' + kbE + ',' + kbHeight + ')...');
        if (kbE === 'show') {
            const kbTop = this.scH - kbHeight;
            const mbDiv = this.newMemoBoxWrap.nativeElement.getBoundingClientRect();
            const mbBot = mbDiv.bottom;
            const diffH = kbTop - mbBot - 25;
            const mSD = Math.sign(diffH);
            if (mSD === 1) {
                this.logger.info('[Modal|News-Add|adjustKB] (Positive Adjust) @ ' + diffH + 'px');
                this.isNegH = false;
                const fitH = (mbDiv.height + diffH).toString() + 'px';
                this.newMemoBoxWrap.nativeElement.style.height = fitH;
            }
            else if (mSD === -1) {
                this.logger.info('[Modal|News-Add|adjustKB] (Negative Adjust) @ ' + diffH + 'px');
                this.isNegH = true;
                this.negH = diffH + 'px';
                this.newMemoBoxWrap.nativeElement.style.height = 'auto';
            }
            else {
                this.logger.info('[Modal|News-Add|adjustKB] (No Adjust) @ ' + diffH + 'px');
                this.isNegH = false;
                this.newMemoBoxWrap.nativeElement.style.height = 'auto';
            }
        }
        else if (kbE === 'hide') {
            this.isNegH = false;
            this.newMemoBoxWrap.nativeElement.style.height = 'auto';
        }
    }
    //////////////////////////////////////////////////////////////////////////////////////
    initPrefs() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|News-Add|initPrefs]');
            this.plt.ready().then(() => (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
                const modalEl = yield this.modalCtrl.getTop();
                this.modalId = modalEl.id;
                this.meEmpId = this.meObj.EmployeeId;
                for (let i = 0; i < this.myPpl.length; i++) {
                    const p = this.myPpl[i];
                    if (p.EmpId !== this.meEmpId) {
                        this.recList.push({ id: p.EmpId, name: p.FirstName, ava: p.Photo, isChecked: false });
                    }
                }
                ;
                this.recShowHead = [];
                this.recListReady = this.checkRecListReady();
            }));
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ionViewDidEnter() {
        this.logger.info('[Modal|News-Add|ionViewDidEnter]');
        this.scH = this.plt.height();
        _capacitor_keyboard__WEBPACK_IMPORTED_MODULE_7__.Keyboard.removeAllListeners();
        _capacitor_keyboard__WEBPACK_IMPORTED_MODULE_7__.Keyboard.addListener('keyboardDidShow', info => {
            jquery__WEBPACK_IMPORTED_MODULE_8__('.news-addmemo-typedata-grid').css('display', 'block');
            const lKBH = info.keyboardHeight;
            this.adjustKB('show', lKBH);
        });
        _capacitor_keyboard__WEBPACK_IMPORTED_MODULE_7__.Keyboard.addListener('keyboardDidHide', () => {
            jquery__WEBPACK_IMPORTED_MODULE_8__('.news-addmemo-typedata-grid').css('display', 'none');
            this.adjustKB('hide', null);
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ionViewWillLeave() {
        this.logger.info('[Modal|News-Add|ionViewWillLeave] ()...');
        _capacitor_keyboard__WEBPACK_IMPORTED_MODULE_7__.Keyboard.removeAllListeners();
    }
    //////////////////////////////////////////////////////////////////////////////////////
    memoBoxEvent(ev, val) {
        this.logger.info('[Modal|News-Add|memoBoxInput] (' + ev + ',' + val + ')...');
        if (!this.mbIgnore) {
            const cbS = {
                n: { type: null, ico: null, name: null, text: '' },
                f: { type: 'icon', ico: 'forward', name: 'chevron-forward', text: 'Typing Memo...' },
                b: { type: 'icon', ico: 'back', name: 'backspace', text: 'Editing Memo...' },
                w: { type: 'icon', ico: 'wait', name: 'ellipsis-horizontal', text: 'Waiting...' },
                c: { type: 'icon', ico: 'clear', name: 'trash', text: 'Content Cleared.' },
                s: { type: 'icon', ico: 'sent', name: 'checkmark', text: 'Memo Posted!' },
                sp: { type: 'spinner', ico: 'spin', name: 'dots', text: 'Posting Memo - Please Wait...' }
            };
            if (ev === 'focus') {
                this.logger.info('[Modal|News-Add|memoBoxEvent] (FOCUS)...');
                this.mbFocus = true;
                this.mbStatus = cbS.w;
                if (this.mbCount !== val.length) {
                    this.mbCount = val.length;
                }
            }
            ;
            val.length > 0 ? this.memoContentReady = true : this.memoContentReady = false;
            if (ev === 'blur') {
                this.logger.info('[Modal|News-Add|memoBoxEvent] (BLUR)...');
                this.mbFocus = false;
                this.mbStatus = cbS.n;
                if (this.mbCount !== val.length) {
                    this.mbCount = val.length;
                }
            }
            ;
            val.length > 0 ? this.memoContentReady = true : this.memoContentReady = false;
            if (ev === 'input') {
                this.logger.info('[Modal|News-Add|memoBoxEvent] (INPUT)...');
                const oldVLen = this.mbCount;
                const newVLen = val.length;
                const vDiff = newVLen - oldVLen;
                const vS = Math.sign(vDiff);
                if (vS === 1) {
                    this.mbStatus = cbS.f;
                    this.mbCount = newVLen;
                }
                else if (vS === -1) {
                    this.mbStatus = cbS.b;
                    this.mbCount = newVLen;
                }
                else {
                    this.mbStatus = cbS.w;
                    this.mbCount = newVLen;
                }
                ;
                val.length > 0 ? this.memoContentReady = true : this.memoContentReady = false;
            }
            if (ev === 'send') {
                this.logger.info('[Modal|News-Add|memoBoxEvent] (SEND/POST)...');
                val.length > 0 ? this.memoContentReady = true : this.memoContentReady = false;
                this.recListReady = this.checkRecListReady();
                this.logger.info('[Post Required Field Check]: (Recipients)=' + this.recListReady + ' | (Memo Content)=' + this.memoContentReady);
                if (this.recListReady && this.memoContentReady) {
                    this.mbIgnore = true;
                    this.mbStatus = cbS.sp;
                    this.newMemoBox.disabled = true;
                    let pMemoObj = { title: null, body: val, file: null, url: null, reqconf: false };
                    if (this.memoTitle !== null) {
                        pMemoObj.title = this.memoTitle;
                    }
                    ;
                    if (this.memoFiles.length > 0) {
                        pMemoObj.file = this.memoFiles[0];
                    }
                    ;
                    if (this.memoUrls.length > 0) {
                        pMemoObj.file = this.memoUrls[0];
                    }
                    ;
                    if (this.memoReqConf) {
                        pMemoObj.reqconf = true;
                    }
                    ;
                    let testMode = true;
                    //API LOGIC HERE...
                    //showFrom:Date|null,active:boolean|null,showTill:Date|null,title:string|null,content:string,fileId:number|null,url:string|null,reqConfirm:boolean
                    if (!testMode) {
                        const postMemoRes = this.deputy.postMemo(null, true, null, pMemoObj.title, pMemoObj.body, pMemoObj.file, pMemoObj.url, pMemoObj.reqconf);
                        this.logger.info('[Modal|Add-News|memoBoxInput] (Post Memo) [API]...');
                        console.log(postMemoRes);
                    }
                    else {
                        setTimeout(() => {
                            this.evServ.showToast('success', 'Memo Posted Successfully');
                            this.newMemoBox.value = '';
                            this.mbStatus = cbS.s;
                            this.newMemoBox.disabled = false;
                            this.mbIgnore = false;
                            setTimeout(() => { this.mbStatus = cbS.n; }, 1500);
                        }, 3000);
                    }
                }
                else {
                    let missingStr;
                    let missingAni = '';
                    if (!this.recListReady && !this.memoContentReady) {
                        missingStr = 'Recipients & Memo Content';
                        missingAni = 'b';
                    }
                    else if (!this.recListReady && this.memoContentReady) {
                        missingStr = 'Recipients';
                        missingAni = 'r';
                    }
                    else {
                        missingStr = 'Memo Content';
                        missingAni = 'm';
                    }
                    ;
                    if (missingAni === 'b') {
                        this.noRecipientsAni();
                        this.noMemoContentAni();
                    }
                    ;
                    if (missingAni === 'r') {
                        this.noRecipientsAni();
                    }
                    ;
                    if (missingAni === 'm') {
                        this.noMemoContentAni();
                    }
                    ;
                    this.evServ.showToast('error', 'Missing: ' + missingStr);
                }
            }
        }
    }
    //////////////////////////////////////////////////////////////////////////////////////
    checkRecListReady() {
        this.logger.info('[Modal|Add-News|checkRecListReady] ()...');
        let isReady;
        this.recShowHead.length > 0 ? isReady = true : isReady = false;
        return isReady;
    }
    //////////////////////////////////////////////////////////////////////////////////////
    noRecipientsAni() {
        this.logger.info('[Modal|Add-News|noRecpientsAni] ()...');
        const doAni = () => new Promise((resolve) => { const aniStr = 'animate__animated animate__rubberBand animDel-1000 animDur-750'; const aniEle = jquery__WEBPACK_IMPORTED_MODULE_8__('.news-addmemo-no-add.recipients'); jquery__WEBPACK_IMPORTED_MODULE_8__(aniEle).on('animationend', () => { jquery__WEBPACK_IMPORTED_MODULE_8__(aniEle).removeClass(aniStr); resolve(true); }); jquery__WEBPACK_IMPORTED_MODULE_8__(aniEle).addClass(aniStr); });
        doAni();
    }
    //////////////////////////////////////////////////////////////////////////////////////
    noMemoContentAni() {
        this.logger.info('[Modal|Add-News|noMemoContentAni] ()...');
        const doAni = () => new Promise((resolve) => { const aniStr = 'animate__animated animate__flash animDel-1750 animDur-750'; const aniEle = jquery__WEBPACK_IMPORTED_MODULE_8__('.news-addmemo-messagebox'); jquery__WEBPACK_IMPORTED_MODULE_8__(aniEle).on('animationend', () => { jquery__WEBPACK_IMPORTED_MODULE_8__(aniEle).removeClass(aniStr); resolve(true); }); jquery__WEBPACK_IMPORTED_MODULE_8__(aniEle).addClass(aniStr); });
        doAni();
    }
    //////////////////////////////////////////////////////////////////////////////////////
    addRecipients() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|News-Add|addRecipients] ()...');
            this.logger.info('[Modal|Add-News|addRecipients] ()...');
            let thisAddRecModalOpts = this.addRecModalOpts;
            const modalORList = this.recList;
            thisAddRecModalOpts['componentProps'] = { mORL: modalORList };
            const addRecModal = yield this.modalCtrl.create(thisAddRecModalOpts);
            document.addEventListener('ionModalDidPresent', () => { this.addRecModalOpen = true; this.logger.info('[Modal|Add-News|addRecipients] (ionModalDidPresent)'); });
            addRecModal.onDidDismiss().then(({ data, role }) => {
                this.logger.info('[Modal|Add-News|addRecipients] (ionModalDidDismiss) >>> (Role): ' + role + ' ...');
                setTimeout(() => {
                    const oArrLen = this.recShowHead.length;
                    const upsert = (item) => { const rI = this.recShowHead.findIndex(_item => _item.id === item.id); if (rI > -1)
                        this.recShowHead[rI] = item;
                    else
                        this.recShowHead.push(item); };
                    if (role === 'all') {
                        this.recShowHead = [];
                        let allArr = [];
                        for (let i = 0; i < this.recList.length; i++) {
                            const rPO = this.recList[i];
                            rPO.isChecked = true;
                            this.recShowHead.push(rPO);
                            allArr.push(rPO);
                        }
                        this.recList = allArr;
                    }
                    else if (role === 'none') {
                        this.recShowHead = [];
                        let noneArr = [];
                        for (let i = 0; i < this.recList.length; i++) {
                            const rPO = this.recList[i];
                            rPO.isChecked = false;
                            noneArr.push(rPO);
                        }
                        this.recList = noneArr;
                    }
                    else if (role === 'update') {
                        this.recList = data;
                        for (let i = 0; i < this.recList.length; i++) {
                            if (this.recList[i].isChecked) {
                                upsert(this.recList[i]);
                            }
                            else {
                                const dI = this.recShowHead.findIndex(p => p.id === this.recList[i].id);
                                if (dI !== -1) {
                                    this.recShowHead.splice(dI, 1);
                                }
                            }
                        }
                        ;
                        const nArrLen = this.recShowHead.length;
                        this.recListReady = this.checkRecListReady();
                        if (oArrLen === nArrLen) {
                            this.evServ.showToast('warning', 'No Change to List');
                        }
                        else {
                            this.evServ.showToast('success', 'Recipient List Updated');
                        }
                    }
                    else if (role === 'cancel') {
                        this.evServ.showToast('cross', 'Cancelled');
                    }
                }, 500);
            });
            return yield addRecModal.present();
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    removeRP(rpIndex) {
        this.logger.info('[Modal|News-Add|removeRP] (' + rpIndex + ')');
        const sHId = this.recShowHead[rpIndex].id;
        this.recShowHead = this.recShowHead.filter(p => p.id !== sHId);
        for (let i = 0; i < this.recList.length; i++) {
            if (this.recList[i].id === sHId) {
                this.recList[i].isChecked = false;
            }
        }
        this.recListReady = this.checkRecListReady();
    }
    //////////////////////////////////////////////////////////////////////////////////////
    updateMemoTitle(titleTxt) {
        this.logger.info('[Modal|News-Add|updateMemoTitle] (' + titleTxt + ')');
        titleTxt.length > 0 ? this.memoTitle = titleTxt : this.memoTitle = null;
    }
    //////////////////////////////////////////////////////////////////////////////////////
    addFiles() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|News-Add|addFiles] ()...');
            const tFileName = 'File' + (this.memoFiles.length + 1);
            this.memoFiles.push({ name: tFileName, id: '' });
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    removeMemoFile(mfIndex) {
        this.logger.info('[Modal|News-Add|removeMemoFile] (' + mfIndex + ')');
        const newMFList = [];
        for (let i = 0; i < this.memoFiles.length; i++) {
            if (i !== mfIndex) {
                newMFList.push(this.memoFiles[i]);
            }
        }
        ;
        this.memoFiles = newMFList;
    }
    //////////////////////////////////////////////////////////////////////////////////////
    addUrls() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|News-Add|addUrls] ()...');
            const { value, cancelled } = yield _capacitor_dialog__WEBPACK_IMPORTED_MODULE_6__.Dialog.prompt({ title: 'Add URL to Memo', message: 'Enter full URL', okButtonTitle: 'Add URL', cancelButtonTitle: 'Cancel', inputPlaceholder: 'e.g. https://mylink.com/article' });
            if (cancelled) {
                this.logger.info('[Modal|News-Add|addUrls] (CANCELLED)');
                this.evServ.showToast('warning', 'Cancelled');
            }
            else {
                let urlName = 'Link' + (this.memoUrls.length + 1);
                const tUrlStr = JSON.stringify(value);
                this.memoUrls.push({ name: urlName, url: tUrlStr });
                this.logger.info('[Modal|News-Add|addUrls] (ADDED): ' + value);
                this.evServ.showToast('success', 'Added URL to Memo');
            }
            ;
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    removeMemoUrl(muIndex) {
        this.logger.info('[Modal|News-Add|removeMemoUrl] (' + muIndex + ')');
        const newMUList = [];
        for (let i = 0; i < this.memoUrls.length; i++) {
            if (i !== muIndex) {
                newMUList.push(this.memoUrls[i]);
            }
        }
        ;
        this.memoUrls = newMUList;
    }
    //////////////////////////////////////////////////////////////////////////////////////
    reqConfChange() {
        this.logger.info('[Modal|News-Add|reqConfChange] ()...');
        this.memoReqConf ? this.memoReqConf = false : this.memoReqConf = true;
        this.logger.info('[Modal|News-Add|reqConfChange] (REQUIRE CONFIRMATION) [CHANGED TO]: ' + this.memoReqConf);
    }
    //////////////////////////////////////////////////////////////////////////////////////
    closeAddNews() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|News-Add|closeAddNews] ()...');
            this.modalCtrl.dismiss({ data: null, role: null, id: this.modalId });
        });
    }
};
NewsAddPage.ctorParameters = () => [
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_10__.NGXLogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_11__.ModalController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_11__.NavParams },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_11__.Platform },
    { type: _services_deputy_service__WEBPACK_IMPORTED_MODULE_3__.DeputyService },
    { type: _services_events_service__WEBPACK_IMPORTED_MODULE_2__.EventsService },
    { type: src_app_services_filesystem_service__WEBPACK_IMPORTED_MODULE_4__.FileSystemService }
];
NewsAddPage.propDecorators = {
    newMemoBox: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_12__.ViewChild, args: ['newMemoBox',] }],
    newMemoBoxWrap: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_12__.ViewChild, args: ['newMemoBoxWrap',] }],
    newMemoTitle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_12__.ViewChild, args: ['newMemoTitle',] }]
};
NewsAddPage = (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_12__.Component)({ selector: 'app-news-add', template: _raw_loader_news_add_page_html__WEBPACK_IMPORTED_MODULE_0__.default, styles: [_news_add_page_scss__WEBPACK_IMPORTED_MODULE_1__.default] })
    //////////////////////////////////////////////////////////////////////////////////////
], NewsAddPage);



/***/ }),

/***/ 76356:
/*!************************************************************************************!*\
  !*** ./src/app/modals/detail/news-detail/news-add/recipients/recipients.module.ts ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RecipientsPageModule": function() { return /* binding */ RecipientsPageModule; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common/http */ 91841);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser */ 39075);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ 38583);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ 3679);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var _recipients_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./recipients.page */ 73731);








let RecipientsPageModule = class RecipientsPageModule {
};
RecipientsPageModule = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule)({
        imports: [
            _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__.BrowserModule,
            _angular_common__WEBPACK_IMPORTED_MODULE_4__.CommonModule,
            _angular_forms__WEBPACK_IMPORTED_MODULE_5__.FormsModule,
            _ionic_angular__WEBPACK_IMPORTED_MODULE_6__.IonicModule,
            _angular_common_http__WEBPACK_IMPORTED_MODULE_7__.HttpClientModule
        ],
        declarations: [_recipients_page__WEBPACK_IMPORTED_MODULE_0__.RecipientsPage]
    })
], RecipientsPageModule);



/***/ }),

/***/ 73731:
/*!**********************************************************************************!*\
  !*** ./src/app/modals/detail/news-detail/news-add/recipients/recipients.page.ts ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RecipientsPage": function() { return /* binding */ RecipientsPage; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _raw_loader_recipients_page_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !raw-loader!./recipients.page.html */ 82472);
/* harmony import */ var _recipients_page_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./recipients.page.scss */ 39921);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ngx-logger */ 62740);






//////////////////////////////////////////////////////////////////////////////////////
let RecipientsPage = class RecipientsPage {
    //////////////////////////////////////////////////////////////////////////////////////
    constructor(logger, modalCtrl, navP) {
        this.logger = logger;
        this.modalCtrl = modalCtrl;
        this.navP = navP;
        this.modalRecList = [];
        this.modalORecList = [];
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ngOnInit() {
        this.logger.info('[Modal|Recipients|OnInit] ()...');
        this.initRecipientsData();
    }
    //////////////////////////////////////////////////////////////////////////////////////
    initRecipientsData() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|Memo-Recipients|initRecipientsData] ()...');
            const modalEl = yield this.modalCtrl.getTop();
            this.recModalId = modalEl.id;
            const oList = this.navP.get('mORL');
            const rList = oList;
            this.modalORecList = oList;
            this.modalRecList = rList;
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    bulkSelectRec(allNone) {
        this.logger.info('[Modal-Memo-Recipients|bulkSelect] (' + allNone + ')...');
        if (allNone === 'all') {
            this.modalCtrl.dismiss(null, 'all', this.recModalId);
        }
        else {
            this.modalCtrl.dismiss(null, 'none', this.recModalId);
        }
    }
    //////////////////////////////////////////////////////////////////////////////////////
    recChange(rpIndex) {
        this.logger.info('[Modal|Memo-Recipients|recChange] (' + rpIndex + ')...');
        let selStr;
        const oState = this.modalRecList[rpIndex].isChecked;
        oState ? this.modalRecList[rpIndex].isChecked = false : this.modalRecList[rpIndex].isChecked = true;
        const nState = this.modalRecList[rpIndex].isChecked;
        nState ? selStr = 'Selected' : selStr = 'Not Selected';
        this.logger.info('(Change): ' + this.modalRecList[rpIndex].name + ' [CHANGED TO] ' + selStr);
        this.logger.info(this.modalRecList);
    }
    //////////////////////////////////////////////////////////////////////////////////////
    updateCancelList(closeRole) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|Memo-Recipients|updateCancelList] (' + closeRole + ')...');
            if (closeRole === 'update') {
                this.modalCtrl.dismiss(this.modalRecList, 'update', this.recModalId);
            }
            else {
                this.modalCtrl.dismiss(this.modalORecList, 'cancel', this.recModalId);
            }
        });
    }
};
RecipientsPage.ctorParameters = () => [
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_3__.NGXLogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__.ModalController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__.NavParams }
];
RecipientsPage = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_5__.Component)({ selector: 'app-recipients', template: _raw_loader_recipients_page_html__WEBPACK_IMPORTED_MODULE_0__.default, styles: [_recipients_page_scss__WEBPACK_IMPORTED_MODULE_1__.default] })
    //////////////////////////////////////////////////////////////////////////////////////
], RecipientsPage);



/***/ }),

/***/ 43175:
/*!*****************************************************************!*\
  !*** ./src/app/modals/detail/news-detail/news-detail.module.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NewsDetailPageModule": function() { return /* binding */ NewsDetailPageModule; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common/http */ 91841);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser */ 39075);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ 38583);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ 3679);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var _news_detail_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./news-detail.page */ 85800);








let NewsDetailPageModule = class NewsDetailPageModule {
};
NewsDetailPageModule = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule)({
        imports: [
            _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__.BrowserModule,
            _angular_common__WEBPACK_IMPORTED_MODULE_4__.CommonModule,
            _angular_forms__WEBPACK_IMPORTED_MODULE_5__.FormsModule,
            _ionic_angular__WEBPACK_IMPORTED_MODULE_6__.IonicModule,
            _angular_common_http__WEBPACK_IMPORTED_MODULE_7__.HttpClientModule
        ],
        declarations: [_news_detail_page__WEBPACK_IMPORTED_MODULE_0__.NewsDetailPage]
    })
], NewsDetailPageModule);



/***/ }),

/***/ 85800:
/*!***************************************************************!*\
  !*** ./src/app/modals/detail/news-detail/news-detail.page.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NewsDetailPage": function() { return /* binding */ NewsDetailPage; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _raw_loader_news_detail_page_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !raw-loader!./news-detail.page.html */ 61150);
/* harmony import */ var _news_detail_page_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./news-detail.page.scss */ 2388);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _services_datetime_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../../services/datetime.service */ 12826);
/* harmony import */ var _services_events_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../../services/events.service */ 80106);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var src_app_popovers_peopledetail_peopledetail_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/popovers/peopledetail/peopledetail.component */ 2925);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var _capacitor_share__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @capacitor/share */ 16380);
/* harmony import */ var _capacitor_keyboard__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @capacitor/keyboard */ 87730);
/* harmony import */ var _capacitor_dialog__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @capacitor/dialog */ 63540);
/* harmony import */ var _capacitor_app__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @capacitor/app */ 42138);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! jquery */ 91704);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_9__);














//////////////////////////////////////////////////////////////////////////////////////
let NewsDetailPage = class NewsDetailPage {
    //////////////////////////////////////////////////////////////////////////////////////
    constructor(logger, dT, evServ, modalCtrl, popCtrl, navP, plt) {
        this.logger = logger;
        this.dT = dT;
        this.evServ = evServ;
        this.modalCtrl = modalCtrl;
        this.popCtrl = popCtrl;
        this.navP = navP;
        this.plt = plt;
        this.meObj = null;
        this.myObj = null;
        // Memo Vars
        this.memo = null;
        // ChatBox
        this.cbStatus = { type: null, ico: null, name: null, text: '' };
        this.cbCount = 0;
        this.cbIgnore = false;
        // Header Detail Menu
        this.popOpen = false;
        this.kbO = false;
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ngOnInit() {
        this.logger.info('[Modal|Memo-Detail|OnInit]');
        _capacitor_keyboard__WEBPACK_IMPORTED_MODULE_6__.Keyboard.removeAllListeners();
        _capacitor_keyboard__WEBPACK_IMPORTED_MODULE_6__.Keyboard.addListener("keyboardDidShow", info => { this.kbH = info.keyboardHeight.toString() + 'px'; this.kbO = true; });
        _capacitor_keyboard__WEBPACK_IMPORTED_MODULE_6__.Keyboard.addListener("keyboardDidHide", () => { this.kbO = false; });
        this.initMemoDetailData();
    }
    //////////////////////////////////////////////////////////////////////////////////////
    initMemoDetailData() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|Memo-Detail|InitMemoData] ()...');
            this.memo = this.navP.data.memo;
            this.meAvatar = this.navP.data.meAva;
            this.meObj = this.navP.data.me;
            this.myObj = this.navP.data.my;
            this.workColor = this.navP.data.work.color;
            this.workName = this.navP.data.work.code;
            this.incBright = this.navP.data.work.bright;
            this.plt.ready().then(() => { this.formatComments(); });
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    formatComments() {
        this.logger.info('[Modal|News-Detail|formatComments] ()...');
        for (let i = 0; i < this.memo._DPMetaData.Comments.length; i++) {
            let tCO = this.memo._DPMetaData.Comments[i];
            const nCreated = this.dT.format(this.dT.pISO(tCO.Created), 'd MMM yyyy h:mmaaa');
            this.memo._DPMetaData.Comments[i]['Created'] = nCreated;
        }
    }
    //////////////////////////////////////////////////////////////////////////////////////
    chatBoxInput(ev, val) {
        this.logger.info('[Modal|News-Detail|chatBoxInput] (' + ev + ',' + val + ')...');
        if (!this.cbIgnore) {
            const cbS = {
                n: { type: null, ico: null, name: null, text: '' },
                f: { type: 'icon', ico: 'forward', name: 'chevron-forward', text: 'Typing Comment...' },
                b: { type: 'icon', ico: 'back', name: 'backspace', text: 'Editing Comment...' },
                w: { type: 'icon', ico: 'wait', name: 'ellipsis-horizontal', text: 'Waiting...' },
                c: { type: 'icon', ico: 'clear', name: 'trash', text: 'Content Cleared.' },
                s: { type: 'icon', ico: 'sent', name: 'checkmark', text: 'Comment Sent Successfully!' },
                sp: { type: 'spinner', ico: 'spin', name: 'dots', text: 'Sending Comment - Please Wait...' }
            };
            if (ev === 'focus') {
                this.cbStatus = cbS.w;
                if (this.cbCount !== val.length) {
                    this.cbCount = val.length;
                }
            }
            ;
            if (ev === 'blur') {
                this.cbStatus = cbS.n;
                if (this.cbCount !== val.length) {
                    this.cbCount = val.length;
                }
            }
            ;
            if (ev === 'clear') {
                this.cbStatus = cbS.c;
                this.cbCount = 0;
            }
            ;
            if (ev === 'input') {
                const oldVLen = this.cbCount;
                console.log('Old Input Count: ' + oldVLen);
                const newVLen = val.length;
                console.log('New Input Count: ' + newVLen);
                const vDiff = newVLen - oldVLen;
                console.log('vDiff: ' + vDiff);
                const vS = Math.sign(vDiff);
                console.log('vS: ' + vS);
                if (vS === 1) {
                    this.cbStatus = cbS.f;
                    this.cbCount = newVLen;
                    console.log('Do F');
                }
                else if (vS === -1) {
                    this.cbStatus = cbS.b;
                    this.cbCount = newVLen;
                    console.log('Do B');
                }
                else {
                    this.cbStatus = cbS.w;
                    this.cbCount = newVLen;
                    console.log('Do W');
                }
            }
            if (ev === 'send') {
                this.cbIgnore = true;
                this.cbStatus = cbS.sp;
                this.cbInput.disabled = true;
                //API LOGIC HERE...
                setTimeout(() => {
                    this.evServ.showToast('success', 'Comment Posted Successfully');
                    this.cbInput.value = '';
                    this.cbStatus = cbS.s;
                    this.cbInput.disabled = false;
                    this.cbIgnore = false;
                    setTimeout(() => { this.cbStatus = cbS.n; }, 1500);
                }, 3000);
            }
        }
    }
    //////////////////////////////////////////////////////////////////////////////////////
    deleteMemo() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|Memo-Detail|deleteMemo] ()...');
            if (this.memo._DPMetaData.CanDelete) {
                let delConfOpts = { title: 'Confirm Memo Delete', message: 'Deleting a Memo cannot be undone. Are you sure?', okButtonTitle: 'DELETE', cancelButtonTitle: 'CANCEL' };
                const { value } = yield _capacitor_dialog__WEBPACK_IMPORTED_MODULE_7__.Dialog.confirm(delConfOpts);
                if (value) {
                    this.closeDetail('delete');
                }
                else {
                    this.evServ.showToast('cancel', 'Cancelled - Did NOT Delete Memo');
                }
            }
            else {
                this.evServ.showToast('error', 'Permission Error - Not Your Memo');
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    showPeoplePop(event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|News-Detail|showPeoplePop] (event)...');
            let pdPopOpts = { component: src_app_popovers_peopledetail_peopledetail_component__WEBPACK_IMPORTED_MODULE_4__.PeopleDetailComponent, componentProps: { people: [], logs: [], confReqs: null, me: {} }, showBackdrop: false, backdropDismiss: true, cssClass: 'pop-peopledetail', event: event, animated: true, mode: 'md', keyboardClose: true };
            pdPopOpts.componentProps.people = this.memo._DPMetaData.AssignedUsers;
            pdPopOpts.componentProps.logs = this.memo._DPMetaData.MemoLogs;
            pdPopOpts.componentProps.confReq = this.memo._DPMetaData.RequireConfirmation;
            pdPopOpts.componentProps.meConf = this.memo._DPMetaData.RequireMyConfirm ? false : true;
            pdPopOpts.componentProps.me = { ava: this.meAvatar, obj: this.meObj };
            const pdPop = yield this.popCtrl.create(pdPopOpts);
            yield pdPop.present();
            const { role } = yield pdPop.onDidDismiss();
            this.logger.info('[Modal|News-Detail|showPeoplePop] (DISMISSED): With Role: ' + role);
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    confirmMemo() { this.logger.info('[Modal|News-Detail|confirmMemo] ()...'); }
    //////////////////////////////////////////////////////////////////////////////////////
    shareMemo() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|Memo-Detail|shareMemo] ()...');
            jquery__WEBPACK_IMPORTED_MODULE_9__('.sheriff-detail-header-btn-wrapper.share-btn').addClass('detail-sharebtn-active');
            _capacitor_app__WEBPACK_IMPORTED_MODULE_8__.App.addListener('appStateChange', ({ isActive }) => { if (isActive) {
                jquery__WEBPACK_IMPORTED_MODULE_9__('.sheriff-detail-header-btn-wrapper.share-btn').removeClass('detail-sharebtn-active');
            } });
            let exportTxt = 'Timesheet #' + this.memo.Id + ' - ' + this.memo.nDate + ':\n';
            Object.entries(this.memo).forEach(([key, value]) => { const newLine = `${key}: ${value}\n`; exportTxt = exportTxt.concat(newLine); });
            try {
                const shareRes = yield _capacitor_share__WEBPACK_IMPORTED_MODULE_5__.Share.share({ title: 'Export Memo #' + this.memo.Id, text: exportTxt, url: null, dialogTitle: 'Export Memo #' + this.memo.Id });
                this.evServ.showToast('success', 'Shared via ' + shareRes.activityType);
                this.didExport = true;
                this.exportVia = shareRes.activityType;
                this.logger.info('[Modal|Memo-Detail|shareMemo] (Result): ' + shareRes.activityType);
            }
            catch (shareErr) {
                this.evServ.showToast('error', 'Share Failed');
                this.logger.info('[Modal|Memo-Detail|shareTS] (Error): ' + shareErr);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    closeDetail(closeRole) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            let cD;
            if (closeRole === 'delete') {
                cD = this.memo.Id;
            }
            else if (closeRole === 'dismiss') {
                cD = null;
            }
            else {
                cD = null;
            }
            ;
            this.modalCtrl.dismiss({ role: closeRole, data: cD });
        });
    }
};
NewsDetailPage.ctorParameters = () => [
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_11__.NGXLogger },
    { type: _services_datetime_service__WEBPACK_IMPORTED_MODULE_2__.DateTimeService },
    { type: _services_events_service__WEBPACK_IMPORTED_MODULE_3__.EventsService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_12__.ModalController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_12__.PopoverController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_12__.NavParams },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_12__.Platform }
];
NewsDetailPage.propDecorators = {
    cbInput: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__.ViewChild, args: ['cbInput',] }]
};
NewsDetailPage = (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_13__.Component)({ selector: 'app-news-detail', template: _raw_loader_news_detail_page_html__WEBPACK_IMPORTED_MODULE_0__.default, styles: [_news_detail_page_scss__WEBPACK_IMPORTED_MODULE_1__.default] })
    //////////////////////////////////////////////////////////////////////////////////////
], NewsDetailPage);



/***/ }),

/***/ 43357:
/*!***********************************************************!*\
  !*** ./src/app/modals/detail/task-add/task-add.module.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TaskAddPageModule": function() { return /* binding */ TaskAddPageModule; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common/http */ 91841);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser */ 39075);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ 38583);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ 3679);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var _task_add_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./task-add.page */ 81900);








let TaskAddPageModule = class TaskAddPageModule {
};
TaskAddPageModule = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule)({
        imports: [
            _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__.BrowserModule,
            _angular_common__WEBPACK_IMPORTED_MODULE_4__.CommonModule,
            _angular_forms__WEBPACK_IMPORTED_MODULE_5__.FormsModule,
            _ionic_angular__WEBPACK_IMPORTED_MODULE_6__.IonicModule,
            _angular_common_http__WEBPACK_IMPORTED_MODULE_7__.HttpClientModule
        ],
        declarations: [_task_add_page__WEBPACK_IMPORTED_MODULE_0__.TaskAddPage]
    })
], TaskAddPageModule);



/***/ }),

/***/ 81900:
/*!*********************************************************!*\
  !*** ./src/app/modals/detail/task-add/task-add.page.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TaskAddPage": function() { return /* binding */ TaskAddPage; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _raw_loader_task_add_page_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !raw-loader!./task-add.page.html */ 4425);
/* harmony import */ var _task_add_page_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./task-add.page.scss */ 79497);
/* harmony import */ var _services_events_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../../services/events.service */ 80106);
/* harmony import */ var _services_deputy_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/deputy.service */ 22092);
/* harmony import */ var _services_datetime_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../services/datetime.service */ 12826);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _taskassignee_taskassignee_page__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./taskassignee/taskassignee.page */ 58857);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var _capacitor_dialog__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @capacitor/dialog */ 63540);
/* harmony import */ var _capacitor_keyboard__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @capacitor/keyboard */ 87730);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ngx-logger */ 62740);












//////////////////////////////////////////////////////////////////////////////////////
let TaskAddPage = class TaskAddPage {
    //////////////////////////////////////////////////////////////////////////////////////
    constructor(logger, modalCtrl, loadCtrl, navP, plt, dT, deputy, evServ) {
        this.logger = logger;
        this.modalCtrl = modalCtrl;
        this.loadCtrl = loadCtrl;
        this.navP = navP;
        this.plt = plt;
        this.dT = dT;
        this.deputy = deputy;
        this.evServ = evServ;
        this.myEmpId = 0;
        this.pplArr = [];
        this.submitReady = false;
        this.didSubmit = false;
        this.addForm = {
            title: { input: 'atiTitle', required: true, focus: false, valid: null, value: null },
            assign: { required: true, focus: false, valid: null, value: null },
            duedate: { required: false, focus: false, valid: null, value: null, txt: null, ts: null },
            notes: { input: 'atiNotes', required: false, focus: false, valid: null, value: null }
        };
        this.assList = [];
        this.assSelModalOpts = { animated: false, showBackdrop: true, backdropDismiss: false, cssClass: 'memo-recipients-modal-class', component: _taskassignee_taskassignee_page__WEBPACK_IMPORTED_MODULE_5__.TaskAssigneePage, keyboardClose: true };
        this.assSelIsOpen = false;
        this.dateSelIsOpen = false;
        this.dateOD = false;
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ngOnInit() {
        this.logger.info('[Modal|Tasks-Add|OnInit]');
        this.initPrefs();
    }
    //////////////////////////////////////////////////////////////////////////////////////
    initPrefs() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|Tasks-Add|initPrefs] ()...');
            _capacitor_keyboard__WEBPACK_IMPORTED_MODULE_7__.Keyboard.removeAllListeners();
            this.modalNavData = this.navP.data;
            this.meObj = this.modalNavData.me;
            this.myObj = this.modalNavData.my;
            this.meAvatar = this.modalNavData.meAva;
            this.workAvatar = this.modalNavData.workAva;
            this.myEmpId = this.modalNavData.meEmpId;
            this.pplArr = this.modalNavData.ppl;
            this.assList = this.modalNavData.ppl;
            this.myTasksListLen = this.modalNavData.myTListLen;
            this.assTasksListLen = this.modalNavData.assTListLen;
            if (this.myEmpId > 0) {
                const assignMeArr = this.modalNavData.ppl.filter(p => p.EmpId === this.myEmpId);
                if (assignMeArr.length > 0) {
                    this.addForm.assign.value = assignMeArr[0];
                    this.addForm.assign.valid = true;
                }
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ionViewDidEnter() {
        this.logger.info('[Modal|Tasks-Add|ionViewDidEnter]');
        this.plt.ready().then(() => (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () { const modalEl = yield this.modalCtrl.getTop(); this.modalId = modalEl.id; }));
    }
    //////////////////////////////////////////////////////////////////////////////////////
    actionATField(fieldAction, formPtyName, fieldVal) {
        this.logger.info('[TabTasks|actionATField] (' + fieldAction + ',' + formPtyName + ',' + fieldVal + ')...');
        const getPH = () => { if (this.addForm[formPtyName].required) {
            return 'Required';
        }
        else {
            return 'Optional';
        } };
        const allValidCheck = () => { if (this.addForm.title.valid && this.addForm.assign.valid) {
            return true;
        }
        else {
            return false;
        } };
        if (fieldAction === 'blur') {
            this.addForm[formPtyName].focus = false;
            const inputEleStr = this.addForm[formPtyName].input;
            this[inputEleStr].placeholder = getPH();
            fieldVal === '' || fieldVal.length < 1 ? this.addForm[formPtyName].value = null : this.addForm[formPtyName].value = fieldVal;
            if (formPtyName === 'title') {
                if (this.addForm.title.value === null) {
                    this.addForm.title.valid = false;
                }
                else {
                    this.addForm.title.valid = true;
                }
            }
            else {
                this.addForm.notes.valid = true;
            }
            ;
            if (allValidCheck()) {
                this.submitReady = true;
            }
            else {
                this.submitReady = false;
            }
        }
        else {
            this.addForm[formPtyName].focus = true;
            const inputEleStr = this.addForm[formPtyName].input;
            this[inputEleStr].placeholder = '';
            this.addForm[formPtyName].valid = null;
        }
    }
    //////////////////////////////////////////////////////////////////////////////////////
    closeAddTask() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|Task-Add|closeAddTask] ()...');
            if (this.submitReady && !this.didSubmit) {
                const addDiscardTaskOpts = { title: 'Add New Task?', message: 'Add or Discard New Task?', okButtonTitle: 'Add Task', cancelButtonTitle: 'Discard' };
                const { value } = yield _capacitor_dialog__WEBPACK_IMPORTED_MODULE_6__.Dialog.confirm(addDiscardTaskOpts);
                if (value) {
                    this.submitAddTask();
                }
                else {
                    this.modalCtrl.dismiss(null, 'cancel', this.modalId);
                }
            }
            else {
                this.modalCtrl.dismiss(null, 'cancel', this.modalId);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    submitAddTask() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|Task-Add|submitTaskAdd] ()...');
            const submitTaskLoader = yield this.loadCtrl.create({ spinner: 'dots', cssClass: 'sheriff-loader-class', message: 'Adding New Task' });
            yield submitTaskLoader.present();
            if (this.addForm.duedate.value !== null) {
                this.addForm.duedate.ts = this.dT.UTSd(this.addForm.duedate.value);
            }
            ;
            let tSOrder;
            let myAss;
            if (this.addForm.assign.value === this.myEmpId) {
                myAss = 'my';
                tSOrder = this.myTasksListLen + 1;
            }
            else {
                myAss = 'ass';
                tSOrder = this.assTasksListLen + 1;
            }
            ;
            const submitTAPiRes = yield this.deputy.createTask(myAss, this.myEmpId, this.addForm.assign.value.EmpId, this.addForm.title.value, tSOrder, this.addForm.duedate.value, this.addForm.notes.value);
            if (submitTAPiRes.result) {
                submitTaskLoader.dismiss();
                this.modalCtrl.dismiss(submitTAPiRes.data, 'success', this.modalId);
                this.didSubmit = true;
            }
            else {
                submitTaskLoader.dismiss();
                this.didSubmit = false;
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    openDP() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|Task-Add|openDP] ()...');
            this.dateSelIsOpen = true;
            const isDate = (d) => { if (Object.prototype.toString.call(d) === '[object Date]')
                return true; return false; };
            let addUpdate;
            let openDate;
            if (this.addForm.duedate.value === null) {
                openDate = new Date();
                addUpdate = 'Added';
            }
            else {
                openDate = this.addForm.duedate.value;
                addUpdate = 'Updated';
            }
            ;
            this.dT.dpDateOnly(openDate).then(newD => {
                this.dateSelIsOpen = false;
                if (isDate(newD)) {
                    this.addForm.duedate.value = newD;
                    this.addForm.duedate.txt = this.dT.format(newD, 'EEE, d MMM yyyy');
                    this.addForm.duedate.valid = true;
                    if (this.dT.isB(newD, new Date())) {
                        this.dateOD = true;
                    }
                    else {
                        this.dateOD = false;
                    }
                    ;
                    this.logger.info('[Modal|TSheet-Add|DueDatePicker] (Success): Date ' + addUpdate + '.');
                }
                else {
                    this.dateSelIsOpen = false;
                    this.logger.info('[Modal|Task-Add|DueDatePicker] (ERROR): Selection NOT VALID Date Object.');
                }
            }).catch(newDErr => {
                this.dateSelIsOpen = false;
                let errMsg;
                addUpdate === 'Added' ? errMsg = 'No Due Date' : errMsg = 'Using Old Due Date';
                if (newDErr === 'cancel') {
                    this.logger.info('[Modal|Task-Add|DueDatePicker] (Cancelled): User Cancelled');
                }
                else {
                    this.logger.info('[Modal|Task-Add|DueDatePicker] (Error): ' + newDErr);
                }
                ;
            });
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    clearDueDate() {
        this.logger.info('[Modal|Task-Add|clearDueDate] ()...');
        this.addForm.duedate.value = null;
        this.addForm.duedate.txt = null;
        this.addForm.duedate.valid = null;
    }
    //////////////////////////////////////////////////////////////////////////////////////
    openAssignSelect() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|Task-Add|openAssignSelect] ()...');
            let assSelOpts = this.assSelModalOpts;
            const assModalList = this.assList;
            let currentSelEmpId = this.addForm.assign.value.EmpId;
            assSelOpts['componentProps'] = { assList: assModalList };
            const assSelModal = yield this.modalCtrl.create(assSelOpts);
            document.addEventListener('ionModalDidPresent', () => { this.assSelIsOpen = true; this.addForm.title.focus === true; this.logger.info('[Modal|Task-Add|openAssignSelect] (ionModalDidPresent)'); });
            assSelModal.onDidDismiss().then(({ data, role }) => {
                this.assSelIsOpen = false;
                this.logger.info('[Modal|Task-Add|openAssignSelect] (ionModalDidDismiss) >>> (Role): ' + role + ' ...');
                if (role === 'cancel') {
                    this.logger.info('[Modal|Task-Add|openAssignSelect] (CANCELLED) User Cancelled Selection');
                }
                else {
                    const newAssSel = data;
                    if (newAssSel.EmpId === currentSelEmpId) {
                        this.logger.info('[Modal|Task-Add|openAssignSelect] (UNCHANGED) Same Person Selected - Unchanged Assignee');
                    }
                    else {
                        this.addForm.assign.value = newAssSel;
                        this.addForm.assign.valid = true;
                    }
                }
            });
            yield assSelModal.present();
        });
    }
};
TaskAddPage.ctorParameters = () => [
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_9__.NGXLogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_10__.ModalController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_10__.LoadingController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_10__.NavParams },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_10__.Platform },
    { type: _services_datetime_service__WEBPACK_IMPORTED_MODULE_4__.DateTimeService },
    { type: _services_deputy_service__WEBPACK_IMPORTED_MODULE_3__.DeputyService },
    { type: _services_events_service__WEBPACK_IMPORTED_MODULE_2__.EventsService }
];
TaskAddPage.propDecorators = {
    atiTitle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.ViewChild, args: [_ionic_angular__WEBPACK_IMPORTED_MODULE_10__.IonInput, { static: false },] }],
    atiNotes: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.ViewChild, args: [_ionic_angular__WEBPACK_IMPORTED_MODULE_10__.IonTextarea, { static: false },] }]
};
TaskAddPage = (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_11__.Component)({ selector: 'app-task-add', template: _raw_loader_task_add_page_html__WEBPACK_IMPORTED_MODULE_0__.default, styles: [_task_add_page_scss__WEBPACK_IMPORTED_MODULE_1__.default] })
    //////////////////////////////////////////////////////////////////////////////////////
], TaskAddPage);



/***/ }),

/***/ 46361:
/*!****************************************************************************!*\
  !*** ./src/app/modals/detail/task-add/taskassignee/taskassignee.module.ts ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TaskAssigneePageModule": function() { return /* binding */ TaskAssigneePageModule; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common/http */ 91841);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser */ 39075);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ 38583);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ 3679);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var _taskassignee_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./taskassignee.page */ 58857);








let TaskAssigneePageModule = class TaskAssigneePageModule {
};
TaskAssigneePageModule = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule)({
        imports: [
            _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__.BrowserModule,
            _angular_common__WEBPACK_IMPORTED_MODULE_4__.CommonModule,
            _angular_forms__WEBPACK_IMPORTED_MODULE_5__.FormsModule,
            _ionic_angular__WEBPACK_IMPORTED_MODULE_6__.IonicModule,
            _angular_common_http__WEBPACK_IMPORTED_MODULE_7__.HttpClientModule
        ],
        declarations: [_taskassignee_page__WEBPACK_IMPORTED_MODULE_0__.TaskAssigneePage]
    })
], TaskAssigneePageModule);



/***/ }),

/***/ 58857:
/*!**************************************************************************!*\
  !*** ./src/app/modals/detail/task-add/taskassignee/taskassignee.page.ts ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TaskAssigneePage": function() { return /* binding */ TaskAssigneePage; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _raw_loader_taskassignee_page_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !raw-loader!./taskassignee.page.html */ 15295);
/* harmony import */ var _taskassignee_page_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./taskassignee.page.scss */ 27379);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ngx-logger */ 62740);






//////////////////////////////////////////////////////////////////////////////////////
let TaskAssigneePage = class TaskAssigneePage {
    //////////////////////////////////////////////////////////////////////////////////////
    constructor(logger, modalCtrl, navP) {
        this.logger = logger;
        this.modalCtrl = modalCtrl;
        this.navP = navP;
        this.modalAssList = [];
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ngOnInit() {
        this.logger.info('[Modal|TaskAssignee|OnInit] ()...');
        this.initRecipientsData();
    }
    //////////////////////////////////////////////////////////////////////////////////////
    initRecipientsData() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|TaskAssignee|initRecipientsData] ()...');
            const modalEl = yield this.modalCtrl.getTop();
            this.assModalId = modalEl.id;
            const modalAssList = this.navP.get('assList');
            this.modalAssList = modalAssList;
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    assSelChange(assIndex) {
        this.logger.info('[Modal|TaskAssignee|assSelChange] (' + assIndex + ')...');
        const newSelAssObj = this.modalAssList[assIndex];
        this.logger.info('[Modal|TaskAssignee|assSelChange] (New Selection): ' + newSelAssObj.DisplayName + ' (EmpId ' + newSelAssObj.EmpId + ')');
        this.modalCtrl.dismiss(newSelAssObj, 'changed', this.assModalId);
    }
    //////////////////////////////////////////////////////////////////////////////////////
    assSelCancel() {
        this.logger.info('[Modal|TaskAssignee|assSelCancel] ()...');
        this.modalCtrl.dismiss(null, 'cancel', this.assModalId);
    }
};
TaskAssigneePage.ctorParameters = () => [
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_3__.NGXLogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__.ModalController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__.NavParams }
];
TaskAssigneePage = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_5__.Component)({ selector: 'app-taskassignee', template: _raw_loader_taskassignee_page_html__WEBPACK_IMPORTED_MODULE_0__.default, styles: [_taskassignee_page_scss__WEBPACK_IMPORTED_MODULE_1__.default] })
    //////////////////////////////////////////////////////////////////////////////////////
], TaskAssigneePage);



/***/ }),

/***/ 3690:
/*!*****************************************************************************!*\
  !*** ./src/app/modals/detail/tsheet-detail/tsheet-add/tsheet-add.module.ts ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TSheetAddPageModule": function() { return /* binding */ TSheetAddPageModule; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common/http */ 91841);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser */ 39075);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ 38583);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ 3679);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var _tsheet_add_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tsheet-add.page */ 11628);








let TSheetAddPageModule = class TSheetAddPageModule {
};
TSheetAddPageModule = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule)({
        imports: [
            _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__.BrowserModule,
            _angular_common__WEBPACK_IMPORTED_MODULE_4__.CommonModule,
            _angular_forms__WEBPACK_IMPORTED_MODULE_5__.FormsModule,
            _ionic_angular__WEBPACK_IMPORTED_MODULE_6__.IonicModule,
            _angular_common_http__WEBPACK_IMPORTED_MODULE_7__.HttpClientModule
        ],
        declarations: [_tsheet_add_page__WEBPACK_IMPORTED_MODULE_0__.TSheetAddPage]
    })
], TSheetAddPageModule);



/***/ }),

/***/ 11628:
/*!***************************************************************************!*\
  !*** ./src/app/modals/detail/tsheet-detail/tsheet-add/tsheet-add.page.ts ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TSheetAddPage": function() { return /* binding */ TSheetAddPage; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _raw_loader_tsheet_add_page_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !raw-loader!./tsheet-add.page.html */ 56439);
/* harmony import */ var _tsheet_add_page_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tsheet-add.page.scss */ 62301);
/* harmony import */ var _services_events_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../../../services/events.service */ 80106);
/* harmony import */ var _services_deputy_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/deputy.service */ 22092);
/* harmony import */ var src_app_services_storage_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/services/storage.service */ 71188);
/* harmony import */ var _services_datetime_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/datetime.service */ 12826);
/* harmony import */ var src_app_services_detail_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/services/detail.service */ 52153);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var _capacitor_action_sheet__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @capacitor/action-sheet */ 54025);
/* harmony import */ var _tsheet_breaks_tsheet_breaks_page__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../tsheet-breaks/tsheet-breaks.page */ 51354);
/* harmony import */ var _tsheet_history_tsheet_history_page__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../tsheet-history/tsheet-history.page */ 89370);
/* harmony import */ var _capacitor_dialog__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @capacitor/dialog */ 63540);
/* harmony import */ var _capacitor_keyboard__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @capacitor/keyboard */ 87730);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! jquery */ 91704);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_12__);

















const myls = localStorage;
//////////////////////////////////////////////////////////////////////////////////////
let TSheetAddPage = class TSheetAddPage {
    //////////////////////////////////////////////////////////////////////////////////////
    constructor(logger, modalCtrl, loadCtrl, navP, plt, dT, deputy, detailServ, evServ, storeServ) {
        this.logger = logger;
        this.modalCtrl = modalCtrl;
        this.loadCtrl = loadCtrl;
        this.navP = navP;
        this.plt = plt;
        this.dT = dT;
        this.deputy = deputy;
        this.detailServ = detailServ;
        this.evServ = evServ;
        this.storeServ = storeServ;
        this.tsBreaksModalOpts = { animated: false, showBackdrop: false, backdropDismiss: false, cssClass: 'tsheet-detail-breaks-class', component: _tsheet_breaks_tsheet_breaks_page__WEBPACK_IMPORTED_MODULE_8__.TSheetBreaksPage, keyboardClose: true };
        this.tsHistoryModalOpts = { animated: false, showBackdrop: false, backdropDismiss: false, cssClass: 'tsheet-detail-history-class', component: _tsheet_history_tsheet_history_page__WEBPACK_IMPORTED_MODULE_9__.TSheetHistoryPage, keyboardClose: true };
        this.dpDateOpen = false;
        this.dpSTimeOpen = false;
        this.dpETimeOpen = false;
        this.workAreas = [];
        this.pplArr = [];
        this.addTSFormData = {
            companyId: null,
            companyName: null,
            areaId: 0,
            areaName: '',
            date: { date: new Date(), txt: this.dT.LNd(new Date()) },
            stime: { date: null, txt: null },
            etime: { date: null, txt: null },
            breaks: {
                values: {
                    summary: { r: 0, m: 0, dur: { hours: 0, minutes: 0 } },
                    slots: [{ start: null, end: null, dur: { hours: 0, minutes: 0 }, type: '' }]
                },
                slotsConfig: [
                    { SlotValue: 'M', SlotLabel: 'Meal Break (Unpaid)', SlotName: 'Meal Break' },
                    { SlotValue: 'R', SlotLabel: 'Rest Break (Paid)', SlotName: 'Rest Break' }
                ]
            },
            ttime: { hours: 0, minutes: 0 },
            comments: { content: '', pholder: 'Add Comment?' }
        };
        this.newBreaks = [];
        this.showTTLBreakMins = true;
        this.shouldSave = false;
        this.errorSave = false;
        this.newTSInputErr = null;
        this.breakMOpen = false;
        this.wasChanged = false;
        this.updateSaveBannerTxt = 'updated';
        this.aSheetOpen = false;
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ngOnInit() {
        this.logger.info('[Modal|TSheet-Add|OnInit]');
        this.initPrefs();
    }
    //////////////////////////////////////////////////////////////////////////////////////
    initPrefs() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            this.meAvatar = this.detailServ.meAva;
            this.workAvatar = this.detailServ.workAva;
            this.meObj = this.detailServ.meObj;
            this.myObj = this.detailServ.myObj;
            this.myEmpId = this.detailServ.meEmpId;
            this.myDisplayName = this.detailServ.meName;
            this.pplArr = this.detailServ.pplArr;
            this.addTSFormData.companyId = this.meObj.Company;
            this.addTSFormData.companyName = this.meObj.CompanyObject.CompanyName;
            this.initTSAddData();
            _capacitor_keyboard__WEBPACK_IMPORTED_MODULE_11__.Keyboard.removeAllListeners();
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ionViewDidEnter() {
        this.logger.info('[Modal|TSheet-Add|ionViewDidEnter]');
        this.plt.ready().then(() => (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            const modalEl = yield this.modalCtrl.getTop();
            this.modalId = modalEl.id;
        }));
    }
    //////////////////////////////////////////////////////////////////////////////////////
    initTSAddData() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|TSheet-Add|initTSAddData]');
            this.addTSPs = this.navP.data;
            this.workAreas = this.navP.data.wareas.list;
            this.addTSFormData.areaId = this.navP.data.wareas.lastId;
            this.addTSFormData.areaName = this.workAreas.filter(wa => wa.Id === this.addTSFormData.areaId)[0].OperationalUnitName;
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    closeAddTSheet() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|TSheet-Add|closeAddTSheet] ()...');
            if (this.errorSave) {
                this.errorWarning('error');
            }
            else {
                if (this.shouldSave) {
                    const doSaveConfOpts = { title: 'Save New Timesheet?', message: 'Save & Add or Discard Your New TimesheetNew?', okButtonTitle: 'Save/Add', cancelButtonTitle: 'Discard' };
                    const { value } = yield _capacitor_dialog__WEBPACK_IMPORTED_MODULE_10__.Dialog.confirm(doSaveConfOpts);
                    if (value) {
                        this.saveNewTSheet(true);
                    }
                    else {
                        this.modalCtrl.dismiss({ data: null, role: 'unchanged', id: this.modalId });
                    }
                }
                else {
                    if (this.wasChanged) {
                        this.modalCtrl.dismiss({ data: { newTSFormData: this.addTSFormData, newTSAPIObj: this.newTSAPIObj }, role: 'changed', id: this.modalId });
                    }
                    else {
                        this.modalCtrl.dismiss({ data: null, role: 'unchanged', id: this.modalId });
                    }
                }
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    errorWarning(type) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|TSheet-Add|errorWarning] ()...');
            if (type === 'error') {
                _capacitor_dialog__WEBPACK_IMPORTED_MODULE_10__.Dialog.alert({ title: 'Fix Errors', message: 'Unable to Save/Add Timesheet until errors are resolved' });
            }
            if (type === 'missing') {
                _capacitor_dialog__WEBPACK_IMPORTED_MODULE_10__.Dialog.alert({ title: 'Missing Data', message: 'Unable to Save/Add Timesheet until all details entered' });
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    saveNewTSheet(doClose) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|TSheet-Add|saveNewTSheet] ()...');
            const dO = this.addTSFormData;
            const isDate = (d) => { if (Object.prototype.toString.call(d) === '[object Date]')
                return true; return false; };
            if (this.errorSave) {
                this.errorWarning('error');
            }
            else {
                if (dO.companyId > 0 && dO.areaId > 0 && isDate(dO.date.date) && isDate(dO.stime.date) && isDate(dO.etime.date) && (dO.ttime.hours + dO.ttime.minutes) !== 0 && this.errorSave !== true) {
                    const saveNewTSheetLoader = yield this.loadCtrl.create({ spinner: 'dots', cssClass: 'sheriff-loader-class', message: 'Saving/Adding New Timesheet' });
                    yield saveNewTSheetLoader.present();
                    setTimeout(() => {
                        this.logger.info('[Modal|TSheet-Add|saveNewTSheet] (Saving/Adding New TSheet) - Remote: Deputy Put/Post New Timesheet - Await Server 200 - Do GET Request to /my/timesheet & Push Object to Local Variable...');
                        this.logger.info('[Modal|TSheet-Add|saveNewTSheet] (Saving/Adding New TSheet) - Local: Add New Timesheet Object to SQLite DB & Push New Obj to Local/Global Var to be Returned with Dismiss Data - No Refresh Required to Update TSheet-List View.');
                        //this.newTSAPIObj=? // Change to New Obj Returned As Above
                        this.wasChanged = true;
                        this.aniSave();
                        this.shouldSave = false;
                        saveNewTSheetLoader.dismiss();
                        this.updateSaveBannerTxt = 'saved';
                        if (doClose) {
                            this.closeAddTSheet();
                        }
                        ;
                    }, 5000);
                }
                else {
                    this.errorWarning('missing');
                }
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    aniNew() { const doAni = () => new Promise((resolve) => { const aniStr = 'animate__animated animate__rubberBand plus1breakcount'; jquery__WEBPACK_IMPORTED_MODULE_12__('.title-bc-ani').on('animationend', () => { jquery__WEBPACK_IMPORTED_MODULE_12__('.title-bc-ani').removeClass(aniStr); resolve(true); }); jquery__WEBPACK_IMPORTED_MODULE_12__('.title-bc-ani').addClass(aniStr); }); doAni(); }
    //////////////////////////////////////////////////////////////////////////////////////
    aniSave() { const doAni = () => new Promise((resolve) => { const aniStr = 'animate__animated animate__flipInX saving-tsb-data'; jquery__WEBPACK_IMPORTED_MODULE_12__('.save-data').on('animationend', () => { jquery__WEBPACK_IMPORTED_MODULE_12__('.save-data').removeClass(aniStr); resolve(true); }); jquery__WEBPACK_IMPORTED_MODULE_12__('.save-data').addClass(aniStr); }); doAni(); }
    //////////////////////////////////////////////////////////////////////////////////////
    editArea(currentArea) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|TSheet-Add|editArea] (' + currentArea + ')...');
            let thisIndexToIdRefArr = [];
            const niceTxt = (rawLbl) => { const w = rawLbl.split(' '); const nT = w.map((w) => { return w[0].toUpperCase() + w.substring(1); }).join(' '); return nT; };
            let wareaASheetOpts = { title: '𝗦𝗘𝗟𝗘𝗖𝗧 𝗪𝗢𝗥𝗞 𝗔𝗥𝗘𝗔:', options: [] };
            for (let i = 0; i < this.workAreas.length; i++) {
                const tA = this.workAreas[i];
                let thisASB = { title: '', style: _capacitor_action_sheet__WEBPACK_IMPORTED_MODULE_7__.ActionSheetButtonStyle.Default };
                Number(tA.Id) === Number(currentArea) ? thisASB.title = '\uD83D\uDFE2 ' + niceTxt(tA.OperationalUnitName.toString().toLowerCase()) : thisASB.title = '\u26AB ' + niceTxt(tA.OperationalUnitName.toString().toLowerCase());
                thisIndexToIdRefArr.push(tA.Id);
                wareaASheetOpts.options.push(thisASB);
            }
            ;
            thisIndexToIdRefArr.push(currentArea);
            wareaASheetOpts.options.push({ title: '\u274C 𝗖𝗔𝗡𝗖𝗘𝗟', style: _capacitor_action_sheet__WEBPACK_IMPORTED_MODULE_7__.ActionSheetButtonStyle.Cancel });
            yield _capacitor_action_sheet__WEBPACK_IMPORTED_MODULE_7__.ActionSheet.showActions(wareaASheetOpts).then(wareaRes => {
                this.aSheetOpen = true;
                if (thisIndexToIdRefArr[wareaRes.index].toString() === currentArea.toString()) {
                    if (wareaRes.index + 1 === wareaASheetOpts.options.length) {
                        this.logger.info('[Modal|TSheet-Detail|editArea] (Cancelled)');
                        this.evServ.showToast('cross', 'Cancelled');
                    }
                    else {
                        this.logger.info('[Modal|TSheet-Detail|editArea] (Selected Same)');
                        this.evServ.showToast('warning', 'Unchanged');
                    }
                    ;
                    this.aSheetOpen = false;
                }
                else {
                    const newAId = thisIndexToIdRefArr[wareaRes.index];
                    for (const areas of this.workAreas) {
                        if (newAId === areas.Id) {
                            this.addTSFormData.areaName = areas.OperationalUnitName;
                            this.addTSFormData.areaId = areas.Id;
                        }
                    }
                    ;
                    this.evServ.showToast('success', 'New Area Selected');
                    this.shouldSave = true;
                    this.wasChanged = true;
                    this.updateSaveBannerTxt = 'updated';
                    this.aSheetOpen = false;
                    this.logger.info('[Modal|TSheet-Detail|editArea] (Selected) i:' + wareaRes.index + ' | name: ' + this.workAreas[wareaRes.index].OperationalUnitName);
                }
                ;
            }).catch(wareaErr => { this.evServ.showToast('error', 'Change Area Error'); this.logger.info('[Modal|TSheet-Detail|editArea] (Error): ' + wareaErr); this.aSheetOpen = false; });
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    openDP(input) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|TSheet-Add|openDP] (' + input + ')...');
            const isDate = (d) => { if (Object.prototype.toString.call(d) === '[object Date]')
                return true; return false; };
            if (input === 'date') {
                this.dT.dpDateOnly(this.addTSFormData.date.date).then(newD => { this.addTSFormData.date.date = newD; this.addTSFormData.date.txt = this.dT.LNd(newD); this.evServ.showToast('success', 'Date Updated'); this.logger.info('[Modal|TSheet-Add|openDP|Date] (Success): Date Updated.'); }).catch(newDErr => { this.evServ.showToast('error', 'Date Error'); this.logger.info('[Modal|TSheet-Add|openDP|Date] (Error): ' + newDErr); });
            }
            else {
                let sE;
                input.charAt(0) === 's' ? sE = 'start' : sE = 'end';
                let oD;
                this.addTSFormData[input].date === null ? oD = this.addTSFormData.date.date : oD = this.addTSFormData[input].date;
                this.dT.openTimePicker(oD, sE)
                    .then(newT => {
                    const cap = sE.charAt(0).toUpperCase() + sE.slice(1);
                    this.addTSFormData[input].date = newT;
                    this.addTSFormData[input].txt = this.dT.format(newT, 'h:mmaaa');
                    this.evServ.showToast('success', cap + ' Time Updated');
                    this.logger.info('[Modal|TSheet-Add|openDP|Time] (Success): Time Updated: ' + newT);
                    const ntSD = this.addTSFormData.stime.date;
                    const ntED = this.addTSFormData.etime.date;
                    if (ntSD !== null && ntED !== null) {
                        if (isDate(ntSD) && isDate(ntED)) {
                            if (sE === 'start') {
                                if (this.dT.isA(ntSD, ntED)) {
                                    this.logger.info('[newTime|inputError] (Start Time -ISAFTER- End Time)');
                                    this.newTSInputErr = 'start';
                                    this.errorSave = true;
                                    if (this.shouldSave) {
                                        this.shouldSave = false;
                                    }
                                }
                                else {
                                    if (this.newTSInputErr === 'start' || this.newTSInputErr === null) {
                                        this.newTSInputErr = null;
                                        this.errorSave = false;
                                    }
                                }
                            }
                            else {
                                if (this.dT.isB(ntED, ntSD)) {
                                    this.logger.info('[newTime|inputError] (End Time -ISBEFORE- Start Time)');
                                    this.newTSInputErr = 'end';
                                    this.errorSave = true;
                                    if (this.shouldSave) {
                                        this.shouldSave = false;
                                    }
                                }
                                else {
                                    if (this.newTSInputErr === 'end' || this.newTSInputErr === null) {
                                        this.newTSInputErr = null;
                                        this.errorSave = false;
                                    }
                                }
                            }
                            if (this.newTSInputErr !== 'start' && this.newTSInputErr !== 'end') {
                                console.log('[FINAL CHECK]');
                                let finalTTObj = { hours: 0, minutes: 0 };
                                const shiftDurObj = this.dT.DurAsObj(ntSD, ntED);
                                const totalSMins = (shiftDurObj.hours * 60) + shiftDurObj.minutes;
                                const totalBMins = (this.addTSFormData.breaks.values.summary.dur.hours * 60) + this.addTSFormData.breaks.values.summary.dur.minutes;
                                const totalAdjMins = totalSMins - totalBMins;
                                const fTTHrs = Math.floor(totalAdjMins / 60);
                                const fTTMins = totalAdjMins - (fTTHrs * 60);
                                finalTTObj.hours = fTTHrs;
                                finalTTObj.minutes = fTTMins;
                                this.addTSFormData.ttime = finalTTObj;
                                this.errorSave = false;
                                this.shouldSave = true;
                                this.wasChanged = true;
                            }
                            else {
                                this.errorSave = true;
                                this.shouldSave = false;
                            }
                        }
                        else {
                            this.logger.info('[newTime|TimeInputs] - One or More Inputs Do Not Check as Date Objects.');
                        }
                    }
                    else {
                        this.logger.info('[newTime|TimeInputs] - One or More Inputs Check as Default - Select Time');
                    }
                })
                    .catch(newTErr => { if (newTErr === 'cancel') {
                    this.evServ.showToast('warning', 'Cancelled');
                    this.logger.info('[Modal|TSheet-Add|openDP|Time] (Cancelled): ' + newTErr);
                }
                else {
                    this.evServ.showToast('error', 'Error');
                    this.logger.info('[Modal|TSheet-Add|openDP|Time] (Error): ' + newTErr);
                } });
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    editNewBreaks() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|TSheet-Add|editNewBreaks] ()...');
            let thisTSBModalOpts = this.tsBreaksModalOpts;
            thisTSBModalOpts['componentProps'] = { mode: 'addtsheet', ts: { nTimeApproved: false }, tsb: this.newBreaks, newTSFormData: this.addTSFormData };
            const tsNewBreaksModal = yield this.modalCtrl.create(thisTSBModalOpts);
            document.addEventListener('ionModalDidPresent', () => { this.breakMOpen = true; this.logger.info('[TSheetAddModal|BreaksModal] (ionModalDidPresent)...'); });
            tsNewBreaksModal.onWillDismiss().then(() => { this.breakMOpen = false; this.logger.info('[TSheetAddModal|BreaksModal] (ionModalWillDismiss)...'); });
            tsNewBreaksModal.onDidDismiss().then(res => {
                console.log(res);
                this.logger.info('[TSheetAddModal|BreaksModal] (ionModalDidDismiss) >>> ()');
                if (res.data.length > 0) {
                    this.wasChanged = true;
                    this.shouldSave = true;
                    this.updateSaveBannerTxt = 'updated';
                    const nBA = res.data;
                    let uS = this.addTSFormData.breaks.values.summary;
                    let newDurMins = 0;
                    this.newBreaks = [];
                    for (let i = 0; i < nBA.length; i++) {
                        const nB = nBA[i];
                        nB.breakType === 'R' ? uS.r++ : uS.m++;
                        newDurMins += (nB.duration.hours * 60) + nB.duration.minutes;
                        let newBO = { blnEmptySlot: false, intEnd: '', intStart: '', intUnixEnd: 0, intUnixStart: 0, mixedActivity: { blnCanEndEarly: 1, blnCanStartEarly: 1, blnIsMandatory: 1, intState: 3, strBreakType: 'M' }, strState: 'Finished Duration', strType: 'B', strTypeName: '' };
                        newBO.intEnd = this.dT.Id(nB.endDate);
                        newBO.intStart = this.dT.Id(nB.startDate);
                        newBO.intUnixEnd = this.dT.UTd(nB.endDate);
                        newBO.intUnixStart = this.dT.UTd(nB.startDate);
                        newBO.mixedActivity.strBreakType = nB.breakType;
                        nB.breakType === 'M' ? newBO.strTypeName = 'Meal Break' : newBO.strTypeName = 'Rest Break';
                        this.newBreaks.push(newBO);
                    }
                    const currentDurMins = (this.addTSFormData.breaks.values.summary.dur.hours * 60) + this.addTSFormData.breaks.values.summary.dur.minutes;
                    const combinedDurMins = currentDurMins + newDurMins;
                    const wholeH = Math.floor(combinedDurMins / 60);
                    const wholeM = combinedDurMins - (wholeH * 60);
                    this.addTSFormData.breaks.values.summary.dur.hours = wholeH;
                    this.addTSFormData.breaks.values.summary.dur.minutes = wholeM;
                    const totalSMins = (this.addTSFormData.ttime.hours * 60) + this.addTSFormData.ttime.minutes;
                    const totalAdjMins = totalSMins - combinedDurMins;
                    const fTTHrs = Math.floor(totalAdjMins / 60);
                    const fTTMins = totalAdjMins - (fTTHrs * 60);
                    this.addTSFormData.ttime = { hours: fTTHrs, minutes: fTTMins };
                    this.evServ.showToast('success', 'New Break Data Add/Updated');
                }
                else {
                    this.evServ.showToast('general', 'Break Data Unchanged');
                }
            });
            return yield tsNewBreaksModal.present();
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    updateComments() {
        this.logger.info('[Modal|TSheet-Add|updateComments] ()...');
    }
};
TSheetAddPage.ctorParameters = () => [
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_14__.NGXLogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_15__.ModalController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_15__.LoadingController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_15__.NavParams },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_15__.Platform },
    { type: _services_datetime_service__WEBPACK_IMPORTED_MODULE_5__.DateTimeService },
    { type: _services_deputy_service__WEBPACK_IMPORTED_MODULE_3__.DeputyService },
    { type: src_app_services_detail_service__WEBPACK_IMPORTED_MODULE_6__.DetailService },
    { type: _services_events_service__WEBPACK_IMPORTED_MODULE_2__.EventsService },
    { type: src_app_services_storage_service__WEBPACK_IMPORTED_MODULE_4__.StorageService }
];
TSheetAddPage = (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_16__.Component)({ selector: 'app-tsheet-add', template: _raw_loader_tsheet_add_page_html__WEBPACK_IMPORTED_MODULE_0__.default, styles: [_tsheet_add_page_scss__WEBPACK_IMPORTED_MODULE_1__.default] })
    //////////////////////////////////////////////////////////////////////////////////////
], TSheetAddPage);



/***/ }),

/***/ 91806:
/*!***********************************************************************************!*\
  !*** ./src/app/modals/detail/tsheet-detail/tsheet-breaks/tsheet-breaks.module.ts ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TSheetBreaksPageModule": function() { return /* binding */ TSheetBreaksPageModule; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common */ 38583);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ 3679);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/platform-browser */ 39075);
/* harmony import */ var _tsheet_breaks_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tsheet-breaks.page */ 51354);







let TSheetBreaksPageModule = class TSheetBreaksPageModule {
};
TSheetBreaksPageModule = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule)({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_3__.CommonModule,
            _angular_forms__WEBPACK_IMPORTED_MODULE_4__.FormsModule,
            _ionic_angular__WEBPACK_IMPORTED_MODULE_5__.IonicModule,
            _angular_platform_browser__WEBPACK_IMPORTED_MODULE_6__.BrowserModule
        ],
        declarations: [_tsheet_breaks_page__WEBPACK_IMPORTED_MODULE_0__.TSheetBreaksPage]
    })
], TSheetBreaksPageModule);



/***/ }),

/***/ 51354:
/*!*********************************************************************************!*\
  !*** ./src/app/modals/detail/tsheet-detail/tsheet-breaks/tsheet-breaks.page.ts ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TSheetBreaksPage": function() { return /* binding */ TSheetBreaksPage; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _raw_loader_tsheet_breaks_page_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !raw-loader!./tsheet-breaks.page.html */ 51335);
/* harmony import */ var _tsheet_breaks_page_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tsheet-breaks.page.scss */ 23943);
/* harmony import */ var _services_datetime_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../../../services/datetime.service */ 12826);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var _capacitor_dialog__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @capacitor/dialog */ 63540);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! jquery */ 91704);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_4__);









//////////////////////////////////////////////////////////////////////////////////////
let TSheetBreaksPage = class TSheetBreaksPage {
    //////////////////////////////////////////////////////////////////////////////////////
    constructor(logger, modalCtrl, loadCtrl, navP, plt, dT) {
        this.logger = logger;
        this.modalCtrl = modalCtrl;
        this.loadCtrl = loadCtrl;
        this.navP = navP;
        this.plt = plt;
        this.dT = dT;
        this.breaks = [];
        this.newBreaks = [];
        this.newBInputErr = null;
        this.shouldSave = false;
        this.totalTime = { hours: 0, minutes: 0 };
        this.newBreakActive = false;
        this.wasChanged = false;
        this.updatedBreaksArr = [];
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ngOnInit() {
        this.logger.info('[Modal|TSheet-Breaks|OnInit]');
        this.initTSBreaksData();
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ionViewDidEnter() {
        this.plt.ready().then(() => (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () { const modalEl = yield this.modalCtrl.getTop(); this.modalId = modalEl.id; }));
    }
    //////////////////////////////////////////////////////////////////////////////////////
    initTSBreaksData() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|TSheet-Detail|InitTSData] ()...');
            this.mode = this.navP.data.mode;
            this.ts = this.navP.data.ts;
            this.tsb = this.navP.data.tsb;
            for (let i = 0; i < this.tsb.length; i++) {
                let thisB = { index: i };
                thisB['breakType'] = this.tsb[i].mixedActivity.strBreakType;
                thisB['typeName'] = this.tsb[i].strTypeName;
                this.tsb[i].strType === 'A' ? thisB['type'] = 'Paid' : thisB['type'] = 'Unpaid';
                thisB['state'] = this.tsb[i].strState;
                thisB['stateCode'] = this.tsb[i].intState;
                if (this.tsb[i].intStart === 0) {
                    thisB['startNice'] = '-';
                }
                else {
                    thisB['startNice'] = this.dT.NTut(this.tsb[i].intUnixStart);
                    thisB['startDate'] = this.dT.Dut(this.tsb[i].intUnixStart);
                }
                if (this.tsb[i].intEnd === 0) {
                    thisB['endNice'] = '-';
                }
                else {
                    thisB['endNice'] = this.dT.NTut(this.tsb[i].intUnixEnd);
                    thisB['endDate'] = this.dT.Dut(this.tsb[i].intUnixEnd);
                }
                if (this.tsb[i].intStart === 0 && this.tsb[i].intEnd === 0) {
                    thisB['duration'] = { hours: 0, minutes: 0 };
                }
                else {
                    thisB['duration'] = this.dT.DurAsObj(new Date(this.tsb[i].intStart), new Date(this.tsb[i].intEnd));
                    if (thisB['duration']['hours'] > 0) {
                        this.totalTime.hours += thisB['duration']['hours'];
                    }
                    ;
                    if (thisB['duration']['minutes'] > 0) {
                        this.totalTime.hours += thisB['duration']['minutes'];
                    }
                    ;
                }
                if (this.tsb[i].mixedActivity.blnIsMandatory === 1) {
                    thisB['status'] = 'mandatory';
                }
                else {
                    if (this.tsb[i].intUnixEnd - this.tsb[i].intUnixStart > 0) {
                        thisB['status'] = 'taken';
                    }
                    else {
                        thisB['status'] = 'nottaken';
                    }
                }
                ;
                this.breaks.push(thisB);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    closeBreaks() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|TSheet-Breaks|closeBreaks] ()...');
            if (this.shouldSave) {
                const doSaveConfOpts = { title: 'Save Changes?', message: 'New or updated break data for Timesheet #' + this.ts.Id + '. Save or Discard?', okButtonTitle: 'Save Changes', cancelButtonTitle: 'Discard Changes' };
                const { value } = yield _capacitor_dialog__WEBPACK_IMPORTED_MODULE_3__.Dialog.confirm(doSaveConfOpts);
                if (value) {
                    this.saveBreaks(true);
                }
                else {
                    this.modalCtrl.dismiss({ data: null, role: 'unchanged', id: this.modalId });
                }
            }
            else {
                if (this.wasChanged) {
                    if (this.mode === 'details') {
                        this.modalCtrl.dismiss({ ts: this.updatedTSObj, breaks: this.updatedBreaksArr }, 'changed', this.modalId);
                    }
                    else {
                        if (this.mode === 'addtsheet') {
                            this.modalCtrl.dismiss(this.breaks, 'new', this.modalId);
                        }
                    }
                }
                else {
                    this.modalCtrl.dismiss({ data: null, role: 'unchanged', id: this.modalId });
                }
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    saveBreaks(doClose) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|TSheet-Breaks|saveBreaks] ()...');
            const saveBreaksLoader = yield this.loadCtrl.create({ spinner: 'dots', cssClass: 'sheriff-loader-class', message: 'Updating Break Data' });
            yield saveBreaksLoader.present();
            setTimeout(() => {
                this.logger.info('[Modal|TSheet-Breaks|saveBreaks] (Saving New Breaks) - Remote: Deputy Put/Post Slots Data - Await Server 200 - Do GET Request to /my/timesheet & Push Object to Local Variable...');
                this.logger.info('[Modal|TSheet-Breaks|saveBreaks] (Saving New Breaks) - Local: Replace Updated Timesheet Object (New/Accepted Break Slots) in SQLite DB & Push to Local/Global Var to be Returned with Dismiss Data - No Refresh Required to Update TSheet-Detail View.');
                this.updatedTSObj = this.ts; // Change to New Obj Returned As Above
                this.updatedBreaksArr = this.tsb; // Change to New Breaks Arr Returned As Above
                this.wasChanged = true;
                this.aniSave();
                this.shouldSave = false;
                saveBreaksLoader.dismiss();
                if (doClose) {
                    this.closeBreaks();
                }
                ;
            }, 5000);
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    newBreak() {
        this.logger.info('[Modal|TSheet-Breaks|addBreaks] ()...');
        this.newBreaks.push({ index: this.newBreaks.length, breakType: 'R', typeName: 'Rest Break', duration: { hours: 0, minutes: 0 }, startNice: 'Select Time', startDate: new Date(), endNice: 'Select Time', endDate: new Date(), status: 'taken', isnew: true });
        this.newBreakActive = true;
    }
    //////////////////////////////////////////////////////////////////////////////////////
    addBreak(index) {
        this.logger.info('[Modal|TSheet-Breaks|saveNewBreak] ()...');
        const newBDurObj = this.newBreaks[index].duration;
        const saveBreak = this.newBreaks.filter(b => b.index === index);
        this.breaks.push(saveBreak[0]);
        if (newBDurObj.hours > 0) {
            this.totalTime.hours += newBDurObj.hours;
        }
        ;
        if (newBDurObj.minutes > 0) {
            this.totalTime.minutes += newBDurObj.minutes;
        }
        ;
        if (this.totalTime.minutes > 60) {
            this.totalTime.hours += 1;
            this.totalTime.minutes = this.totalTime.minutes - 60;
        }
        ;
        this.newBreaks = this.newBreaks.filter(b => b.index !== index);
        this.newBreaks.length > 0 ? this.newBreakActive = true : this.newBreakActive = false;
        this.aniNew();
        this.shouldSave = true;
    }
    //////////////////////////////////////////////////////////////////////////////////////
    deleteNewBreak(index) {
        this.logger.info('[Modal|TSheet-Breaks|deleteNewBreak] ()...');
        this.newBreaks = this.newBreaks.filter(b => b.index !== index);
        this.newBreaks.length > 0 ? this.newBreakActive = true : this.newBreakActive = false;
    }
    //////////////////////////////////////////////////////////////////////////////////////
    breakTypeBtn(btI, btV) { jquery__WEBPACK_IMPORTED_MODULE_4__('.break-type-radio-group-' + btI.toString()).prop('value', btV); }
    selectBreakType(breakI, breakTypeVal) {
        this.logger.info('[Modal|TSheet-Breaks|selectBreakType] (ionChange) (' + breakI + ',' + breakTypeVal + ')...');
        this.newBreaks[breakI].breakType = breakTypeVal;
        breakTypeVal === 'M' ? this.newBreaks[breakI].typeName = 'Meal Break' : this.newBreaks[breakI].typeName = 'Rest Break';
    }
    //////////////////////////////////////////////////////////////////////////////////////
    openTimeSelect(index, startOrEnd) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|TSheet-Breaks|addBreaks|OpenTimeSelect] (' + index, startOrEnd + ')...');
            const sDate = this.dT.Dut(this.ts.StartTime);
            const hsDur = Math.ceil(Number(this.ts.TotalTimeInv) / 2);
            let newBOpenTime;
            this.mode === 'addtsheet' ? newBOpenTime = new Date() : newBOpenTime = this.dT.startOfHr((this.dT.addHrs(sDate, hsDur)));
            this.dT.openTimePicker(newBOpenTime, startOrEnd).then(newT => {
                const nicePtyStr = startOrEnd + 'Nice';
                const datePtyStr = startOrEnd + 'Date';
                this.newBreaks[index][nicePtyStr] = this.dT.format(newT, 'h:mmaaa');
                this.newBreaks[index][datePtyStr] = newT;
                const isDate = (d) => { if (Object.prototype.toString.call(d) === "[object Date]")
                    return true; return false; };
                const nbSN = this.newBreaks[index].startNice;
                const nbSD = this.newBreaks[index].startDate;
                const nbEN = this.newBreaks[index].endNice;
                const nbED = this.newBreaks[index].endDate;
                const def = 'Select Time';
                if (nbSN !== def && nbEN !== def) {
                    if (isDate(nbSD) && isDate(nbED)) {
                        if (startOrEnd === 'start') {
                            if (this.dT.isA(nbSD, nbED)) {
                                this.logger.info('[newBreak|inputError] (Start Time -ISAFTER- End Time)');
                                this.newBInputErr = 'start';
                                jquery__WEBPACK_IMPORTED_MODULE_4__('.save-newbreak-btn').prop('disabled', true);
                            }
                            else {
                                if (this.newBInputErr === 'start' || this.newBInputErr === null) {
                                    this.newBInputErr = null;
                                    jquery__WEBPACK_IMPORTED_MODULE_4__('.save-newbreak-btn').prop('disabled', false);
                                }
                            }
                        }
                        else {
                            if (this.dT.isB(nbED, nbSD)) {
                                this.logger.info('[newBreak|inputError] (End Time -ISBEFORE- Start Time)');
                                this.newBInputErr = 'end';
                                jquery__WEBPACK_IMPORTED_MODULE_4__('.save-newbreak-btn').prop('disabled', true);
                            }
                            else {
                                if (this.newBInputErr === 'end' || this.newBInputErr === null) {
                                    this.newBInputErr = null;
                                    jquery__WEBPACK_IMPORTED_MODULE_4__('.save-newbreak-btn').prop('disabled', false);
                                }
                            }
                        }
                        if (this.newBInputErr !== 'start' && this.newBInputErr !== 'end') {
                            this.newBreaks[index].duration = this.dT.DurAsObj(nbSD, nbED);
                            jquery__WEBPACK_IMPORTED_MODULE_4__('.save-newbreak-btn').prop('disabled', false);
                        }
                        else {
                            jquery__WEBPACK_IMPORTED_MODULE_4__('.save-newbreak-btn').prop('disabled', true);
                        }
                    }
                    else {
                        this.logger.info('[newBreak|TimeInputs] - One or More Inputs Do Not Check as Date Objects.');
                    }
                }
                else {
                    this.logger.info('[newBreak|TimeInputs] - One or More Inputs Check as Default - Select Time');
                }
            }).catch(dpErr => { console.log(dpErr); });
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    aniNew() { const doAni = () => new Promise((resolve) => { const aniStr = 'animate__animated animate__rubberBand plus1breakcount'; jquery__WEBPACK_IMPORTED_MODULE_4__('.title-bc-ani').on('animationend', () => { jquery__WEBPACK_IMPORTED_MODULE_4__('.title-bc-ani').removeClass(aniStr); resolve(true); }); jquery__WEBPACK_IMPORTED_MODULE_4__('.title-bc-ani').addClass(aniStr); }); doAni(); }
    //////////////////////////////////////////////////////////////////////////////////////
    aniSave() { const doAni = () => new Promise((resolve) => { const aniStr = 'animate__animated animate__flipInX saving-tsb-data'; jquery__WEBPACK_IMPORTED_MODULE_4__('.save-data').on('animationend', () => { jquery__WEBPACK_IMPORTED_MODULE_4__('.save-data').removeClass(aniStr); resolve(true); }); jquery__WEBPACK_IMPORTED_MODULE_4__('.save-data').addClass(aniStr); }); doAni(); }
};
TSheetBreaksPage.ctorParameters = () => [
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_6__.NGXLogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_7__.ModalController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_7__.LoadingController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_7__.NavParams },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_7__.Platform },
    { type: _services_datetime_service__WEBPACK_IMPORTED_MODULE_2__.DateTimeService }
];
TSheetBreaksPage = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_8__.Component)({ selector: 'app-tsheet-breaks', template: _raw_loader_tsheet_breaks_page_html__WEBPACK_IMPORTED_MODULE_0__.default, styles: [_tsheet_breaks_page_scss__WEBPACK_IMPORTED_MODULE_1__.default] })
    //////////////////////////////////////////////////////////////////////////////////////
], TSheetBreaksPage);



/***/ }),

/***/ 77963:
/*!*********************************************************************!*\
  !*** ./src/app/modals/detail/tsheet-detail/tsheet-detail.module.ts ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TSheetDetailPageModule": function() { return /* binding */ TSheetDetailPageModule; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common/http */ 91841);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser */ 39075);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ 38583);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ 3679);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var _tsheet_detail_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tsheet-detail.page */ 72348);








let TSheetDetailPageModule = class TSheetDetailPageModule {
};
TSheetDetailPageModule = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule)({
        imports: [
            _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__.BrowserModule,
            _angular_common__WEBPACK_IMPORTED_MODULE_4__.CommonModule,
            _angular_forms__WEBPACK_IMPORTED_MODULE_5__.FormsModule,
            _ionic_angular__WEBPACK_IMPORTED_MODULE_6__.IonicModule,
            _angular_common_http__WEBPACK_IMPORTED_MODULE_7__.HttpClientModule
        ],
        declarations: [_tsheet_detail_page__WEBPACK_IMPORTED_MODULE_0__.TSheetDetailPage]
    })
], TSheetDetailPageModule);



/***/ }),

/***/ 72348:
/*!*******************************************************************!*\
  !*** ./src/app/modals/detail/tsheet-detail/tsheet-detail.page.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TSheetDetailPage": function() { return /* binding */ TSheetDetailPage; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _raw_loader_tsheet_detail_page_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !raw-loader!./tsheet-detail.page.html */ 79649);
/* harmony import */ var _tsheet_detail_page_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tsheet-detail.page.scss */ 65850);
/* harmony import */ var _services_datetime_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../../services/datetime.service */ 12826);
/* harmony import */ var _services_events_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../../services/events.service */ 80106);
/* harmony import */ var _popovers_detailmenu_detailmenu_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../../../popovers/detailmenu/detailmenu.component */ 70518);
/* harmony import */ var _tsheet_breaks_tsheet_breaks_page__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tsheet-breaks/tsheet-breaks.page */ 51354);
/* harmony import */ var _tsheet_history_tsheet_history_page__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tsheet-history/tsheet-history.page */ 89370);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var _capacitor_action_sheet__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @capacitor/action-sheet */ 54025);
/* harmony import */ var src_app_services_detail_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/services/detail.service */ 52153);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var _capacitor_share__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @capacitor/share */ 16380);
/* harmony import */ var _capacitor_dialog__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @capacitor/dialog */ 63540);
/* harmony import */ var _capacitor_app__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @capacitor/app */ 42138);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! jquery */ 91704);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_12__);

















//////////////////////////////////////////////////////////////////////////////////////
let TSheetDetailPage = class TSheetDetailPage {
    //////////////////////////////////////////////////////////////////////////////////////
    constructor(logger, dT, evServ, modalCtrl, popCtrl, loadCtrl, navP, plt, detailServ) {
        this.logger = logger;
        this.dT = dT;
        this.evServ = evServ;
        this.modalCtrl = modalCtrl;
        this.popCtrl = popCtrl;
        this.loadCtrl = loadCtrl;
        this.navP = navP;
        this.plt = plt;
        this.detailServ = detailServ;
        this.shiftDurObj = { hours: 0, minutes: 0 };
        this.showPMMins = false;
        this.showPMHrs = false;
        this.showTTLBreakMins = false;
        this.mBreakCount = 0;
        this.rBreakCount = 0;
        this.nBreaks = [];
        this.TTPerfValObj = { hours: 0, minutes: 0 };
        this.hasEmployeeComment = true;
        this.pplArr = [];
        this.sVNK = false;
        this.supervisorObj = { avatar: '', label: '' };
        this.hasInvoiceComment = true;
        this.noComments = false;
        this.didExport = false;
        this.popOpen = false;
        this.aSheetOpen = false;
        this.tsBreaksModalOpts = { animated: false, showBackdrop: false, backdropDismiss: false, cssClass: 'tsheet-detail-breaks-class', component: _tsheet_breaks_tsheet_breaks_page__WEBPACK_IMPORTED_MODULE_5__.TSheetBreaksPage, keyboardClose: true };
        this.tsHistoryModalOpts = { animated: false, showBackdrop: false, backdropDismiss: false, cssClass: 'tsheet-detail-history-class', component: _tsheet_history_tsheet_history_page__WEBPACK_IMPORTED_MODULE_6__.TSheetHistoryPage, keyboardClose: true };
        this.tsHistoryModalOpen = false;
        this.shouldSave = false;
        this.tsBreaksModalOpen = false;
        this.wasChanged = false;
        this.updateSaveBannerTxt = 'Updated';
        this.showIncome = true;
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ngOnInit() {
        this.logger.info('[Modal|TSheet-Detail|OnInit]');
        this.initPrefs();
    }
    //////////////////////////////////////////////////////////////////////////////////////
    initPrefs() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            this.meAvatar = this.detailServ.meAva;
            this.meObj = this.detailServ.meObj;
            this.meEmpId = this.detailServ.meEmpId;
            this.pplArr = this.detailServ.pplArr;
            this.initTSData();
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    initTSData() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|TSheet-Detail|InitTSData] ()...');
            this.ts = this.navP.data.ts;
            this.showIncome = this.navP.data.showincome;
            if (!this.ts.nTimeApproved) {
                this.areasArr = this.navP.data.wareas;
            }
            ;
            this.tsSlots = JSON.parse(this.ts.Slots);
            this.shiftDurObj = this.dT.DurAsObj(this.dT.Dut(this.ts.StartTime), this.dT.Dut(this.ts.EndTime));
            // Total Time
            const rawTTDiff = this.ts.TotalTime - this.ts.TotalTimeInv;
            if (rawTTDiff !== 0) {
                this.TTPerformance = Math.sign(rawTTDiff);
                this.TTPerfValObj = this.dT.rosVsTSTTDiff(this.ts.TotalTimeInv, this.ts.TotalTime);
            }
            else {
                this.TTPerformance = 0;
            }
            ;
            if (this.tsSlots.length > 0) {
                for (let i = 0; i < this.tsSlots.length; i++) {
                    const thisB = { index: i };
                    if (this.tsSlots[i].mixedActivity.strBreakType === 'R') {
                        this.rBreakCount++;
                        thisB['type'] = 'Rest Break';
                    }
                    ;
                    if (this.tsSlots[i].mixedActivity.strBreakType === 'M') {
                        this.mBreakCount++;
                        thisB['type'] = 'Meal Break';
                    }
                    ;
                    const bStart = this.dT.Dut(this.tsSlots[i].intUnixStart);
                    thisB['start'] = this.dT.format(bStart, 'h:mmaaa');
                    const bEnd = this.dT.Dut(this.tsSlots[i].intUnixEnd);
                    thisB['end'] = this.dT.format(bEnd, 'h:mmaaa');
                    const bDurObj = this.dT.DurAsObj(bStart, bEnd);
                    let bMins = 0;
                    if (bDurObj.hours > 0) {
                        bMins = ((bDurObj.hours * 60) + bDurObj.minutes);
                    }
                    else {
                        bMins = bDurObj.minutes;
                    }
                    thisB['durObj'] = bDurObj;
                    thisB['durMins'] = bMins;
                    this.nBreaks.push(thisB);
                }
                let ttlMins = 0;
                for (let i = 0; i < this.nBreaks.length; i++) {
                    ttlMins += this.nBreaks[i].durMins;
                }
                ;
                this.breaksTtlDur = Math.round(ttlMins).toString();
                this.showTTLBreakMins = true;
            }
            else {
                this.showTTLBreakMins = false;
                this.breaksTtlDur = 'NIL';
            }
            // Warnings
            let lWarnCount = 0;
            if (this.ts.Warning !== '' && this.ts.Warning !== null && this.ts.Warning !== undefined) {
                if (this.ts.Warning.includes('|')) {
                    const warnArr = this.ts.Warning.split('|');
                    this.ts['nWarning'] = warnArr[0];
                    lWarnCount++;
                }
                else {
                    this.ts['nWarning'] = this.ts.Warning;
                }
            }
            ;
            if (this.ts.WarningOverrideComment !== '' && this.ts.WarningOverrideComment !== null && this.ts.WarningOverrideComment !== undefined) {
                this.ts['nWarningOR'] = this.ts.WarningOverrideComment;
                lWarnCount++;
            }
            ;
            this.ts['nWarnCount'] = lWarnCount;
            // Comments
            const eC = this.ts.EmployeeComment;
            const sV = Number(this.ts.Supervisor);
            const sVComm = this.ts.SupervisorComment;
            const iC = this.ts.InvoiceComment;
            eC !== null && eC !== undefined && eC !== '' && eC.length > 0 ? this.hasEmployeeComment = true : this.hasEmployeeComment = false;
            iC !== null && iC !== undefined && iC !== '' && iC.length > 0 ? this.hasInvoiceComment = true : this.hasInvoiceComment = false;
            if (sVComm !== null && sVComm !== undefined && sVComm !== '' && sVComm.length > 0) {
                this.hasSupervisorComment = true;
                let sEmpId;
                if (sV !== null && sV !== undefined && sV > 0) {
                    sEmpId = sV;
                }
                else {
                    let tA = this.ts.TimeApprover;
                    let crTr = Number(this.ts.Creator);
                    if (tA !== null && tA !== undefined && Number(tA) > 0) {
                        sEmpId = Number(tA);
                    }
                    else {
                        sEmpId = crTr;
                    }
                }
                ;
                if (sEmpId !== this.meEmpId) {
                    const sVArr = this.pplArr.filter(p => p.EmpId === sEmpId);
                    if (sVArr.length > 0) {
                        this.supervisorObj.label = sVArr[0].DisplayName;
                        this.supervisorObj.avatar = sVArr[0].Photo;
                        this.sVNK = false;
                    }
                    else {
                        this.supervisorObj.label = 'NK';
                        this.supervisorObj.avatar = '../../../../assets/img/sheriff-tsheet-detail-unknown-sv-ico.png';
                        this.sVNK = true;
                    }
                }
                else {
                    this.supervisorObj.label = 'You';
                    this.supervisorObj.avatar = this.meAvatar;
                    this.sVNK = false;
                }
            }
            else {
                this.hasSupervisorComment = false;
            }
            ;
            !this.hasEmployeeComment && !this.hasSupervisorComment && !this.hasInvoiceComment ? this.noComments = true : this.noComments = false;
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ionViewDidEnter() { this.plt.ready().then(() => (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () { const modalEl = yield this.modalCtrl.getTop(); this.modalId = modalEl.id; })); }
    //////////////////////////////////////////////////////////////////////////////////////
    openPop(event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|TSheetDetail|openPop] (event)');
            let editPop = yield this.popCtrl.create({ event: event, component: _popovers_detailmenu_detailmenu_component__WEBPACK_IMPORTED_MODULE_4__.DetailMenuComponent, cssClass: 'sheriff-pop-detailmenu-class', animated: false, showBackdrop: true, backdropDismiss: true });
            document.addEventListener('ionPopoverWillPresent', () => { this.popOpen = true; });
            document.addEventListener('ionPopoverWillDismiss', () => { this.popOpen = false; });
            editPop.onDidDismiss().then(choiceData => { if (choiceData.role !== 'backdrop') {
                this.logger.info('[TSheetDetail|editPop] (Menu Selection): ' + choiceData);
            }
            else {
                this.logger.info('[TSheetDetail|editPop] - Dismissed Without Selection (Cancelled)');
            } });
            return editPop.present();
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    shareTS() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|TSheet-Detail|shareTS] ()...');
            jquery__WEBPACK_IMPORTED_MODULE_12__('.sheriff-detail-header-btn-wrapper.share-btn').addClass('detail-sharebtn-active');
            _capacitor_app__WEBPACK_IMPORTED_MODULE_11__.App.addListener('appStateChange', ({ isActive }) => { if (isActive) {
                jquery__WEBPACK_IMPORTED_MODULE_12__('.sheriff-detail-header-btn-wrapper.share-btn').removeClass('detail-sharebtn-active');
            } });
            let exportTxt = 'Timesheet #' + this.ts.Id + ' - ' + this.ts.nDate + ':\n';
            Object.entries(this.ts).forEach(([key, value]) => { const newLine = `${key}: ${value}\n`; exportTxt = exportTxt.concat(newLine); });
            try {
                const shareRes = yield _capacitor_share__WEBPACK_IMPORTED_MODULE_9__.Share.share({ title: 'Export Timesheet #' + this.ts.Id, text: exportTxt, url: null, dialogTitle: 'Export Timesheet #' + this.ts.Id });
                this.evServ.showToast('success', 'Shared via ' + shareRes.activityType);
                this.didExport = true;
                this.exportVia = shareRes.activityType;
                this.logger.info('[Modal|TSheet-Detail|shareTS] (Result): ' + shareRes.activityType);
            }
            catch (shareErr) {
                this.evServ.showToast('error', 'Share Failed');
                this.logger.info('[Modal|TSheet-Detail|shareTS] (Error): ' + shareErr);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    editArea(currentArea) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|TSheet-Detail|editArea] (' + currentArea + ')...');
            if (!this.ts.nTimeApproved) {
                let thisIndexToIdRefArr = [];
                const niceTxt = (rawLbl) => { const w = rawLbl.split(' '); const nT = w.map((w) => { return w[0].toUpperCase() + w.substring(1); }).join(' '); return nT; };
                let wareaASheetOpts = { title: '𝗦𝗘𝗟𝗘𝗖𝗧 𝗪𝗢𝗥𝗞 𝗔𝗥𝗘𝗔:', options: [] };
                for (let i = 0; i < this.areasArr.length; i++) {
                    const tA = this.areasArr[i];
                    let thisASB = { title: '', style: _capacitor_action_sheet__WEBPACK_IMPORTED_MODULE_7__.ActionSheetButtonStyle.Default };
                    Number(tA.Id) === Number(currentArea) ? thisASB.title = '\uD83D\uDFE2 ' + niceTxt(tA.OperationalUnitName.toString().toLowerCase()) : thisASB.title = '\u26AB ' + niceTxt(tA.OperationalUnitName.toString().toLowerCase());
                    thisIndexToIdRefArr.push(tA.Id);
                    wareaASheetOpts.options.push(thisASB);
                }
                ;
                thisIndexToIdRefArr.push(currentArea);
                wareaASheetOpts.options.push({ title: '\u274C 𝗖𝗔𝗡𝗖𝗘𝗟', style: _capacitor_action_sheet__WEBPACK_IMPORTED_MODULE_7__.ActionSheetButtonStyle.Cancel });
                yield _capacitor_action_sheet__WEBPACK_IMPORTED_MODULE_7__.ActionSheet.showActions(wareaASheetOpts).then(wareaRes => {
                    this.aSheetOpen = true;
                    if (thisIndexToIdRefArr[wareaRes.index].toString() === currentArea.toString()) {
                        if (wareaRes.index + 1 === wareaASheetOpts.options.length) {
                            this.logger.info('[Modal|TSheet-Detail|editArea] (Cancelled)');
                            this.evServ.showToast('cross', 'Cancelled');
                        }
                        else {
                            this.logger.info('[Modal|TSheet-Detail|editArea] (Selected Same)');
                            this.evServ.showToast('warning', 'Unchanged');
                        }
                        ;
                        this.aSheetOpen = false;
                    }
                    else {
                        const newAId = thisIndexToIdRefArr[wareaRes.index];
                        for (const areas of this.areasArr) {
                            if (newAId === areas.Id) {
                                this.ts.nOperationalUnit = areas.OperationalUnitName;
                            }
                        }
                        ;
                        this.evServ.showToast('success', 'New Area Selected');
                        this.shouldSave = true;
                        this.wasChanged = true;
                        this.updateSaveBannerTxt = 'updated';
                        this.aSheetOpen = false;
                        this.logger.info('[Modal|TSheet-Detail|editArea] (Selected) i:' + wareaRes.index + ' | name: ' + this.areasArr[wareaRes.index].OperationalUnitName);
                    }
                    ;
                }).catch(wareaErr => { this.evServ.showToast('error', 'Change Area Error'); this.logger.info('[Modal|TSheet-Detail|editArea] (Error): ' + wareaErr); this.aSheetOpen = false; });
            }
            else {
                this.logger.info('[Modal|TSheet-Detail|editArea] (Warning) TS Approved - Cannot Edit Areas - Skipping...');
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    editBreaks() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|TSheet-Detail|editBreaks] ()...');
            let thisTSBModalOpts = this.tsBreaksModalOpts;
            thisTSBModalOpts['componentProps'] = { ts: this.ts, tsb: JSON.parse(this.ts.Slots), mode: 'details' };
            const tsBreaksModal = yield this.modalCtrl.create(thisTSBModalOpts);
            document.addEventListener('ionModalDidPresent', () => { this.tsBreaksModalOpen = true; this.logger.info('[TSheetDetailModal|BreaksModal] (ionModalDidPresent)...'); });
            tsBreaksModal.onWillDismiss().then(() => { this.tsBreaksModalOpen = false; this.logger.info('[TSheetDetailModal|BreaksModal] (ionModalWillDismiss)...'); });
            tsBreaksModal.onDidDismiss().then(({ data, role }) => {
                this.logger.info('[TSheetDetailModal|BreaksModal] (ionModalDidDismiss) >>> ()');
                if (role === 'changed') {
                    this.wasChanged = true;
                    this.shouldSave = true;
                    this.updateSaveBannerTxt = 'updated';
                    this.updatedTS = data.ts;
                    this.evServ.showToast('success', 'Break Data Updated');
                }
                else {
                    this.evServ.showToast('general', 'Break Data Unchanged');
                }
            });
            return yield tsBreaksModal.present();
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    viewHistory() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|TSheet-Detail|viewHistory] ()...');
            let thisTSHModalOpts = this.tsHistoryModalOpts;
            thisTSHModalOpts['componentProps'] = { ts: this.ts, avatar: this.meAvatar };
            const tsHistoryModal = yield this.modalCtrl.create(thisTSHModalOpts);
            document.addEventListener('ionModalDidPresent', () => { this.tsHistoryModalOpen = true; this.logger.info('[TSheetDetailModal|HistoryModal] (ionModalDidPresent)...'); });
            tsHistoryModal.onWillDismiss().then(() => { this.tsHistoryModalOpen = false; this.logger.info('[TSheetDetailModal|HistoryModal] (ionModalWillDismiss)...'); });
            tsHistoryModal.onDidDismiss().then(() => { this.logger.info('[TSheetDetailModalHistoryModal] (ionModalDidDismiss) >>> (History Modal Dismissed - No Changes Possible.)'); });
            return yield tsHistoryModal.present();
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    closeDetail() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            if (this.shouldSave) {
                const doSaveConfOpts = { title: 'Save Changes?', message: 'Changes made to Timesheet #' + this.ts.Id + '. Save or Discard?', okButtonTitle: 'Save Changes', cancelButtonTitle: 'Discard Changes' };
                const { value } = yield _capacitor_dialog__WEBPACK_IMPORTED_MODULE_10__.Dialog.confirm(doSaveConfOpts);
                if (value) {
                    this.saveTSChanges(true);
                }
                else {
                    this.modalCtrl.dismiss({ data: null, role: 'unchanged', id: this.modalId });
                }
            }
            else {
                if (this.wasChanged) {
                    this.modalCtrl.dismiss({ data: this.updatedTS, role: 'changed', id: this.modalId });
                }
                else {
                    this.modalCtrl.dismiss({ data: null, role: 'unchanged', id: this.modalId });
                }
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    saveTSChanges(doClose) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|TSheet-Breaks|saveBreaks] ()...');
            const saveBreaksLoader = yield this.loadCtrl.create({ spinner: 'dots', cssClass: 'sheriff-loader-class', message: 'Saving Timesheet #' + this.ts.Id });
            yield saveBreaksLoader.present();
            setTimeout(() => {
                this.logger.info('[Modal|TSheet-Detail|saveTSChanges] (Saving TS) - Remote: Deputy Put/Post TS Data - Await Server 200 - Do GET Request to /my/timesheet & Push Object to Local Variable...');
                this.logger.info('[Modal|TSheet-Detail|saveTSChanges] (Saving TS) - Local: Replace Updated Timesheet Object (New/Accepted Area/Other Props) in SQLite DB & Push to Local/Global Var to be Returned with Dismiss Detail - No Refresh Required to Update TSheet List View.');
                this.shouldSave = false;
                this.wasChanged = true;
                this.updateSaveBannerTxt = 'saved';
                saveBreaksLoader.dismiss();
                if (doClose) {
                    this.closeDetail();
                }
            }, 5000);
        });
    }
};
TSheetDetailPage.ctorParameters = () => [
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_14__.NGXLogger },
    { type: _services_datetime_service__WEBPACK_IMPORTED_MODULE_2__.DateTimeService },
    { type: _services_events_service__WEBPACK_IMPORTED_MODULE_3__.EventsService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_15__.ModalController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_15__.PopoverController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_15__.LoadingController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_15__.NavParams },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_15__.Platform },
    { type: src_app_services_detail_service__WEBPACK_IMPORTED_MODULE_8__.DetailService }
];
TSheetDetailPage = (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_16__.Component)({ selector: 'app-tsheet-detail', template: _raw_loader_tsheet_detail_page_html__WEBPACK_IMPORTED_MODULE_0__.default, styles: [_tsheet_detail_page_scss__WEBPACK_IMPORTED_MODULE_1__.default] })
    //////////////////////////////////////////////////////////////////////////////////////
], TSheetDetailPage);



/***/ }),

/***/ 29080:
/*!*************************************************************************************!*\
  !*** ./src/app/modals/detail/tsheet-detail/tsheet-history/tsheet-history.module.ts ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TSheetHistoryPageModule": function() { return /* binding */ TSheetHistoryPageModule; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common/http */ 91841);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser */ 39075);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ 38583);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ 3679);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var _tsheet_history_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tsheet-history.page */ 89370);








let TSheetHistoryPageModule = class TSheetHistoryPageModule {
};
TSheetHistoryPageModule = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule)({
        imports: [
            _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__.BrowserModule,
            _angular_common__WEBPACK_IMPORTED_MODULE_4__.CommonModule,
            _angular_forms__WEBPACK_IMPORTED_MODULE_5__.FormsModule,
            _ionic_angular__WEBPACK_IMPORTED_MODULE_6__.IonicModule,
            _angular_common_http__WEBPACK_IMPORTED_MODULE_7__.HttpClientModule
        ],
        declarations: [_tsheet_history_page__WEBPACK_IMPORTED_MODULE_0__.TSheetHistoryPage]
    })
], TSheetHistoryPageModule);



/***/ }),

/***/ 89370:
/*!***********************************************************************************!*\
  !*** ./src/app/modals/detail/tsheet-detail/tsheet-history/tsheet-history.page.ts ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TSheetHistoryPage": function() { return /* binding */ TSheetHistoryPage; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _raw_loader_tsheet_history_page_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !raw-loader!./tsheet-history.page.html */ 72249);
/* harmony import */ var _tsheet_history_page_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tsheet-history.page.scss */ 19462);
/* harmony import */ var _services_sqlite_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../../../services/sqlite.service */ 90636);
/* harmony import */ var _services_datetime_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../../../services/datetime.service */ 12826);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var src_app_services_detail_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/services/detail.service */ 52153);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ngx-logger */ 62740);









//////////////////////////////////////////////////////////////////////////////////////
let TSheetHistoryPage = class TSheetHistoryPage {
    //////////////////////////////////////////////////////////////////////////////////////
    constructor(logger, modalCtrl, navP, plt, dT, sql, detailServ) {
        this.logger = logger;
        this.modalCtrl = modalCtrl;
        this.navP = navP;
        this.plt = plt;
        this.dT = dT;
        this.sql = sql;
        this.detailServ = detailServ;
        this.allTSHistory = [];
        this.noHistory = false;
        this.rosPubDate = null;
        this.pplArr = [];
        this.sTTRaw = { hours: 0, minutes: 0 };
        this.sTTRound = { hours: 0, minutes: 0 };
        this.uTTRaw = { hours: 0, minutes: 0 };
        this.uTTRound = { hours: 0, minutes: 0 };
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ngOnInit() {
        this.logger.info('[Modal|TSheet-History|OnInit]');
        this.initPrefs();
    }
    //////////////////////////////////////////////////////////////////////////////////////
    initPrefs() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            this.meObj = this.detailServ.meObj;
            this.myEmpId = this.detailServ.meEmpId;
            this.myDisplayName = this.detailServ.meName;
            this.pplArr = this.detailServ.pplArr;
            this.initTSHistoryData();
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ionViewDidEnter() {
        this.logger.info('[Modal|TSheet-History|ionViewDidEnter]');
        this.plt.ready().then(() => (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            const modalEl = yield this.modalCtrl.getTop();
            this.modalId = modalEl.id;
            const searchIds = [];
            const histIdsArr = ['EmployeeAgreement', 'File', 'Id', 'PaycycleId', 'Roster'];
            for (let i = 0; i < histIdsArr.length; i++) {
                if (this.ts[histIdsArr[i]] && typeof this.ts[histIdsArr[i]] === 'number') {
                    searchIds.push(this.ts[histIdsArr[i]]);
                }
            }
            ;
            this.allTSHistory = yield this.sql.getTSHistory(searchIds);
            if (this.allTSHistory.length > 0) {
                for (let i = 0; i < this.allTSHistory.length; i++) {
                    const tH = this.allTSHistory[i];
                    if (tH.UsageType === 11 && tH.EmpId === this.ts.Employee && this.ts.Date === tH.Date) {
                        const rosPubD = new Date(tH.Created);
                        this.rosPubDate = this.dT.format(rosPubD, 'EEEE, d MMMM yyyy');
                    }
                }
            }
        }));
    }
    //////////////////////////////////////////////////////////////////////////////////////
    initTSHistoryData() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|TSheet-History|initTSHistoryData]');
            this.ts = this.navP.data.ts;
            this.meAvatar = this.navP.data.avatar;
            this.uLastUpdate = this.dT.format(new Date(this.ts.Modified), 'HH:mm');
            this.uSTimeRaw = this.dT.TFHut(this.ts.StartTime);
            this.uSTimeRound = this.dT.round5_24h(this.dT.Dut(this.ts.StartTime));
            this.uETimeRaw = this.dT.TFHut(this.ts.EndTime);
            this.uETimeRound = this.dT.round5_24h(this.dT.Dut(this.ts.EndTime));
            this.uTTRaw = this.dT.DurAsObj(this.dT.Dut(this.ts.StartTime), this.dT.Dut(this.ts.EndTime));
            let uTTRoundObj = {};
            const tsTTHrsStr = this.ts.TotalTime.toString();
            const splitTArr = tsTTHrsStr.split('.');
            parseInt(splitTArr[0]) > 0 ? uTTRoundObj['hours'] = parseInt(splitTArr[0]) : uTTRoundObj['hours'] = 0;
            if (parseInt(splitTArr[1]) > 0) {
                const raw2DMin = splitTArr[1].substring(0, 2);
                const mins2D = Math.round((parseInt(raw2DMin) / 100) * 60);
                uTTRoundObj['minutes'] = mins2D;
                this.uTTRound = uTTRoundObj;
            }
            else {
                uTTRoundObj['minutes'] = 0;
                this.uTTRound = uTTRoundObj;
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    closeHistory() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|TSheet-History|closeHistory] ()...');
            this.modalCtrl.dismiss({ data: null, role: 'unchanged', id: this.modalId });
        });
    }
};
TSheetHistoryPage.ctorParameters = () => [
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_6__.NGXLogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_7__.ModalController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_7__.NavParams },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_7__.Platform },
    { type: _services_datetime_service__WEBPACK_IMPORTED_MODULE_3__.DateTimeService },
    { type: _services_sqlite_service__WEBPACK_IMPORTED_MODULE_2__.SQLiteService },
    { type: src_app_services_detail_service__WEBPACK_IMPORTED_MODULE_4__.DetailService }
];
TSheetHistoryPage = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_8__.Component)({ selector: 'app-tsheet-history', template: _raw_loader_tsheet_history_page_html__WEBPACK_IMPORTED_MODULE_0__.default, styles: [_tsheet_history_page_scss__WEBPACK_IMPORTED_MODULE_1__.default] })
    //////////////////////////////////////////////////////////////////////////////////////
], TSheetHistoryPage);



/***/ }),

/***/ 5628:
/*!****************************************************!*\
  !*** ./src/app/modals/firstrun/firstrun.module.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FirstRunPageModule": function() { return /* binding */ FirstRunPageModule; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common/http */ 91841);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser */ 39075);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ 38583);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ 3679);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var _firstrun_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./firstrun.page */ 1119);








let FirstRunPageModule = class FirstRunPageModule {
};
FirstRunPageModule = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule)({
        imports: [
            _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__.BrowserModule,
            _angular_common__WEBPACK_IMPORTED_MODULE_4__.CommonModule,
            _angular_forms__WEBPACK_IMPORTED_MODULE_5__.FormsModule,
            _ionic_angular__WEBPACK_IMPORTED_MODULE_6__.IonicModule,
            _angular_common_http__WEBPACK_IMPORTED_MODULE_7__.HttpClientModule
        ],
        declarations: [_firstrun_page__WEBPACK_IMPORTED_MODULE_0__.FirstRunPage]
    })
], FirstRunPageModule);



/***/ }),

/***/ 1119:
/*!**************************************************!*\
  !*** ./src/app/modals/firstrun/firstrun.page.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FirstRunPage": function() { return /* binding */ FirstRunPage; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _raw_loader_firstrun_page_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !raw-loader!./firstrun.page.html */ 39625);
/* harmony import */ var _firstrun_page_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./firstrun.page.scss */ 10716);
/* harmony import */ var _services_calendar_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../services/calendar.service */ 49603);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @capacitor/core */ 68384);
/* harmony import */ var _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ionic-native/http/ngx */ 68589);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var _capacitor_dialog__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @capacitor/dialog */ 63540);
/* harmony import */ var _capacitor_status_bar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @capacitor/status-bar */ 64909);
/* harmony import */ var _capacitor_app__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @capacitor/app */ 42138);
/* harmony import */ var src_app_services_app_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/services/app.service */ 66475);
/* harmony import */ var _services_baseDB__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../services/baseDB */ 96414);
/* harmony import */ var _services_events_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./../../services/events.service */ 80106);
/* harmony import */ var _services_sqlite_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./../../services/sqlite.service */ 90636);
/* harmony import */ var src_app_services_datetime_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! src/app/services/datetime.service */ 12826);
/* harmony import */ var _services_deputy_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./../../services/deputy.service */ 22092);
/* harmony import */ var src_app_services_firebase_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! src/app/services/firebase.service */ 19446);
/* harmony import */ var _services_storage_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./../../services/storage.service */ 71188);
/* harmony import */ var src_app_services_detail_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! src/app/services/detail.service */ 52153);
/* harmony import */ var _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @capacitor/filesystem */ 61977);
/* harmony import */ var _services_filesystem_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./../../services/filesystem.service */ 22904);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! lodash */ 23815);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! jquery */ 91704);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_20__);

























//////////////////////////////////////////////////////////////////////////////////////
let FirstRunPage = class FirstRunPage {
    //////////////////////////////////////////////////////////////////////////////////////
    constructor(modalController, evServ, sqlServ, deputy, storeServ, fsServ, logger, loadCtrl, shttp, dT, calServ, fireServ, dS, appServ) {
        this.modalController = modalController;
        this.evServ = evServ;
        this.sqlServ = sqlServ;
        this.deputy = deputy;
        this.storeServ = storeServ;
        this.fsServ = fsServ;
        this.logger = logger;
        this.loadCtrl = loadCtrl;
        this.shttp = shttp;
        this.dT = dT;
        this.calServ = calServ;
        this.fireServ = fireServ;
        this.dS = dS;
        this.appServ = appServ;
        this.freshOptDefault = false;
        this.freshOptMore = false;
        // Slider Vars
        this.slideOptions = { initialSlide: 0, slidesPerView: 1, autoplay: false };
        this.doShowPager = true;
        this.sliderHasLoaded = false;
        this.thisSlideNo = 1;
        this.lockNext = false;
        this.lockPrev = false;
        this.checkFSAndBUOnce = false;
        this.usingDefaults = false;
        this.defaultLastSlideCount = 0;
        this.wpSearchAgainStage = 'waiting';
        this.wpWorkplaces = [];
        this.wpOneIsChecked = false;
        this.myDataObj = null;
        this.meDataObj = null;
        this.rawWPDataArr = [];
        this.isDownloading = true;
        this.awaitingChoice = true;
        this.neverAskAgainCB = true;
        this.wpNoOf = 0;
        this.wpCheckDone = false;
        this.newWPNo = 0;
        // DB/Backup Vars
        this.backupCheckIsDone = false;
        this.noBackupWillFail = false;
        this.mustRestoreProg = 0;
        this.mustRestoreStatus = 'loading';
        this.forceRestoreWP = null;
        this.forceRestoreWPArr = [];
        this.hasBUDB = false;
        this.buDBChecked = false;
        this.startFreshChecked = false;
        this.dbImportDone = false;
        this.reinitUDBCount = 0;
        // Download Scope/Data Vars
        this.epTestsDone = false;
        this.selectDataScope = null;
        this.showMoreOpts = false;
        this.allMyEPDataArr = [];
        this.recordsDefaultOpsArr = [];
        this.recordsUserOptsArr = [];
        this.recDLAllArr = [];
        this.recDLCustomArr = [];
        this.dloadSelectionMode = true;
        // Download Prog Vars
        this.dlMyRunning = false;
        this.dloadInProgress = false;
        this.dlInProgText = 'downloading';
        this.dlBoxInProgress = true;
        this.dlBoxError = false;
        this.dlBoxSuccess = false;
        this.thisDataValue = 0;
        this.thisDataMax = 0;
        this.getThisPBar = 0;
        this.getAllPBar = 0;
        this.getAllPerc = 0;
        this.getAllCount = 0;
        this.getAllTotal = 0;
        this.dlDidComplete = false;
        this.dlErrorCount = 0;
        this.dlConvImgMode = false;
        this.convImgs = [];
        // Modal Return Data Vars
        this.frWorkplaceId = 0;
        this.finalModalData = {
            wpId: this.frWorkplaceId,
            dlDone: false,
            dbImported: null,
            didDefaults: false,
            alertOpts: {
                alertCal: { value: null, info: false },
                alertMethods: { value: { phone: true, calendar: true, email: false }, info: false },
                alertEvents: { value: { shift: true, task: true, tsheet: true }, info: false },
                alertBefore: { value: { task: { range: 2, mins: 60 }, shift: { range: 1, mins: 30 }, tsheet: { range: 2, mins: 10 } }, info: false }
            }
        };
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ngOnInit() {
        this.logger.info('[Modal|FirstRun|ngInit] ()...');
        this.doInitModalVars();
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ionViewWillEnter() { this.logger.info('[Modal|FirstRun|ionViewWillEnter] ()...'); }
    //////////////////////////////////////////////////////////////////////////////////////
    doInitModalVars() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|FirstRun|doInitModalVars] ()...');
            this.meDataObj = yield this.dS.getMe();
            this.myDataObj = yield this.dS.getMy();
            this.userEmail = this.deputy.userEmail;
            let hasWPO = null;
            if (this.myDataObj.hasOwnProperty('Workplace')) {
                hasWPO = true;
                this.rawWPDataArr = this.myDataObj.Workplace;
                this.wpNoOf = this.rawWPDataArr.length;
            }
            else {
                hasWPO = false;
                this.wpNoOf = 0;
            }
            ;
            if (!hasWPO || this.wpNoOf < 1) {
                this.doShowPager = false;
                if (!this.wpCheckDone) {
                    this.wpCheckDone = true;
                    this.evServ.publish('wpCheckDone', true);
                }
                else {
                    yield this.doPrevNextCheck();
                }
            }
            else {
                this.doShowPager = true;
                const pfN = this.myDataObj.Portfolio;
                const pfC = this.myDataObj.ColorThemeCode;
                for (let i = 0; i < this.rawWPDataArr.length; i++) {
                    const rawWPO = this.rawWPDataArr[i];
                    let wpoColor, wpoCLabel, wpoCode, wpoAddr, wpoCheck;
                    if (i === 0) {
                        if (this.wpNoOf > 1) {
                            wpoCheck = false;
                            this.wpOneIsChecked = false;
                        }
                        else {
                            wpoCheck = true;
                            this.wpOneIsChecked = true;
                        }
                    }
                    else {
                        wpoCheck = false;
                    }
                    ;
                    this.frWorkplaceId = rawWPO.Id;
                    if (rawWPO.CompanyName === pfN) {
                        wpoColor = pfC;
                        this.lightOrDark(pfC) === 'dark' ? wpoCLabel = '#EEEEEE' : wpoCLabel = '#121212';
                    }
                    else {
                        wpoColor = '#363636';
                        wpoCLabel = '#EEEEEE';
                    }
                    ;
                    rawWPO.Code ? wpoCode = rawWPO.Code.substr(0, 3) : wpoCode = null;
                    rawWPO._DPMetaData.AddressObject.Print ? wpoAddr = rawWPO._DPMetaData.AddressObject.Print : wpoAddr = null;
                    this.wpWorkplaces.push({ id: rawWPO.Id, code: wpoCode, color: wpoColor, labelcolor: wpoCLabel, name: rawWPO.CompanyName, address: wpoAddr, ischecked: wpoCheck });
                }
                ;
                if (!this.wpCheckDone) {
                    this.wpCheckDone = true;
                    this.evServ.publish('wpCheckDone', true);
                }
                else {
                    yield this.doPrevNextCheck();
                }
                ;
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ionViewDidEnter() {
        this.logger.info('[Modal|FirstRun|ionViewDidEnter] ()...');
        jquery__WEBPACK_IMPORTED_MODULE_20__('ion-content#auth-page-ion-content').css('display', 'none');
    }
    ;
    //////////////////////////////////////////////////////////////////////////////////////
    lightOrDark(color) {
        this.logger.info('[Modal|FirstRun|lightOrDark] (' + String(color) + ')...');
        let r, g, b, hsp;
        if (color.match(/^rgb/)) {
            color = color.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)$/);
            r = color[1];
            g = color[2];
            b = color[3];
        }
        else {
            color = +("0x" + color.slice(1).replace(color.length < 5 && /./g, '$&$&'));
            r = color >> 16;
            g = color >> 8 & 255;
            b = color & 255;
        }
        ;
        hsp = Math.sqrt(0.299 * (r * r) + 0.587 * (g * g) + 0.114 * (b * b));
        if (hsp > 127.5) {
            return 'light';
        }
        else {
            return 'dark';
        }
    }
    //////////////////////////////////////////////////////////////////////////////////////
    searchForMissingWP() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|FirstRun|searchForMissingWP] ()...');
            const stopSA = (n) => { let nT; n ? nT = 'gotnew' : nT = 'nonew'; this.wpSearchAgainStage = nT; setTimeout(() => { jquery__WEBPACK_IMPORTED_MODULE_20__('.dimable').css('opacity', '1'); this.wpSearchAgain = false; this.wpSearchAgainStage = 'waiting'; }, 1000); };
            this.wpSearchAgain = true;
            jquery__WEBPACK_IMPORTED_MODULE_20__('.dimable').css('opacity', '0.3');
            const sFMWPRes = yield this.deputy.diffMyWorkplace(this.rawWPDataArr);
            if (!sFMWPRes.new) {
                stopSA(false);
            }
            else {
                stopSA(true);
                this.wpWorkplaces = [];
                this.newWPNo = sFMWPRes.newno;
                yield this.dS.setMy(sFMWPRes.data);
                this.doInitModalVars();
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    toggleWPCB(index, id) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|FirstRun|toggleWPCB] (' + index + ',' + id + ')...');
            if (this.wpWorkplaces[index].ischecked) {
                this.wpWorkplaces[index].ischecked = false;
                if (this.frWorkplaceId === id) {
                    this.frWorkplaceId = null;
                }
                ;
                let isOne = false;
                for (let i = 0; i < this.wpWorkplaces.length; i++) {
                    if (this.wpWorkplaces[i].ischecked) {
                        isOne = true;
                    }
                }
                ;
                this.wpOneIsChecked = isOne;
                yield this.doPrevNextCheck();
            }
            else {
                this.wpWorkplaces[index].ischecked = true;
                if (this.frWorkplaceId !== id) {
                    this.frWorkplaceId = id;
                }
                ;
                for (let i = 0; i < this.wpWorkplaces.length; i++) {
                    if (i !== index) {
                        this.wpWorkplaces[i].ischecked = false;
                    }
                }
                ;
                this.wpOneIsChecked = true;
                yield this.doPrevNextCheck();
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    skipWorkplaceImport() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|FirstRun|skipWorkplaceImport] ()...');
            this.noBackupWillFail = true;
            yield this.doPrevNextCheck();
            this.slideWithNav.slideTo(1, 500, true);
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getRecCatObj() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|firstRun|DeputyApiService|getRecCatObj] ()...');
            const dbInitLoader = yield this.loadCtrl.create({ spinner: 'dots', cssClass: ['sheriff-loader-class', 'fr-workplace-data-loader'], message: '𝘓𝘰𝘢𝘥𝘪𝘯𝘨 🏢𝗪𝗢𝗥𝗞𝗣𝗟𝗔𝗖𝗘 𝖣𝖺𝗍𝖺' });
            yield dbInitLoader.present();
            let doSkip = ['country', 'state'];
            let doAll = ['roster', 'timesheet', 'task', 'memo'];
            let doLimit = ['systemusagebalance', 'systemusagetracking', 'geo'];
            let noAccess = [];
            let zeroRecs = [];
            let availRecs = [];
            let skipRec = [];
            let availEPs = [];
            let allRCs;
            const storeRCs = yield this.storeServ.getObject('tempAllRCs');
            let allMCs;
            const storeMCs = yield this.storeServ.getObject('tempAllMCs');
            if (storeRCs !== null) {
                allRCs = storeRCs;
            }
            else {
                allRCs = yield this.deputy.firstRunRecordsCheck();
                this.storeServ.setObject('tempAllRCs', allRCs);
            }
            ;
            if (storeMCs !== null) {
                allMCs = storeMCs;
            }
            else {
                allMCs = yield this.deputy.firstRunMyCheck();
                this.storeServ.setObject('tempAllMCs', allMCs);
            }
            ;
            for (let i = 0; i < allRCs.length; i++) {
                const rC = allRCs[i];
                if (!rC.access) {
                    noAccess.push(rC.name);
                }
                else if (doSkip.includes(rC.name.toLowerCase())) {
                    skipRec.push(rC.name);
                }
                else if (rC.count < 1) {
                    zeroRecs.push(rC.name);
                }
                else {
                    let tRC = { ep: rC.name, disabled: null, checked: null, default: 0, value: 0, min: 0, max: 0 };
                    tRC.disabled = false;
                    tRC.checked = true;
                    rC.count === 1 ? tRC.min = 0 : tRC.min = 1;
                    if (doAll.includes(rC.name.toLowerCase())) {
                        tRC.max = rC.count;
                        if (rC.count <= 3000) {
                            tRC.value = rC.count;
                            tRC.default = rC.count;
                        }
                        else {
                            tRC.value = 3000;
                            tRC.default = 3000;
                        }
                    }
                    else if (doLimit.includes(rC.name.toLowerCase())) {
                        tRC.max = 730;
                        tRC.value = 365;
                        tRC.default = 365;
                    }
                    else {
                        if (rC.count <= 1000) {
                            tRC.max = rC.count;
                            tRC.value = rC.count;
                            tRC.default = rC.count;
                        }
                        else if (rC.count > 1000 && rC.count <= 2000) {
                            tRC.max = rC.count;
                            tRC.value = 730;
                            tRC.default = 730;
                        }
                        else if (rC.count > 2000) {
                            tRC.max = 2000;
                            tRC.value = 730;
                            tRC.default = 730;
                        }
                    }
                    ;
                    availRecs.push(tRC);
                    availEPs.push(tRC.ep);
                }
            }
            ;
            let finalAvailRecs = [];
            let accessRes;
            const storeARs = yield this.storeServ.getObject('tempARs');
            if (storeARs !== null) {
                accessRes = storeARs;
            }
            else {
                accessRes = yield this.deputy.gotEPAccess(availEPs);
                this.storeServ.setObject('tempARs', accessRes);
            }
            ;
            for (let i = 0; i < availRecs.length; i++) {
                const aRO = availRecs[i];
                if (accessRes[i].result) {
                    finalAvailRecs.push(aRO);
                }
            }
            ;
            let fauxRosCount;
            const tsArr = availRecs.filter(o => o.ep === 'Timesheet');
            tsArr.length > 0 ? fauxRosCount = tsArr[0]['max'] : fauxRosCount = 500;
            finalAvailRecs.push({ ep: 'Roster', disabled: false, checked: true, default: fauxRosCount, value: fauxRosCount, min: fauxRosCount, max: fauxRosCount });
            this.loadCtrl.dismiss().then(() => { this.epTestsDone = true; this.evServ.publish('epTestsDone', true); });
            this.logger.info('[Modal|firstRun|getRecCatObj] (FINISH): [' + allRCs.length + ']-All, [' + noAccess.length + ']-NoAccess, [' + zeroRecs.length + ']-0Records, [' + skipRec.length + ']-Skipped, [' + availRecs.length + ']-Avail');
            this.allMyEPDataArr = allMCs;
            this.recordsDefaultOpsArr = finalAvailRecs;
            this.recordsUserOptsArr = finalAvailRecs;
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    toggleBUDB(BUDBisC) {
        this.logger.info('[Modal|firstRun|toggleBUDB] (' + BUDBisC + ')...');
        if (!BUDBisC) {
            this.logger.info('[TOGGLE BUDB] -> ON/CHECKED...');
            if (!this.buDBChecked) {
                this.buDBChecked = true;
            }
            ;
            if (!this.restoreBUDBCB.checked) {
                this.restoreBUDBCB.checked = true;
            }
            ;
            if (this.startFreshChecked) {
                this.startFreshChecked = false;
            }
            ;
            if (this.startFreshCB.checked) {
                this.startFreshCB.checked = false;
            }
            ;
        }
        else if (BUDBisC) {
            this.logger.info('[TOGGLE BUDB] -> OFF/UNCHECKED...');
            if (this.buDBChecked) {
                this.buDBChecked = false;
            }
            ;
            if (this.restoreBUDBCB.checked) {
                this.restoreBUDBCB.checked = false;
            }
            ;
        }
        ;
        this.doPrevNextCheck();
    }
    ;
    //////////////////////////////////////////////////////////////////////////////////////
    toggleStartFresh(FreshisC) {
        this.logger.info('[Modal|firstRun|toggleStartFresh] (' + FreshisC + ')...');
        if (!FreshisC) {
            this.logger.info('[TOGGLE FreshStart] -> ON/CHECKED...');
            if (!this.startFreshChecked) {
                this.startFreshChecked = true;
            }
            ;
            if (!this.startFreshCB.checked) {
                this.startFreshCB.checked = true;
            }
            ;
            if (this.buDBChecked) {
                this.buDBChecked = false;
            }
            ;
            if (this.restoreBUDBCB.checked) {
                this.restoreBUDBCB.checked = false;
            }
            ;
        }
        else if (FreshisC) {
            this.logger.info('[TOGGLE FreshStart] -> OFF/UNCHECKED...');
            if (this.startFreshChecked) {
                this.startFreshChecked = false;
            }
            ;
            if (this.startFreshCB.checked) {
                this.startFreshCB.checked = false;
            }
            ;
        }
        ;
        this.doPrevNextCheck();
    }
    //////////////////////////////////////////////////////////////////////////////////////
    showMoreOptions(tf) {
        this.logger.info('[Modal|FirstRun|showMoreOptions] (' + tf.toString() + ')...');
        this.showMoreOpts = tf;
        tf ? this.selectDataScope = 'moreopts' : this.selectDataScope = 'all';
    }
    //////////////////////////////////////////////////////////////////////////////////////
    recordMOToggleChange(i, recEP) {
        this.logger.info('[Modal|FirstRun|recordMOToggleChange] (' + i + ',' + recEP + ')...');
        this.recordsUserOptsArr[i].checked ? this.recordsUserOptsArr[i].checked = false : this.recordsUserOptsArr[i].checked = true;
    }
    //////////////////////////////////////////////////////////////////////////////////////
    recordMORangeChange(i, recEP) {
        this.logger.info('[Modal|FirstRun|recordMORangeChange] (' + i + ',' + recEP + ')...');
        const newVal = parseInt(jquery__WEBPACK_IMPORTED_MODULE_20__('.records-range.' + recEP).prop('value'));
        this.recordsUserOptsArr[i].value = newVal;
    }
    //////////////////////////////////////////////////////////////////////////////////////
    toggleAlertM(event, mN) {
        this.logger.info('[Modal|FirstRun|toggleAlertM] (' + mN + ')...');
        event.stopPropagation();
        this.finalModalData.alertOpts.alertMethods.value[mN] ? this.finalModalData.alertOpts.alertMethods.value[mN] = false : this.finalModalData.alertOpts.alertMethods.value[mN] = true;
    }
    //////////////////////////////////////////////////////////////////////////////////////
    toggleAlertE(event, eN) {
        this.logger.info('[Modal|FirstRun|toggleAlertE] (' + eN + ')...');
        event.stopPropagation();
        this.finalModalData.alertOpts.alertEvents.value[eN] ? this.finalModalData.alertOpts.alertEvents.value[eN] = false : this.finalModalData.alertOpts.alertEvents.value[eN] = true;
    }
    //////////////////////////////////////////////////////////////////////////////////////
    clearDLProgress() {
        this.logger.info('[Modal|FirstRun|clearDLProgress] ()...');
        this.nowDataTarget = '';
        const dlProgNumArr = ['thisDataValue', 'thisDataMax', 'getThisPBar', 'getAllPBar', 'getAllPerc', 'getAllCount', 'getAllTotal'];
        for (const thisProgVal of dlProgNumArr) {
            this[thisProgVal] = 0;
        }
    }
    //////////////////////////////////////////////////////////////////////////////////////
    rerunDLProcess() {
        this.logger.info('[Modal|FirstRun|rerunDLProcess] (Listening)...');
        const rrSub = this.evServ.subscribe('setAuthGVarsDone', () => {
            this.logger.info('[Modal|FirstRun|rerunDLProcess|setAuthGVarsDone] (EVENT PUBLISHED) - Rerunning DL Process...');
            rrSub.unsubscribe();
            this.startDownloadProcess();
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    startDownloadProcess() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|FirstRun|startDownloadProcess] ()...');
            if (this.dlDidComplete) {
                this.logger.info('[Modal|firstRun|startDownloadProcess] (STOP!) this.dlDidComplete=true | Preventing RERUN - return.');
                return;
            }
            ;
            const myAniCSS = (jqEle, animName) => new Promise((resolve) => { const animClassStr = 'animate__animated animate__' + animName + ' animate__faster'; jquery__WEBPACK_IMPORTED_MODULE_20__(jqEle).addClass(animClassStr).on('animationend', () => { jquery__WEBPACK_IMPORTED_MODULE_20__(jqEle).removeClass(animClassStr); resolve('done'); }); });
            let dlRecListArr = [];
            this.selectDataScope === 'all' ? dlRecListArr = this.recordsDefaultOpsArr : dlRecListArr = this.recordsUserOptsArr;
            dlRecListArr = dlRecListArr.filter(x => !x['disabled'] && (x['checked'] && x['value'] > 0));
            let dlMyListArr = this.allMyEPDataArr;
            dlMyListArr = dlMyListArr.filter(x => x['count'] > 0 && !_services_baseDB__WEBPACK_IMPORTED_MODULE_9__.frResMyCombo.includes(x['name'].charAt(0).toUpperCase() + x['name'].slice(1)));
            let dlRecTotalNoRecords = ((0,lodash__WEBPACK_IMPORTED_MODULE_19__.sumBy)(dlRecListArr, 'value')) + ((0,lodash__WEBPACK_IMPORTED_MODULE_19__.sumBy)(dlMyListArr, 'count'));
            this.getAllTotal = dlRecListArr.length + dlMyListArr.length;
            let dlRecCount = 0;
            this.logger.info('[Modal|FirstRun|startDownloadProcess] ▶️ (RecordsDL) STARTED:');
            this.logger.info(' - Scope = "' + this.selectDataScope.toUpperCase() + '"');
            this.logger.info(' - EndPs = ' + dlRecListArr.length + ' (Res) + ' + dlMyListArr.length + ' (My) = ' + this.getAllTotal + ' (Total)');
            myAniCSS('.dlprogress-subheader-wrapper', 'zoomIn');
            // DOWNLOAD - Resources ------------------------------------------------------------
            const startDLResources = () => {
                this.dloadInProgress = true;
                this.showMoreOpts = false;
                this.dlBoxInProgress = true;
                this.dlBoxError = false;
                this.dlBoxSuccess = false;
                let allTSArr = [];
                this.evServ.subscribe('frDLResItems', (thisRecRespData) => (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
                    switch (thisRecRespData.stage) {
                        case 'error':
                            this.dlErrorCount++;
                            this.clearDLProgress();
                            this.dlBoxInProgress = false;
                            this.dlBoxError = true;
                            this.dlBoxSuccess = false;
                            let has401;
                            thisRecRespData.error[0].statusCode === 401 ? has401 = true : has401 = false;
                            const stopDueErr = () => (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () { this.evServ.destroy('frDLResItems'); this.evServ.destroy('frDLMyItems'); const { value } = yield _capacitor_dialog__WEBPACK_IMPORTED_MODULE_5__.Dialog.confirm({ title: 'Download Error', message: 'Sheriff failed to download core data it needs to complete setup. Check your connection to the internet and device permissions and try again.' }); if (value || !value) {
                                _capacitor_app__WEBPACK_IMPORTED_MODULE_7__.App.exitApp();
                            } });
                            if (has401) {
                                if (this.dlErrorCount < 2) {
                                    this.rerunDLProcess;
                                    setTimeout(() => { this.deputy.doRefreshToken(this.deputy.Client.auth); }, 500);
                                }
                                else {
                                    stopDueErr();
                                }
                            }
                            else {
                                stopDueErr();
                            }
                            ;
                            break;
                        case 'update':
                            this.thisDataValue = thisRecRespData.thisDataValue;
                            this.getThisPBar = thisRecRespData.getThisPBar;
                            break;
                        case 'end':
                            let baseRecRespData = thisRecRespData.data;
                            if (_services_baseDB__WEBPACK_IMPORTED_MODULE_9__.frResMyCombo.includes(thisRecRespData.recEPName)) {
                                this.logger.info('[Modal|FR|Dl] - ' + thisRecRespData.recEPName + ' [FOUND] in "frResMyCombo" Array - Checking for Additional "My" Items...');
                                const resDIds = baseRecRespData.map(o => o.Id);
                                let myDArr = [], myDIds = [];
                                const mMAvail = this.allMyEPDataArr.filter(mO => mO.name === String(thisRecRespData.recEPName.toLowerCase()));
                                mMAvail.length > 0 && mMAvail[0].count > 0 ? myDArr = mMAvail[0].data : myDArr = [];
                                if (myDArr.length > 0) {
                                    myDIds = myDArr.map(o => o.Id);
                                    for (let i = 0; i < myDIds.length; i++) {
                                        if (!resDIds.includes(myDIds[i])) {
                                            baseRecRespData.push(myDArr[i]);
                                            this.logger.info('[Modal|FR|DL] ➕ Added (My) Item #' + myDIds[i] + ' to ' + thisRecRespData.recEPName);
                                        }
                                        else {
                                            this.logger.info('[Modal|FR|DL] Skipping Pre-existing (My) Item.');
                                        }
                                    }
                                    ;
                                }
                                ;
                                if (thisRecRespData.recEPName === 'Timesheet') {
                                    allTSArr = baseRecRespData;
                                }
                                ;
                            }
                            ;
                            let insDBDataRes = yield this.sqlServ.insDPTblSet(thisRecRespData.recEPName, baseRecRespData);
                            let insResSym;
                            insDBDataRes ? insResSym = '🟢' : insResSym = '🔴';
                            this.logger.info('[Modal|firstRun|startDownloadProcess] 📓 (Records) RESOURCE | 🔀INSERT >>> ' + thisRecRespData.recEPName + ' ' + insResSym);
                            dlRecCount++;
                            dlRecTotalNoRecords -= thisRecRespData.records;
                            if (dlRecCount < dlRecListArr.length) {
                                this.getAllPBar = (((dlRecCount / this.getAllTotal) + Number.EPSILON) * 100) / 100;
                                this.getAllPerc = Math.round((dlRecCount / this.getAllTotal) * 100);
                                this.getAllCount = dlRecCount;
                                this.nowDataTarget = dlRecListArr[dlRecCount].ep.match(/[A-Z][a-z]+|[0-9]+/g).join(' ');
                                this.logger.info('[Modal|FirstRun|startDownloadProcess] 📓 (Records) RESOURCE | 🔽DOWNLOAD >>> ' + dlRecListArr[dlRecCount].ep + '...');
                                if (dlRecListArr[dlRecCount].ep !== 'Roster') {
                                    this.thisDataValue = 0;
                                    this.getThisPBar = 0;
                                    this.thisDataMax = dlRecListArr[dlRecCount].value;
                                    this.deputy.frDLResItems(dlRecCount + 1, this.getAllTotal, dlRecListArr[dlRecCount].ep, dlRecListArr[dlRecCount].max, dlRecListArr[dlRecCount].value);
                                }
                                else {
                                    let rosArr = [], ttlRosRecs = 0;
                                    this.thisDataMax = 0;
                                    this.thisDataValue = 0;
                                    this.getThisPBar = 0;
                                    ttlRosRecs = allTSArr.length;
                                    this.thisDataMax = ttlRosRecs;
                                    for (let i = 0; i < allTSArr.length; i++) {
                                        const tsRId = allTSArr[i]['Roster'];
                                        if (tsRId !== null && tsRId !== 0) {
                                            try {
                                                const { status, data, error } = yield this.shttp.sendRequest(this.deputy.Client.apiUrl + 'supervise/roster/' + tsRId, { method: 'get', responseType: 'json' });
                                                if (!error && status === 200) {
                                                    rosArr.push(data);
                                                }
                                            }
                                            catch (err) {
                                                console.log(JSON.stringify(err));
                                            }
                                            ;
                                        }
                                        ;
                                        const calcThisPBar = (i / ttlRosRecs).toFixed(2);
                                        this.evServ.publish('frDLResItems', { stage: 'update', thisDataValue: i, getThisPBar: calcThisPBar });
                                    }
                                    ;
                                    this.evServ.publish('frDLResItems', { stage: 'end', recEPName: 'Roster', records: rosArr.length, data: rosArr });
                                    break;
                                }
                            }
                            else {
                                this.nowDataTarget = '';
                                this.getAllPBar = (((dlRecCount / this.getAllTotal) + Number.EPSILON) * 100) / 100;
                                this.getAllPerc = Math.round((dlRecCount / this.getAllTotal) * 100);
                                this.getAllCount = dlRecCount;
                                this.evServ.destroy('frDLResItems');
                                startDLMy();
                                break;
                            }
                    }
                }));
                this.nowDataTarget = dlRecListArr[dlRecCount].ep.match(/[A-Z][a-z]+|[0-9]+/g).join(' ');
                this.thisDataValue = 0;
                this.thisDataMax = dlRecListArr[dlRecCount].value;
                this.logger.info('[Modal|FirstRun|startDownloadProcess] 📓 (Records) RESOURCE | 🔽DOWNLOAD >>> ' + dlRecListArr[dlRecCount].ep + '...');
                this.deputy.frDLResItems(dlRecCount + 1, this.getAllTotal, dlRecListArr[dlRecCount].ep, dlRecListArr[dlRecCount].max, dlRecListArr[dlRecCount].value);
            };
            // DOWNLOAD - My ------------------------------------------------------------------
            const startDLMy = () => (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
                const finishMy = () => { this.logger.info('[Modal|firstRun|DL] 📓 (Records) OTHER MY | ✅ DOWNLOAD >>> ' + ttlOtherMyRecs + ' Remaining | FINISHED.'); this.nowDataTarget = 'Completed'; this.thisDataMax = -1; this.thisDataValue = -1; this.getThisPBar = 1; this.getAllPBar = 1; this.getAllCount = dlRecCount; this.getAllPerc = 100; this.dlMyRunning = false; doDLCompleted(false); };
                const ttlOtherMyRecs = dlMyListArr.length;
                let orsMyDoneCount = 0;
                if (ttlOtherMyRecs > 0) { // any of colleague,leave||notification||unavail
                    this.logger.info('[Modal|firstRun|DL] 📓 (Records) OTHER MY | FOUND ' + dlMyListArr.length + ' >>> Processing...');
                    for (let i = 0; i < dlMyListArr.length; i++) {
                        const myEPO = dlMyListArr[i];
                        const mName = myEPO.name;
                        const mCount = myEPO.count;
                        const mData = myEPO.data;
                        this.logger.info('[Modal|firstRun|DL] 📓 (Records) OTHER MY | Starting "' + mName + '" (' + i + '/' + ttlOtherMyRecs + ') >>> ' + mCount + ' Records...');
                        if (mName === 'colleague') {
                            if (!myEPO.error && myEPO.type === 'array') {
                                this.logger.info('[Modal|firstRun|DL] 📓 (Records) OTHER MY | colleague | FOUND [' + mCount + '] 🧑s');
                                this.nowDataTarget = 'Colleague';
                                this.thisDataValue = 0;
                                this.thisDataMax = mCount;
                                this.getThisPBar = 0;
                                let pplLocalImgArr = [];
                                for (let i = 0; i < mData.length; i++) {
                                    let rawColO = mData[i];
                                    if (rawColO.hasOwnProperty('Photo') && rawColO.Photo.length > 8) {
                                        let finalN;
                                        let rawN = rawColO.Photo.split('?')[0].split('/')[rawColO.Photo.split('?')[0].split('/').length - 1];
                                        if (rawN === 'avatar') {
                                            finalN = 'avatar' + String(rawColO.EmpId);
                                        }
                                        else {
                                            finalN = 'avatar' + String(rawColO.EmpId) + '.' + rawN.split('.')[1];
                                        }
                                        ;
                                        const { result, uri, size, mtime } = yield this.fsServ.dlImage4SQLite(String(rawColO.Photo), finalN);
                                        if (result) {
                                            const sLIRes = yield this.sqlServ.setLocalImg(finalN, uri, size, mtime);
                                            if (sLIRes) {
                                                this.convImgs.push(uri);
                                                rawColO.Photo = uri;
                                                pplLocalImgArr.push(rawColO);
                                            }
                                            else {
                                                this.convImgs.push(rawColO.Photo);
                                                pplLocalImgArr.push(rawColO);
                                            }
                                        }
                                        else {
                                            rawColO.Photo;
                                            pplLocalImgArr.push(rawColO);
                                        }
                                    }
                                    else {
                                        rawColO.Photo;
                                        pplLocalImgArr.push(rawColO);
                                    }
                                    ;
                                    this.thisDataValue = Number(i + 1);
                                    this.getThisPBar = (((this.thisDataValue / mCount) + Number.EPSILON) * 100) / 100;
                                }
                                ;
                                let insDBDataRes = yield this.sqlServ.insDPTblSet(mName, pplLocalImgArr);
                                let insResSym;
                                insDBDataRes ? insResSym = '🟢' : insResSym = '🔴';
                                this.logger.info('[Modal|firstRun|DL] 📓 (Records) MY | 🔀INSERT🧑 >>> ' + mName + ' SET ' + insResSym);
                                orsMyDoneCount++;
                                dlRecCount++;
                                this.getThisPBar = 1;
                                dlRecTotalNoRecords -= mCount;
                                this.getAllPerc = Math.round((dlRecCount / this.getAllTotal) * 100);
                                this.getAllPBar = (((dlRecCount / this.getAllTotal) + Number.EPSILON) * 100) / 100;
                            }
                            else {
                                this.nowDataTarget = 'Skipped';
                                this.thisDataValue = -1;
                                this.thisDataMax = -1;
                                this.getThisPBar = 1;
                                this.getAllTotal--;
                                this.getAllPerc = Math.round((dlRecCount / this.getAllTotal) * 100);
                                this.getAllPBar = (((dlRecCount / this.getAllTotal) + Number.EPSILON) * 100) / 100;
                                this.logger.info('[Modal|firstRun|DL] 📓 (Records) OTHER MY | ❌ ' + mName + ' Obj error=true||type!==Array');
                            }
                        }
                        else if (mName === 'leave' || 'notification' || 'unavail') {
                            if (!myEPO.error && myEPO.type === 'array') {
                                let myI;
                                mName === 'name' ? myI = '🤷' : mName === 'leave' ? myI = '🏝️' : myI = '🔔';
                                this.logger.info('[Modal|firstRun|DL] 📓 (Records) OTHER MY | ' + mName + ' | FOUND [' + mCount + '] ' + myI + 's');
                                this.nowDataTarget = mName.charAt(0).toUpperCase() + mName.slice(1);
                                this.thisDataValue = 0;
                                this.thisDataMax = mCount;
                                this.getThisPBar = 0;
                                let insDBDataRes = yield this.sqlServ.insDPTblSet(mName, mData);
                                let insResSym;
                                insDBDataRes ? insResSym = '🟢' : insResSym = '🔴';
                                this.logger.info('[Modal|firstRun|DL] 📓 (Records) MY | 🔀INSERT' + myI + ' >>> ' + mName + ' SET ' + insResSym);
                                this.thisDataValue = mCount;
                                this.getThisPBar = 1;
                                orsMyDoneCount++;
                                dlRecCount++;
                                this.getThisPBar = 1;
                                dlRecTotalNoRecords -= mCount;
                                this.getAllPerc = Math.round((dlRecCount / this.getAllTotal) * 100);
                                this.getAllPBar = (((dlRecCount / this.getAllTotal) + Number.EPSILON) * 100) / 100;
                            }
                            else {
                                this.nowDataTarget = 'Skipped';
                                this.thisDataValue = -1;
                                this.thisDataMax = -1;
                                this.getThisPBar = 1;
                                this.getAllTotal--;
                                this.getAllPerc = Math.round((dlRecCount / this.getAllTotal) * 100);
                                this.getAllPBar = (((dlRecCount / this.getAllTotal) + Number.EPSILON) * 100) / 100;
                                this.logger.info('[Modal|firstRun|DL] 📓 (Records) OTHER MY | ❌ ' + mName + ' Obj error=true||type!==Array');
                            }
                        }
                    }
                    ;
                    finishMy();
                }
                else {
                    finishMy();
                }
            });
            // DOWNLOAD - Finished ---------------------------------------------------------------
            const doDLCompleted = (impBU) => (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
                this.finalModalData.dlDone = true;
                this.dlDidComplete = true;
                this.dloadInProgress = false;
                this.dlBoxInProgress = false;
                this.dlBoxError = false;
                if (!impBU) {
                    this.nowDataTarget = '';
                    this.thisDataValue = 0;
                    this.thisDataMax = 0;
                    this.getAllPBar = 1;
                    this.getAllPerc = 100;
                    this.getAllCount = this.getAllTotal;
                    this.dlBoxSuccess = true;
                    this.dlMyRunning = false;
                    this.dbImportDone = false;
                    this.finalModalData.dbImported = false;
                    jquery__WEBPACK_IMPORTED_MODULE_20__('#firstrun-download-progress-bar-perc-overlay').css('color', 'var(--ion-color-success)');
                    jquery__WEBPACK_IMPORTED_MODULE_20__('.frpbar').css('--progress-background', 'var(--ion-color-success)');
                    jquery__WEBPACK_IMPORTED_MODULE_20__('.xoy').css('color', 'var(--ion-color-success)');
                    this.evServ.subscribe('dbbuBlob', blob => {
                        this.evServ.destroy('dbbuBlob');
                        this.evServ.subscribe('dbbuULProg', ulD => {
                            if (ulD.event === 'successData') {
                                this.evServ.destroy('dbbuULProg');
                                this.logger.info('[firstRun|uploadDBBU] (SUCCESS) - Uploaded DBBU file to FireStorage');
                            }
                            ;
                            if (ulD.event === 'errorData') {
                                this.evServ.destroy('dbbuULProg');
                                this.logger.info('[firstRun|uploadDBBU] (ERROR) - Failed to Upload DBBU file to FireStorage');
                            }
                            ;
                        });
                        this.fireServ.uploadFSDBBU(blob);
                    });
                    this.fsServ.getFireDBBUFile(this.deputy.uUK);
                }
                else {
                    this.dbImportDone = true;
                    this.finalModalData.dbImported = true;
                    this.showMoreOpts = false;
                    this.dlBoxSuccess = false;
                    const dbHasSett = yield this.sqlServ.hasSettings();
                    if (dbHasSett) {
                        const getSettRes = yield this.sqlServ.getSettings();
                        if (getSettRes.result) {
                            const settObj = getSettRes.data;
                            if (settObj.hasOwnProperty('alerts') && settObj.alerts.hasOwnProperty('options')) {
                                this.logger.info('[firstRun|RestoreSettingsObj] (🟢SUCCESS) - Imported Settings Found in UDB');
                                this.finalModalData.alertOpts = settObj.alerts.options;
                            }
                        }
                    }
                }
                ;
                const dlDoneCalPermStatus = yield this.calServ.checkCalPerms();
                this.slideWithNav.lockSwipes(false);
                setTimeout(() => {
                    this.slideWithNav.slideTo(2, 500, true);
                    if (!this.usingDefaults && this.finalModalData.alertOpts.alertMethods.value.calendar && !dlDoneCalPermStatus) {
                        setTimeout(() => (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () { this.calServ.reqCalPerms(); }), 1500);
                    }
                    ;
                }, 1000);
            });
            // DOWNLOAD - Start -----------------------------------------------------------------
            this.evServ.subscribe('preDLChecks', didImport => {
                this.evServ.destroy('preDLChecks');
                this.logger.info('[Modal|firstRun|StartDl|preDLChecks] (didImport?): ' + didImport);
                if (didImport) {
                    this.dbImportDone = true;
                    doDLCompleted(true);
                }
                else {
                    this.dbImportDone = false;
                    startDLResources();
                }
                ;
                this.evServ.subscribe('dlConvAvasFinished', (avaDLRes) => (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
                    if (avaDLRes.result) {
                        let deetAvaO = { me: '', work: '' };
                        const meAvaStatRes = yield _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_17__.Filesystem.stat({ path: 'file:///storage/emulated/0/Android/data/dev.zer0ne.sheriff/files/Sheriff/assets/meAvatar' });
                        if (meAvaStatRes) {
                            const meUriRes = _capacitor_core__WEBPACK_IMPORTED_MODULE_3__.Capacitor.convertFileSrc(meAvaStatRes.uri);
                            const meAvaLIRes = yield this.sqlServ.setLocalImg('meAvatar', meUriRes, meAvaStatRes.size, meAvaStatRes.mtime);
                            if (meAvaLIRes) {
                                this.convImgs.push(meUriRes);
                                deetAvaO.me = meUriRes;
                                this.dS.setAvas(deetAvaO);
                                this.storeServ.setItem(this.deputy.uUK + 'meAvatar', deetAvaO.me);
                            }
                            else {
                                this.logger.info('[Modal|frModal|DL|AvaConv] Failed to Insert meAvatar >>> SQLite.');
                            }
                        }
                        else {
                            this.logger.info('[Modal|frModal|DL|AvaConv] Failed to Stat meAvatar File - Skipped SQLite Insert.');
                        }
                        ;
                        const workAvaStatRes = yield _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_17__.Filesystem.stat({ path: 'file:///storage/emulated/0/Android/data/dev.zer0ne.sheriff/files/Sheriff/assets/workAvatar' });
                        if (workAvaStatRes) {
                            const workUriRes = _capacitor_core__WEBPACK_IMPORTED_MODULE_3__.Capacitor.convertFileSrc(workAvaStatRes.uri);
                            const workAvaLIRes = yield this.sqlServ.setLocalImg('workAvatar', workUriRes, workAvaStatRes.size, workAvaStatRes.mtime);
                            if (workAvaLIRes) {
                                this.convImgs.push(workUriRes);
                                deetAvaO.work = workUriRes;
                                this.dS.setAvas(deetAvaO);
                                this.storeServ.setItem(this.deputy.uUK + 'workAvatar', deetAvaO.work);
                            }
                            else {
                                this.logger.info('[Modal|frModal|DL|AvaConv] Failed to Insert workAvatar >>> SQLite.');
                            }
                        }
                        else {
                            this.logger.info('[Modal|frModal|DL|AvaConv] Failed to Stat workAvatar File - Skipped SQLite Insert.');
                        }
                    }
                    else {
                        this.logger.info('[Modal|frModal|DL|AvaConv] Failed to DL/Convert Me/Work Avas - Skipping SQLite Inserts.');
                    }
                }));
                this.deputy.dlConvertMeWorkAvas();
            });
            this.slideWithNav.lockSwipes(true);
            if (this.noBackupWillFail && this.mustRestoreStatus === 'success') {
                this.evServ.publish('preDLChecks', true);
            }
            else {
                this.initDB(false);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    useDefaults() {
        this.logger.info('[Modal|firstRun|restoreBUStart] ()...');
        this.doShowPager = false;
        this.lockPrev = true;
        this.lockNext = true;
        this.usingDefaults = true;
        this.evServ.subscribe('backupCheckIsDone', () => {
            if (this.hasBUDB) {
                this.restoreBUStart();
            }
            else {
                this.freshStartDLStart('all');
            }
            ;
            this.evServ.subscribe('defaultAutoFinish', () => (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
                if (this.finalModalData.alertOpts.alertMethods.value.calendar) {
                    const hasCalPerms = yield this.calServ.checkCalPerms();
                    if (!hasCalPerms) {
                        const calPResSub = this.evServ.subscribe('myAppStateActive', tf => { if (tf) {
                            setTimeout(() => { calPResSub.unsubscribe(); this.firstRunCompleted(); }, 500);
                        } });
                        setTimeout(() => { this.calServ.reqCalPerms(); }, 500);
                    }
                    else {
                        this.firstRunCompleted();
                    }
                }
                else {
                    this.firstRunCompleted();
                }
            }));
        });
        this.slideWithNav.slideNext(250, true);
    }
    //////////////////////////////////////////////////////////////////////////////////////
    restoreBUStart() {
        this.logger.info('[Modal|firstRun|restoreBUStart] ()...');
        this.showMoreOpts = false;
        if (this.startFreshChecked) {
            this.startFreshChecked = false;
        }
        ;
        if (!this.hasBUDB) {
            this.hasBUDB = true;
        }
        ;
        if (!this.buDBChecked) {
            this.buDBChecked = true;
        }
        ;
        this.selectDataScope = 'all';
        this.startDownloadProcess();
    }
    //////////////////////////////////////////////////////////////////////////////////////
    freshStartDLStart(fsMode) {
        this.logger.info('[Modal|firstRun|freshStartDLStart] (' + fsMode + ')...');
        this.showMoreOpts = false;
        if (this.buDBChecked) {
            this.buDBChecked = false;
        }
        ;
        if (!this.startFreshChecked) {
            this.startFreshChecked = true;
        }
        ;
        this.selectDataScope = fsMode;
        this.startDownloadProcess();
    }
    //////////////////////////////////////////////////////////////////////////////////////
    initDB(mustImport) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|firstRun|initDB] ()...');
            const udbName = this.deputy.uUK + 'db';
            const doInit = (buImport) => (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
                this.logger.info('[firstRun|initDB->SQLServ] Running createUserDBConn(' + udbName + ',' + buImport + ') @ SQLiteService.');
                this.evServ.subscribe('uDBReady', isReady => {
                    if (isReady === true) {
                        this.loadCtrl.dismiss();
                        this.evServ.publish('preDLChecks', buImport);
                    }
                    else {
                        _capacitor_dialog__WEBPACK_IMPORTED_MODULE_5__.Dialog.alert({ title: 'Database Error', message: 'Check you have granted (ALLOW) Sheriff file-system permissions and try again.', buttonTitle: 'OK' });
                    }
                });
                let dbA;
                buImport ? dbA = '🔽𝗜𝗠𝗣𝗢𝗥' : dbA = '▶️𝗖𝗥𝗘𝗔';
                const dbInitLoader = yield this.loadCtrl.create({ spinner: 'dots', cssClass: 'sheriff-loader-class', message: dbA + '𝗧𝗜𝗡𝗚 𝖣𝖺𝗍𝖺𝖻𝖺𝗌𝖾' });
                yield dbInitLoader.present();
                this.sqlServ.createUserDBConn(udbName, buImport);
            });
            if (this.hasBUDB && this.buDBChecked && !this.startFreshChecked) {
                this.evServ.subscribe('dbCopyCheck', cR => {
                    this.evServ.destroy('dbCopyCheck');
                    if (mustImport) {
                        if (cR) {
                            this.sqlServ.createUserDBConn(udbName, true);
                        }
                        else {
                            this.evServ.publish('uDBReady', false);
                        }
                    }
                    else {
                        doInit(cR);
                    }
                });
                this.cpBuDb2App();
            }
            else if (!this.buDBChecked && this.startFreshChecked) {
                doInit(false);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    cpBuDb2App() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|firstRun|copyCheckDBFile] ()...');
            const appDBDirPath = '/data/data/dev.zer0ne.sheriff/databases';
            if (!(yield this.fsServ.stat(null, appDBDirPath)).result) {
                this.fsServ.mkdir(null, appDBDirPath);
            }
            ;
            this.fsServ.copyByPath(this.buDBUri, appDBDirPath + '/' + this.deputy.uUK + 'dbSQLite.db');
            let toC = 0;
            const sizeCheckLoop = setInterval(() => (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
                toC++;
                const isCopiedRes = yield this.fsServ.stat(null, appDBDirPath + '/' + this.deputy.uUK + 'dbSQLite.db');
                if (isCopiedRes.result) {
                    if (isCopiedRes.data.size === this.buDBSize) {
                        clearInterval(sizeCheckLoop);
                        this.evServ.publish('dbCopyCheck', true);
                    }
                }
                else {
                    clearInterval(sizeCheckLoop);
                    this.evServ.publish('dbCopyCheck', false);
                }
                ;
                if (toC === 20) {
                    clearInterval(sizeCheckLoop);
                    this.evServ.publish('dbCopyCheck', false);
                }
            }), 250);
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    doMustImport() {
        this.logger.info('[Modal|firstRun|doMustImport] ()...');
        this.evServ.subscribe('uDBReady', (isReady) => (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
            this.evServ.destroy('uDBReady');
            if (isReady) {
                this.mustRestoreStatus = 'loaded';
                const getWPRes = yield this.sqlServ.getAllCompanies();
                if (getWPRes.length > 0) {
                    this.forceRestoreWPArr = getWPRes;
                    const selByPortNo = (0,lodash__WEBPACK_IMPORTED_MODULE_19__.minBy)(getWPRes, 'Portfolio');
                    selByPortNo.Portfolio > 0 ? this.forceRestoreWP = selByPortNo : this.forceRestoreWP = getWPRes[0];
                    this.wpNoOf = 1;
                    this.frWorkplaceId = this.forceRestoreWP.Id;
                    if (this.forceRestoreWP.TradingName && !this.forceRestoreWP.CompanyName) {
                        this.forceRestoreWPName = this.forceRestoreWP.TradingName;
                    }
                    else if (!this.forceRestoreWP.TradingName && this.forceRestoreWP.CompanyName) {
                        this.forceRestoreWPName = this.forceRestoreWP.CompanyName;
                    }
                    else if (this.forceRestoreWP.TradingName && this.forceRestoreWP.CompanyName) {
                        this.forceRestoreWP.TradingName.length >= this.forceRestoreWP.CompanyName.length ? this.forceRestoreWPName = this.forceRestoreWP.TradingName : this.forceRestoreWPName = this.forceRestoreWP.CompanyName;
                    }
                    else {
                        this.forceRestoreWPName = 'Unknown Company';
                    }
                    ;
                    this.mustRestoreStatus = 'success';
                    setTimeout(() => { this.startDownloadProcess(); }, 500);
                }
                else {
                    this.mustRestoreStatus = 'failed';
                }
            }
            else {
                this.mustRestoreStatus = 'failed';
            }
        }));
        this.initDB(true);
    }
    //////////////////////////////////////////////////////////////////////////////////////
    niceBytes(bytes, decimals = 2) { if (bytes === 0)
        return 'empty'; const k = 1024; const dm = decimals < 0 ? 0 : decimals; const sizes = ['Bytes', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']; const i = Math.floor(Math.log(bytes) / Math.log(k)); return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i]; }
    //////////////////////////////////////////////////////////////////////////////////////
    checkAppFS() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|firstRun|checkAppFS] ()...');
            if (!this.checkFSAndBUOnce) {
                const doDLBUDB = () => (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
                    const checkFireBULoader = yield this.loadCtrl.create({ spinner: 'dots', cssClass: ['sheriff-loader-class', 'fr-backupcheck-loader'], message: '𝘓𝘰𝘢𝘥𝘪𝘯𝘨 🗄️𝗥𝗘𝗖𝗢𝗥𝗗𝗦 𝖣𝖺𝗍𝖺' });
                    yield checkFireBULoader.present();
                    this.evServ.subscribe('checkFSDBBU', (checkRes) => (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
                        this.evServ.destroy('checkFSDBBU');
                        if (checkRes.result) {
                            const buMeta = checkRes.data.meta;
                            this.evServ.subscribe('dlFSDBBU', (dlRes) => (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
                                this.evServ.destroy('dlFSDBBU');
                                if (dlRes.result) {
                                    this.hasBUDB = true;
                                    this.buDBUri = dlRes.uri;
                                    this.buDBNiceFName = 'CloudBackup.db';
                                    this.buDBSize = buMeta.size;
                                    this.buDBFSize = this.niceBytes(buMeta.size);
                                    const buDate = new Date(buMeta.updated);
                                    this.buDBModDate = this.dT.format(buDate, 'd MMM yyyy h:mmaaa');
                                    this.buDBModAgo = this.dT.fDtN(buDate).replace('about', '≈');
                                    this.logger.info('[firstRun|checkAppFS] Fire BUDB [FOUND!] (Last Mod: ' + this.buDBModDate + ' - ' + this.buDBModAgo + ')...');
                                    checkFireBULoader.dismiss().then(() => {
                                        this.backupCheckIsDone = true;
                                        this.evServ.publish('backupCheckIsDone', true);
                                        if (this.noBackupWillFail) {
                                            this.doMustImport();
                                        }
                                        ;
                                    });
                                }
                                else {
                                    this.logger.info('[firstRun|checkAppFS] Download Fire BUDB Failed.');
                                    this.hasBUDB = false;
                                    checkFireBULoader.dismiss().then(() => (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
                                        this.backupCheckIsDone = true;
                                        this.evServ.publish('backupCheckIsDone', true);
                                        if (this.noBackupWillFail) {
                                            const { value } = yield _capacitor_dialog__WEBPACK_IMPORTED_MODULE_5__.Dialog.confirm({ title: 'No Backup Found', message: '- No Cloud Backup Found\n- No Workplaces Detected\nSheriff Setup cannot continue and will now EXIT' });
                                            if (value || !value) {
                                                _capacitor_app__WEBPACK_IMPORTED_MODULE_7__.App.exitApp();
                                            }
                                            ;
                                        }
                                        ;
                                    }));
                                }
                            }));
                            this.fireServ.downloadFSDBBU(checkRes.data.dlurl);
                        }
                        else {
                            this.logger.info('[firstRun|checkAppFS] No Fire BUDB Found.');
                            this.hasBUDB = false;
                            checkFireBULoader.dismiss().then(() => (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
                                this.backupCheckIsDone = true;
                                this.evServ.publish('backupCheckIsDone', true);
                                if (this.noBackupWillFail) {
                                    const { value } = yield _capacitor_dialog__WEBPACK_IMPORTED_MODULE_5__.Dialog.confirm({ title: 'No Backup Found', message: '- No Cloud Backup Found\n- No Workplaces Detected\nSheriff Setup cannot continue and will now EXIT' });
                                    if (value || !value) {
                                        _capacitor_app__WEBPACK_IMPORTED_MODULE_7__.App.exitApp();
                                    }
                                    ;
                                }
                                ;
                            }));
                        }
                    }));
                    this.fireServ.checkFSDBBU();
                });
                const doDirCheck = () => (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
                    const hasBaseDataDir = yield this.fsServ.stat(this.fsServ.appFS, 'Sheriff');
                    if (!hasBaseDataDir.result) {
                        let hasBUDir = false;
                        this.logger.info('[firstRun|checkAppFS] Sheriff Base Dir Missing - Creating FS...');
                        const assetsDone = yield this.fsServ.mkdir(this.fsServ.appFS, 'Sheriff/assets');
                        if (assetsDone.result) {
                            this.logger.info('[firstRun|checkAppFS] Sheriff/assets - OK.');
                        }
                        else {
                            this.logger.info('[firstRun|checkAppFS] Sheriff/assets - FAILED.');
                        }
                        ;
                        const backupsDone = yield this.fsServ.mkdir(this.fsServ.appFS, 'Sheriff/backups');
                        if (backupsDone.result) {
                            hasBUDir = true;
                            this.logger.info('[firstRun|checkAppFS] Sheriff/backups - OK.');
                        }
                        else {
                            hasBUDir = false;
                            this.logger.info('[firstRun|checkAppFS] Sheriff/backups - FAILED.');
                        }
                        ;
                        const dbDone = yield this.fsServ.mkdir(this.fsServ.appFS, 'Sheriff/db');
                        if (dbDone.result) {
                            this.logger.info('[firstRun|checkAppFS] Sheriff/db - OK.');
                        }
                        else {
                            this.logger.info('[firstRun|checkAppFS] Sheriff/db - FAILED.');
                        }
                        ;
                        if (hasBUDir) {
                            this.logger.info('[firstRun|checkAppFS] SheriffFS BU Dir Created - Checking for BUDB...');
                            doDLBUDB();
                        }
                    }
                    else {
                        this.logger.info('[firstRun|checkAppFS] SheriffFS Base Dir Found - Checking for BUDB...');
                        doDLBUDB();
                    }
                });
                this.checkFSAndBUOnce = true;
                if (this.fsServ.fsIsReady) {
                    doDirCheck();
                }
                else {
                    this.evServ.subscribe('fsPermsGranted', result => { if (result) {
                        doDirCheck();
                    } });
                    setTimeout(() => { this.fsServ.initFS(this.deputy.uUK); }, 500);
                }
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    logoutAndSwitch() {
        this.logger.info('[Modal|FirstRun|exitSheriff] ()...');
        const exitPromptOpts = { title: 'Logging out', message: 'ALL details/data will be cleared - are you sure?', okButtonTitle: 'Yes', cancelButtonTitle: 'Cancel' };
        _capacitor_dialog__WEBPACK_IMPORTED_MODULE_5__.Dialog.confirm(exitPromptOpts).then((wasConfirmed) => (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () { if (wasConfirmed.value) {
            yield this.modalController.dismiss('logout');
        } }));
    }
    //////////////////////////////////////////////////////////////////////////////////////
    exitSheriff() {
        this.logger.info('[Modal|FirstRun|exitSheriff] ()...');
        const exitPromptOpts = { title: 'Exiting Sheriff', message: 'You sure now?', okButtonTitle: 'Yes', cancelButtonTitle: 'Cancel' };
        _capacitor_dialog__WEBPACK_IMPORTED_MODULE_5__.Dialog.confirm(exitPromptOpts).then(wasConfirmed => { if (wasConfirmed.value) {
            _capacitor_app__WEBPACK_IMPORTED_MODULE_7__.App.exitApp();
        } });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    firstRunCompleted() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|FirstRun|firstRunCompleted] ()...');
            jquery__WEBPACK_IMPORTED_MODULE_20__('.sheriff-custom-firstload-outter-wrapper').css('display', 'flex');
            this.finalModalData.dbImported = this.dbImportDone;
            this.finalModalData.didDefaults = this.usingDefaults;
            if (this.finalModalData.alertOpts.alertMethods.value.calendar) {
                const calPermsGtd = yield this.calServ.checkCalPerms();
                if (!calPermsGtd) {
                    this.finalModalData.alertOpts.alertMethods.value.calendar = false;
                }
                ;
                yield this.modalController.dismiss(this.finalModalData);
            }
            else {
                yield this.modalController.dismiss(this.finalModalData);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    slideNext(slideInst) {
        this.logger.info('[Modal|firstRun|slideNext] (⏩)...');
        slideInst.slideNext(500, true);
    }
    //////////////////////////////////////////////////////////////////////////////////////
    slidePrev(slideInst) {
        this.logger.info('[Modal|firstRun|slidePrev] (⏪)...');
        slideInst.slidePrev(500, true);
    }
    //////////////////////////////////////////////////////////////////////////////////////
    slideDidChange(slideInst) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|firstRun|slideDidChange] [✔️DID]Change ()...');
            this.thisSlideNo = (yield slideInst.getActiveIndex()) + 1;
            this.logger.info('[Modal|firstRun|slideDidChange] TO... this.thisSlideNo = 🔢' + this.thisSlideNo) + '🔢';
            this.checkSlideConditions();
            this.doPrevNextCheck();
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    checkSlideConditions() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|firstRun|checkSlideConditions] ()...');
            jquery__WEBPACK_IMPORTED_MODULE_20__('.fr-featimg-wrapper.slide' + String(this.thisSlideNo)).fadeIn(1000);
            let swInst = yield this.slideWithNav.getSwiper();
            let swTStartEv, swTEndEv;
            if (this.thisSlideNo === 3) {
                let swipedir, startX, startY, distX, distY, threshold = 150, restraint = 100, allowedTime = 300, elapsedTime, startTime;
                swTStartEv = swInst.on('touchStart', tStartData => { let stObj = tStartData.changedTouches[0]; swipedir = 'none'; startX = stObj.pageX; startY = stObj.pageY; startTime = new Date().getTime(); });
                swTEndEv = swInst.on('touchEnd', tEndData => {
                    let eTObj = tEndData.changedTouches[0];
                    distX = eTObj.pageX - startX;
                    distY = eTObj.pageY - startY;
                    elapsedTime = new Date().getTime() - startTime;
                    if (elapsedTime <= allowedTime) {
                        if (Math.abs(distX) >= threshold && Math.abs(distY) <= restraint) {
                            swipedir = (distX < 0) ? 'left' : 'right';
                        }
                        else if (Math.abs(distY) >= threshold && Math.abs(distX) <= restraint) {
                            swipedir = (distY < 0) ? 'up' : 'down';
                        }
                    }
                    ;
                    if (swipedir === 'left') {
                        this.firstRunCompleted();
                    }
                });
            }
            else {
                swInst.off('touchStart', swTStartEv);
                swInst.off('touchEnd', swTEndEv);
            }
            ;
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    doPrevNextCheck() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|firstRun|doPrevNextCheck] ()...');
            const lockPrev = (tf) => { this.slideWithNav.lockSwipeToPrev(tf); this.lockPrev = tf; this.logger.info('[canPREV] - lockSwipeToPrev=' + tf + ' + this.lockPrev=' + tf + '...'); };
            const lockNext = (tf) => { this.slideWithNav.lockSwipeToNext(tf); this.lockNext = tf; this.logger.info('[canNEXT] - lockSwipeToNext=' + tf + ' + this.lockNext=' + tf + '...'); };
            // ----- Slide 1 ---------------------------------
            if (this.thisSlideNo === 1) {
                lockPrev(true);
                if (this.wpNoOf < 1) {
                    if (this.noBackupWillFail) {
                        lockNext(false);
                    }
                    else {
                        lockNext(true);
                    }
                }
                else if (this.wpNoOf >= 1) {
                    if (this.wpOneIsChecked) {
                        lockNext(false);
                    }
                    else {
                        lockNext(true);
                    }
                }
                ;
                return Promise.resolve(true);
                // ----- Slide 2 ---------------------------------
            }
            else if (this.thisSlideNo === 2) {
                if (this.dlDidComplete) {
                    lockPrev(false);
                    lockNext(false);
                    return Promise.resolve(true);
                }
                else {
                    if (this.noBackupWillFail) {
                        lockPrev(true);
                        lockNext(true);
                    }
                    else {
                        lockPrev(false);
                        lockNext(true);
                    }
                    ;
                    if (!this.checkFSAndBUOnce) {
                        this.checkAppFS();
                    }
                    return Promise.resolve(true);
                }
                // ----- Slide 3 ---------------------------------
            }
            else if (this.thisSlideNo === 3) {
                this.lockNext = true;
                lockPrev(false);
                if (this.usingDefaults) {
                    this.evServ.publish('defaultAutoFinish', true);
                }
                ;
                return Promise.resolve(true);
            }
            else {
                this.thisSlideNo = (yield this.slideWithNav.getActiveIndex()) + 1;
                yield this.doPrevNextCheck();
                return Promise.resolve(true);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ionSlideEvent(event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Modal|firstRun|ionSlideEvent] (event)...');
            if (event.type === 'ionSlidesDidLoad') {
                this.logger.info('[Modal|firstRun|ionSlideEvent] - [SLIDER LOADED!]');
                jquery__WEBPACK_IMPORTED_MODULE_20__('.fr-records-alreadydone-notice-wrapper').hide();
                jquery__WEBPACK_IMPORTED_MODULE_20__('.fr-featimg-wrapper').hide();
                jquery__WEBPACK_IMPORTED_MODULE_20__('.fr-featimg-wrapper.slide1').show();
                this.sliderHasLoaded = true;
                this.hideSplash();
                this.evServ.subscribe('epTestsDone', () => {
                    this.evServ.destroy('epTestsDone');
                    if (this.wpCheckDone) {
                        this.doPrevNextCheck();
                    }
                    else {
                        this.evServ.subscribe('wpCheckDone', () => { this.evServ.destroy('wpCheckDone'); this.doPrevNextCheck(); });
                    }
                });
                this.getRecCatObj();
            }
            else if (event.type === 'ionSlideWillChange') {
                jquery__WEBPACK_IMPORTED_MODULE_20__('.fr-featimg-wrapper').fadeOut(1000);
                let thisOldSlideNo, thisNewSlideNo, thisSlideDir, dirArrow;
                thisOldSlideNo = (yield this.slideWithNav.getPreviousIndex()) + 1;
                thisNewSlideNo = (yield this.slideWithNav.getActiveIndex()) + 1;
                thisOldSlideNo < thisNewSlideNo ? thisSlideDir = 'fwd' : thisSlideDir = 'back';
                thisSlideDir === 'fwd' ? dirArrow = 'Slide ' + thisOldSlideNo + ' ⏩ Slide ' + thisNewSlideNo : dirArrow = 'Slide ' + thisNewSlideNo + ' ⏪ Slide ' + thisOldSlideNo;
                this.logger.info('[Modal|firstRun|ionSlideEvent] (ionSlideWillChange) [⏱️WILL]Change - ' + dirArrow);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    hideSplash() {
        this.logger.info('[Auth|hideSplash] ()...');
        _capacitor_status_bar__WEBPACK_IMPORTED_MODULE_6__.StatusBar.setOverlaysWebView({ overlay: true });
        _capacitor_status_bar__WEBPACK_IMPORTED_MODULE_6__.StatusBar.setBackgroundColor({ color: '#00000000' });
        jquery__WEBPACK_IMPORTED_MODULE_20__('#sheriff-auth-networkstatus-wrapper').addClass('adjust-for-auth-toolbar-overlay');
        const myAniCSS = (jqEle, animName) => new Promise((resolve) => { const animClassStr = 'animate__animated animate__' + animName + ' animate__faster'; jquery__WEBPACK_IMPORTED_MODULE_20__(jqEle).addClass(animClassStr); jquery__WEBPACK_IMPORTED_MODULE_20__(jqEle).on('animationend', () => { jquery__WEBPACK_IMPORTED_MODULE_20__(jqEle).removeClass(animClassStr); resolve('done'); }); });
        jquery__WEBPACK_IMPORTED_MODULE_20__('#sheriff-custom-splash-logo-img').removeClass('animate__animated animate__headShake animate__infinite');
        jquery__WEBPACK_IMPORTED_MODULE_20__('#sheriff-custom-splash-titletexttop-wrapper').addClass('animate__animated animate__slideOutUp animate__faster');
        jquery__WEBPACK_IMPORTED_MODULE_20__('#sheriff-custom-splash-zer0ne-wrapper').addClass('animate__animated animate__slideOutDown animate__faster');
        jquery__WEBPACK_IMPORTED_MODULE_20__('.bar-horizontal').addClass('finished');
        jquery__WEBPACK_IMPORTED_MODULE_20__('#sheriff-custom-splash-logo-img').prop('src', '../assets/img/slogo-g.png');
        jquery__WEBPACK_IMPORTED_MODULE_20__('.sheriff-cutom-splash-text-wrapper.texttop').removeClass('animate__slideInLeft').addClass('animate__slideOutLeft');
        jquery__WEBPACK_IMPORTED_MODULE_20__('.sheriff-cutom-splash-text-wrapper.textbottom').removeClass('animate__slideInRight').addClass('animate__slideOutRight');
        jquery__WEBPACK_IMPORTED_MODULE_20__('#sheriff-custom-splash-wrapper, .sheriff-col.custom-splash-col.middlelogocol').css('background', 'transparent');
        myAniCSS('#sheriff-custom-splash-wrapper', 'fadeOut').then(() => jquery__WEBPACK_IMPORTED_MODULE_20__('#sheriff-custom-splash-wrapper').hide());
    }
};
FirstRunPage.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_22__.ModalController },
    { type: _services_events_service__WEBPACK_IMPORTED_MODULE_10__.EventsService },
    { type: _services_sqlite_service__WEBPACK_IMPORTED_MODULE_11__.SQLiteService },
    { type: _services_deputy_service__WEBPACK_IMPORTED_MODULE_13__.DeputyService },
    { type: _services_storage_service__WEBPACK_IMPORTED_MODULE_15__.StorageService },
    { type: _services_filesystem_service__WEBPACK_IMPORTED_MODULE_18__.FileSystemService },
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_23__.NGXLogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_22__.LoadingController },
    { type: _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_4__.HTTP },
    { type: src_app_services_datetime_service__WEBPACK_IMPORTED_MODULE_12__.DateTimeService },
    { type: _services_calendar_service__WEBPACK_IMPORTED_MODULE_2__.CalendarService },
    { type: src_app_services_firebase_service__WEBPACK_IMPORTED_MODULE_14__.FirebaseService },
    { type: src_app_services_detail_service__WEBPACK_IMPORTED_MODULE_16__.DetailService },
    { type: src_app_services_app_service__WEBPACK_IMPORTED_MODULE_8__.AppService }
];
FirstRunPage.propDecorators = {
    slideWithNav: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_24__.ViewChild, args: ['slideWithNav', { static: false },] }],
    neverAskAgain: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_24__.ViewChild, args: ['neverAskAgain',] }],
    restoreBUDBCB: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_24__.ViewChild, args: ['restoreBUDBCB',] }],
    startFreshCB: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_24__.ViewChild, args: ['startFreshCB',] }],
    freshOptCBDefault: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_24__.ViewChild, args: ['freshOptCBDefault',] }],
    freshOptCBMore: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_24__.ViewChild, args: ['freshOptCBMore',] }],
    recDLRadio: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_24__.ViewChild, args: ['recDLOptsRadio',] }]
};
FirstRunPage = (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_24__.Component)({ selector: 'app-firstrun', template: _raw_loader_firstrun_page_html__WEBPACK_IMPORTED_MODULE_0__.default, styles: [_firstrun_page_scss__WEBPACK_IMPORTED_MODULE_1__.default] })
    //////////////////////////////////////////////////////////////////////////////////////
], FirstRunPage);



/***/ }),

/***/ 20811:
/*!****************************************************************!*\
  !*** ./src/app/modals/inapp-pushnote/inapp-pushnote.module.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InAppPushNoteModalModule": function() { return /* binding */ InAppPushNoteModalModule; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common/http */ 91841);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser */ 39075);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ 38583);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ 3679);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var _inapp_pushnote_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./inapp-pushnote.page */ 46098);








let InAppPushNoteModalModule = class InAppPushNoteModalModule {
};
InAppPushNoteModalModule = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule)({
        imports: [
            _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__.BrowserModule,
            _angular_common__WEBPACK_IMPORTED_MODULE_4__.CommonModule,
            _angular_forms__WEBPACK_IMPORTED_MODULE_5__.FormsModule,
            _ionic_angular__WEBPACK_IMPORTED_MODULE_6__.IonicModule,
            _angular_common_http__WEBPACK_IMPORTED_MODULE_7__.HttpClientModule
        ],
        declarations: [_inapp_pushnote_page__WEBPACK_IMPORTED_MODULE_0__.InAppPushNoteModal]
    })
], InAppPushNoteModalModule);



/***/ }),

/***/ 46098:
/*!**************************************************************!*\
  !*** ./src/app/modals/inapp-pushnote/inapp-pushnote.page.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InAppPushNoteModal": function() { return /* binding */ InAppPushNoteModal; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _raw_loader_inapp_pushnote_page_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !raw-loader!./inapp-pushnote.page.html */ 19234);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var src_app_services_datetime_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/app/services/datetime.service */ 12826);
/* harmony import */ var src_app_services_notifications_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/notifications.service */ 79744);
/* harmony import */ var src_app_services_events_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/events.service */ 80106);








////////////////////////////////////////////////////////////////////////////////////////////////////
let InAppPushNoteModal = class InAppPushNoteModal {
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    constructor(logger, modalCtrl, navParams, dT, noteServ, evServ, plt) {
        this.logger = logger;
        this.modalCtrl = modalCtrl;
        this.navParams = navParams;
        this.dT = dT;
        this.noteServ = noteServ;
        this.evServ = evServ;
        this.plt = plt;
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        this.modalId = 'inapp-pushnote-modal';
        this.modalPNote = null;
        this.modalTitle = null;
        this.modalBody = null;
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    ngOnInit() {
        this.logger.info('[Modal|InAppPushNote|ngOnInit] ()...');
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    ionViewDidEnter() {
        this.logger.info('[Modal|InAppPushNote|ionViewDidEnter] ()...');
        this.plt.ready().then(() => {
            this.modalPNote = this.navParams.get('pNote');
            this.modalTitle = this.modalPNote.title;
            this.modalBody = this.modalPNote.body;
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    closeModal() {
        this.logger.info('[Modal|InAppPushNote|closeModal] ()...');
        this.modalCtrl.dismiss(null, 'dismiss', this.modalId);
    }
};
InAppPushNoteModal.ctorParameters = () => [
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_4__.NGXLogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_5__.ModalController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_5__.NavParams },
    { type: src_app_services_datetime_service__WEBPACK_IMPORTED_MODULE_1__.DateTimeService },
    { type: src_app_services_notifications_service__WEBPACK_IMPORTED_MODULE_2__.NotificationsService },
    { type: src_app_services_events_service__WEBPACK_IMPORTED_MODULE_3__.EventsService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_5__.Platform }
];
InAppPushNoteModal = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.Component)({ selector: 'app-inapppushnotemodal', template: _raw_loader_inapp_pushnote_page_html__WEBPACK_IMPORTED_MODULE_0__.default })
    ////////////////////////////////////////////////////////////////////////////////////////////////////
], InAppPushNoteModal);



/***/ }),

/***/ 67170:
/*!******************************************************************!*\
  !*** ./src/app/modals/profilecsselect/profilecsselect.module.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ProfileCSSelectPageModule": function() { return /* binding */ ProfileCSSelectPageModule; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common/http */ 91841);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser */ 39075);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ 38583);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ 3679);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var _profilecsselect_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./profilecsselect.page */ 67536);








let ProfileCSSelectPageModule = class ProfileCSSelectPageModule {
};
ProfileCSSelectPageModule = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule)({
        imports: [
            _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__.BrowserModule,
            _angular_common__WEBPACK_IMPORTED_MODULE_4__.CommonModule,
            _angular_forms__WEBPACK_IMPORTED_MODULE_5__.FormsModule,
            _ionic_angular__WEBPACK_IMPORTED_MODULE_6__.IonicModule,
            _angular_common_http__WEBPACK_IMPORTED_MODULE_7__.HttpClientModule
        ],
        declarations: [_profilecsselect_page__WEBPACK_IMPORTED_MODULE_0__.ProfileCSSelectPage]
    })
], ProfileCSSelectPageModule);



/***/ }),

/***/ 67536:
/*!****************************************************************!*\
  !*** ./src/app/modals/profilecsselect/profilecsselect.page.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ProfileCSSelectPage": function() { return /* binding */ ProfileCSSelectPage; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _raw_loader_profilecsselect_page_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !raw-loader!./profilecsselect.page.html */ 2729);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var src_app_services_sqlite_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/app/services/sqlite.service */ 90636);






////////////////////////////////////////////////////////////////////////////////////////////////////
let ProfileCSSelectPage = class ProfileCSSelectPage {
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    constructor(logger, modalCtrl, navParams, sqlServ) {
        this.logger = logger;
        this.modalCtrl = modalCtrl;
        this.navParams = navParams;
        this.sqlServ = sqlServ;
        this.listData = [];
        this.selectedId = null;
        this.selectedSubT = null;
        this.minSBCs = 3;
        this.sbCs = 0;
        this.isSearch = false;
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    ngOnInit() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            const alertId = yield this.modalCtrl.getTop();
            this.alertId = alertId.id;
            this.listType = this.navParams.get('listType');
            console.log(this.navParams.get('selected'));
            this.selectedId = this.navParams.get('selected');
            if (this.listType === 'c') {
                this.labelProp = 'Country';
                if (this.selectedId !== null) {
                    this.selectedSubT = (yield this.sqlServ.getSingleCountry(this.selectedId)).data.Country;
                    this.noSelection = false;
                }
                else {
                    this.noSelection = true;
                }
                ;
            }
            else {
                this.labelProp = 'State';
                if (this.selectedId !== null) {
                    this.selectedSubT = (yield this.sqlServ.getSingleState(this.selectedId)).data.State;
                    this.noSelection = false;
                }
                else {
                    this.noSelection = true;
                }
                ;
                const cId = this.navParams.get('country');
                const stateListRes = (yield this.sqlServ.getStates(cId)).data;
                if (stateListRes.length > 0) {
                    let localListData = [];
                    for (let i = 0; i < stateListRes.length; i++) {
                        const stateO = stateListRes[i];
                        localListData.push({ id: stateO.Id, label: stateO.State, isChecked: false });
                    }
                    ;
                    if (!this.noSelection) {
                        const selSIndex = localListData.findIndex(sO => sO.id === this.selectedId);
                        if (selSIndex !== -1) {
                            localListData[selSIndex].isChecked = true;
                        }
                    }
                    ;
                    this.listData = localListData;
                }
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    countrySearch(inputVal) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            this.sbCs = inputVal.length;
            if (this.sbCs >= this.minSBCs) {
                this.listData = [];
                this.isSearch = true;
                let qCResList = [];
                const qCRes = yield this.sqlServ.qCountry(inputVal);
                if (qCRes.length > 0) {
                    for (let i = 0; i < qCRes.length; i++) {
                        const qC = qCRes[i];
                        qCResList.push({ id: qC.Id, label: qC.Country, isChecked: false });
                    }
                    ;
                    if (!this.noSelection) {
                        const selCIndex = qCResList.findIndex(cO => cO.Id === this.selectedId);
                        if (selCIndex !== -1) {
                            qCResList[selCIndex].isChecked = true;
                        }
                    }
                    ;
                    this.listData = qCResList;
                    this.isSearch = false;
                }
                else {
                    this.isSearch = false;
                }
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    cancelChange() { this.logger.info('[CANCEL]'); this.modalCtrl.dismiss(null, 'cancel', this.alertId); }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    selectItem(item) { this.modalCtrl.dismiss({ v: item.id, l: item.label }, 'new', this.alertId); }
};
ProfileCSSelectPage.ctorParameters = () => [
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_3__.NGXLogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__.ModalController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__.NavParams },
    { type: src_app_services_sqlite_service__WEBPACK_IMPORTED_MODULE_1__.SQLiteService }
];
ProfileCSSelectPage = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_5__.Component)({ selector: 'app-profilecsselect', template: _raw_loader_profilecsselect_page_html__WEBPACK_IMPORTED_MODULE_0__.default })
    ////////////////////////////////////////////////////////////////////////////////////////////////////
], ProfileCSSelectPage);



/***/ }),

/***/ 51568:
/*!***************************************************************!*\
  !*** ./src/app/popovers/datepresets/datepresets.component.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DatePresetsComponent": function() { return /* binding */ DatePresetsComponent; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _raw_loader_datepresets_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !raw-loader!./datepresets.component.html */ 29695);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ionic/angular */ 80476);





////////////////////////////////////////////////////////////////////////////////////////////////////
let DatePresetsComponent = class DatePresetsComponent {
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    constructor(logger, popover, navParams) {
        this.logger = logger;
        this.popover = popover;
        this.navParams = navParams;
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        this.presets = [
            { name: 'week', label: 'Week', selected: false },
            { name: 'fnight', label: 'FNight', selected: false },
            { name: 'month', label: 'Month', selected: false },
            { name: 'qtr', label: 'Qtr', selected: false },
            { name: 'half', label: 'Half', selected: false },
            { name: 'year', label: 'Year', selected: false },
            { name: 'all', label: 'All', selected: false },
        ];
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    ngOnInit() { this.selectedName = this.navParams.get('selectedName'); }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    ionViewWillEnter() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () { for (let i = 0; i < this.presets.length; i++) {
            this.presets[i].name === this.selectedName ? this.presets[i].selected = true : this.presets[i].selected = false;
        } });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    presetSelect(name, index) {
        this.logger.info('[DatePresets|presetSelect] (' + name + ')');
        for (let i = 0; i < this.presets.length; i++) {
            i === index ? this.presets[i].selected = true : this.presets[i].selected = false;
        }
        ;
        let isSame;
        this.selectedName === name ? isSame = true : isSame = false;
        this.closePopover(name, isSame);
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    closePopover(selName, selSame) {
        let myRole;
        selSame === true ? myRole = 'same' : myRole = 'new';
        this.popover.dismiss(selName, myRole);
    }
};
DatePresetsComponent.ctorParameters = () => [
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_2__.NGXLogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__.PopoverController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__.NavParams }
];
DatePresetsComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.Component)({ selector: 'app-datepresets', template: _raw_loader_datepresets_component_html__WEBPACK_IMPORTED_MODULE_0__.default })
    ////////////////////////////////////////////////////////////////////////////////////////////////////
], DatePresetsComponent);



/***/ }),

/***/ 70518:
/*!*************************************************************!*\
  !*** ./src/app/popovers/detailmenu/detailmenu.component.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DetailMenuComponent": function() { return /* binding */ DetailMenuComponent; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _raw_loader_detailmenu_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !raw-loader!./detailmenu.component.html */ 43482);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ionic/angular */ 80476);





////////////////////////////////////////////////////////////////////////////////////////////////////
let DetailMenuComponent = class DetailMenuComponent {
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    constructor(logger, popover, navParams) {
        this.logger = logger;
        this.popover = popover;
        this.navParams = navParams;
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    ngOnInit() {
        this.logger.info('[DetailMenu|ngOnInit] ()...');
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    closePopover(selected) {
        this.logger.info('[DetailMenu|closePopover] (' + selected + ')...');
        setTimeout(() => { this.popover.dismiss(selected); }, 250);
    }
};
DetailMenuComponent.ctorParameters = () => [
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_1__.NGXLogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_2__.PopoverController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_2__.NavParams }
];
DetailMenuComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.Component)({ selector: 'app-detailmenu', template: _raw_loader_detailmenu_component_html__WEBPACK_IMPORTED_MODULE_0__.default })
    ////////////////////////////////////////////////////////////////////////////////////////////////////
], DetailMenuComponent);



/***/ }),

/***/ 2925:
/*!*****************************************************************!*\
  !*** ./src/app/popovers/peopledetail/peopledetail.component.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PeopleDetailComponent": function() { return /* binding */ PeopleDetailComponent; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _raw_loader_peopledetail_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !raw-loader!./peopledetail.component.html */ 6318);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ionic/angular */ 80476);





////////////////////////////////////////////////////////////////////////////////////////////////////
let PeopleDetailComponent = class PeopleDetailComponent {
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    constructor(logger, popover, navParams) {
        this.logger = logger;
        this.popover = popover;
        this.navParams = navParams;
        this.people = [];
        this.pplConfStatus = [];
        this.logs = [];
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    ngOnInit() {
        this.logger.info('[Popover|PeopleDetail|ngOnInit] ()...');
        const rawPeople = this.navParams.get('people');
        console.log(rawPeople);
        const rawLogs = this.navParams.get('logs');
        console.log(rawLogs);
        const rawConfReq = this.navParams.get('confReq');
        console.log(rawConfReq);
        const rawMeConf = this.navParams.get('meConf');
        console.log(rawMeConf);
        const rawMe = this.navParams.get('me');
        console.log(rawMe);
        this.myEmpId = rawMe.obj.EmployeeId;
        console.log(this.myEmpId);
        if (rawConfReq) {
            for (let p = 0; p < rawPeople.length; p++) {
                const pId = rawPeople[p]['Employee'];
                let hasConf;
                const pLog = rawLogs.filter(l => l.User === pId);
                if (pLog.length > 0) {
                    hasConf = pLog[0]['Confirmed'];
                }
                else {
                    hasConf = null;
                }
                ;
                this.pplConfStatus.push(hasConf);
            }
        }
        console.log(this.people.length);
        console.log(this.pplConfStatus.length);
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    closePopover() {
        this.logger.info('[Popover|PeopleDetail|closePopover] ()...');
        this.popover.dismiss({ data: null, role: 'dismiss' });
    }
};
PeopleDetailComponent.ctorParameters = () => [
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_1__.NGXLogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_2__.PopoverController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_2__.NavParams }
];
PeopleDetailComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.Component)({ selector: 'app-peopledetail', template: _raw_loader_peopledetail_component_html__WEBPACK_IMPORTED_MODULE_0__.default })
    ////////////////////////////////////////////////////////////////////////////////////////////////////
], PeopleDetailComponent);



/***/ }),

/***/ 66475:
/*!*****************************************!*\
  !*** ./src/app/services/app.service.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppService": function() { return /* binding */ AppService; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var _capacitor_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @capacitor/app */ 42138);
/* harmony import */ var _events_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./events.service */ 80106);





////////////////////////////////////////////////////////////////
let AppService = class AppService {
    ////////////////////////////////////////////////////////////////
    constructor(logger, evServ) {
        this.logger = logger;
        this.evServ = evServ;
        this.aInfo = {
            name: null,
            id: null,
            build: null,
            version: null
        };
        this.initDone = false;
    }
    ////////////////////////////////////////////////////////////////
    doAppInit() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[appServ|doAppInit] ()...');
            this.logger.info('[appServ|initListeners] (contructor) 🎧🎧🎧...');
            _capacitor_app__WEBPACK_IMPORTED_MODULE_0__.App.addListener('appStateChange', state => {
                this.aIsActive = state.isActive;
                this.evServ.publish('myAppStateActive', this.aIsActive);
                let consTxt;
                this.aIsActive ? consTxt = '[ACTIVE]' : consTxt = '[NOT ACTIVE]';
                this.logger.info('[App|Listener|EVENT] \u269C (appStateChange): App is ' + consTxt);
            });
            _capacitor_app__WEBPACK_IMPORTED_MODULE_0__.App.addListener('appUrlOpen', (event) => {
                this.evServ.publish('myAppUrlOpen', event);
                this.aOpenUrl = event.url;
                this.logger.info('[App|Listener|EVENT] \u269C (appUrlOpen): URL is ' + this.aOpenUrl);
            });
            _capacitor_app__WEBPACK_IMPORTED_MODULE_0__.App.addListener('appRestoredResult', (event) => {
                this.aRestoredRes = event;
                this.evServ.publish('myAppRestoredResult', this.aRestoredRes);
                this.logger.info('[App|Listener|EVENT] \u269C (appRestoreResult): ' + this.aRestoredRes.methodName + ' Result for Plugin ID: ' + this.aRestoredRes.pluginId + '...');
                if (this.aRestoredRes.success) {
                    this.logger.info('- Plugin Call Succeeded:');
                    console.log(this.aRestoredRes.data);
                }
                else {
                    this.logger.info('- Plugin Call Error: ' + this.aRestoredRes.error.message);
                }
            });
            _capacitor_app__WEBPACK_IMPORTED_MODULE_0__.App.addListener('backButton', (event) => {
                this.aCanGoBack = event.canGoBack;
                this.evServ.publish('myAppCanGoBack', this.aCanGoBack);
                let consTxt;
                this.aCanGoBack ? consTxt = '[CAN]' : consTxt = '[CANNOT]';
                this.logger.info('[App|Listener|EVENT] \u269C (backButton): App ' + consTxt + ' Go Back.');
            });
            const aLaunchUrl = yield this.getAppLaunchUrl();
            this.logger.info('\u269C - getAppLaunchUrl: ' + aLaunchUrl);
            const aState = yield this.getAppState();
            this.logger.info('\u269C - getAppState: ' + aState);
            const aInfo = yield this.getInfo();
            this.logger.info('\u269C - getAppInfo: ' + aInfo);
        });
    }
    ////////////////////////////////////////////////////////////////
    getAppLaunchUrl() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[appServ|getAppLaunchUrl] ()...');
            const gALUrlRes = yield _capacitor_app__WEBPACK_IMPORTED_MODULE_0__.App.getLaunchUrl();
            if (gALUrlRes !== undefined) {
                this.aLaunchUrl = gALUrlRes.url;
                this.logger.info('\u269C - App Launch URL: ' + this.aLaunchUrl);
                return Promise.resolve(true);
            }
            else {
                this.logger.info('(NULL) \u269C App Launch URL Not Found.');
                return Promise.resolve(true);
            }
        });
    }
    ////////////////////////////////////////////////////////////////
    getAppState() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[appServ|getAppState] ()...');
            const gASRes = yield _capacitor_app__WEBPACK_IMPORTED_MODULE_0__.App.getState();
            this.aIsActive = gASRes.isActive;
            let consTxt;
            this.aIsActive ? consTxt = '[ACTIVE]' : consTxt = '[NOT ACTIVE]';
            this.logger.info('[appServ|getAppState] \u269C - App is ' + consTxt);
            return Promise.resolve(true);
        });
    }
    ////////////////////////////////////////////////////////////////
    getInfo() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[appServ|getInfo] ()...');
            const gAIRes = yield _capacitor_app__WEBPACK_IMPORTED_MODULE_0__.App.getInfo();
            this.aInfo = gAIRes;
            this.logger.info('[appServ|getInfo] \u269C (Result): ' + this.aInfo.name + ' | ' + this.aInfo.id + ' | ' + this.aInfo.build + ' | ' + this.aInfo.version);
            return Promise.resolve(true);
        });
    }
    ////////////////////////////////////////////////////////////////
    exitApp() { this.logger.info('[appServ|exitApp] \u269C ()...'); _capacitor_app__WEBPACK_IMPORTED_MODULE_0__.App.exitApp(); }
};
AppService.ctorParameters = () => [
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_3__.NGXLogger },
    { type: _events_service__WEBPACK_IMPORTED_MODULE_1__.EventsService }
];
AppService = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable)({ providedIn: 'root' })
    ////////////////////////////////////////////////////////////////
], AppService);



/***/ }),

/***/ 38670:
/*!**************************************!*\
  !*** ./src/app/services/appTypes.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaultAUUser": function() { return /* binding */ defaultAUUser; },
/* harmony export */   "defaultAUSettings": function() { return /* binding */ defaultAUSettings; },
/* harmony export */   "AUSAlertRange2Value": function() { return /* binding */ AUSAlertRange2Value; },
/* harmony export */   "testShift": function() { return /* binding */ testShift; }
/* harmony export */ });
function defaultAUUser() {
    const defObj = {
        dp_token: '',
        dp_refresh: '',
        dp_expires: '',
        dp_domain: '',
        fcm_token: '',
    };
    return defObj;
}
//////////////////////////////////////////////////
function defaultAUSettings() {
    let dAUS = {
        alerts: {
            showSection: true,
            options: {
                alertCal: { value: null, info: false },
                alertMethods: { value: { phone: true, calendar: true, email: false }, info: false },
                alertEvents: { value: { shift: true, task: false, tsheet: true }, info: false },
                alertBefore: { value: { task: { range: 2, mins: 60 }, shift: { range: 1, mins: 30 }, tsheet: { range: 2, mins: 10 } }, info: false }
            }
        },
        database: {
            showSection: true,
            options: {
                backupMode: { value: 'auto', info: false },
                backupActions: { info: false }
            }
        },
        profile: {
            showSection: false,
            options: { alwaysSync: { value: false, info: false } }
        },
        payrates: {
            showSection: false,
            options: { show: { value: true, info: false } }
        },
        snoop: {
            showSection: false,
            options: { activated: { value: true, info: false } }
        }
    };
    return dAUS;
}
//////////////////////////////////////////////////
function AUSAlertRange2Value(aEvent, rangeVal) {
    const sTO = { 1: 30, 2: 60, 3: 90, 4: 120, 5: 360, 6: 720 };
    const tsO = { 1: 5, 2: 10, 3: 15, 4: 20, 5: 25, 6: 30 };
    if (aEvent === 'shift' || aEvent === 'task') {
        return sTO[rangeVal];
    }
    else {
        return tsO[rangeVal];
    }
    ;
}
//////////////////////////////////////////////////
const testShift = {
    "Id": 7777,
    "Date": "2022-02-28T00:00:00+08:00",
    "StartTime": 1646013600,
    "EndTime": 1646028000,
    "Mealbreak": "2022-02-27T00:00:00+08:00",
    "Slots": [
        {
            "blnEmptySlot": false,
            "strType": "B",
            "intStart": 0,
            "intEnd": 0,
            "intUnixStart": 1646013600,
            "intUnixEnd": 1646013600,
            "mixedActivity": {
                "intState": 3,
                "blnCanStartEarly": 1,
                "blnCanEndEarly": 1,
                "blnIsMandatory": 1,
                "strBreakType": "M"
            },
            "strTypeName": "Meal Break",
            "strState": "Scheduled Duration"
        }
    ],
    "TotalTime": 4,
    "Cost": 0,
    "OperationalUnit": 6,
    "Employee": 421,
    "Comment": "",
    "Warning": "Stressed : Too many hours in a shift. Max 7.6 for Normal 38 hours per week| Stressed : Too many hours in a day. Max 7.6 for Normal 38 hours per week",
    "WarningOverrideComment": "Override by Renee Coyle on Tue 22/02/22 12:05 PM",
    "Published": true,
    "MatchedByTimesheet": 0,
    "CustomFieldData": null,
    "Open": false,
    "ApprovalRequired": false,
    "ConfirmStatus": 0,
    "ConfirmComment": "",
    "ConfirmBy": 0,
    "ConfirmTime": 0,
    "SwapStatus": 0,
    "SwapManageBy": null,
    "ShiftTemplate": 1,
    "ConnectStatus": null,
    "Creator": 406,
    "Created": "2022-02-22T12:05:53+08:00",
    "Modified": "2022-02-22T12:12:04+08:00",
    "OperationalUnitObject": {
        "Id": 6,
        "Creator": 1,
        "Created": "2018-12-31T19:42:41+08:00",
        "Modified": "2020-09-01T14:30:35+08:00",
        "Company": 1,
        "WorkType": null,
        "ParentOperationalUnit": 0,
        "OperationalUnitName": "Bar",
        "Active": true,
        "PayrollExportName": "",
        "Address": 162,
        "Contact": null,
        "RosterSortOrder": 1,
        "ShowOnRoster": true,
        "Colour": "#f93c3c",
        "RosterActiveHoursSchedule": null,
        "DailyRosterBudget": null,
        "OperationalUnitType": 0,
        "CompanyCode": "DOG",
        "CompanyName": "Duke Of George",
        "AddressObject": {
            "Id": 162,
            "ContactName": null,
            "UnitNo": null,
            "StreetNo": null,
            "SuiteNo": null,
            "PoBox": null,
            "Street1": "135 George Street, East Fremantle WA 6158, Australia",
            "Street2": null,
            "City": null,
            "State": null,
            "Postcode": null,
            "Country": 13,
            "Phone": null,
            "Notes": null,
            "Format": null,
            "Saved": null,
            "Creator": 1,
            "Created": "2018-12-31T19:59:59+08:00",
            "Modified": "2018-12-31T19:59:59+08:00",
            "Print": "135 George Street, East Fremantle WA 6158, Australia\n"
        }
    }
};
//////////////////////////////////////////////////
//////////////////////////////////////////////////


/***/ }),

/***/ 96414:
/*!************************************!*\
  !*** ./src/app/services/baseDB.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SQLiteKeywords": function() { return /* binding */ SQLiteKeywords; },
/* harmony export */   "frCheckResArr": function() { return /* binding */ frCheckResArr; },
/* harmony export */   "frCheckMyArr": function() { return /* binding */ frCheckMyArr; },
/* harmony export */   "frResMyCombo": function() { return /* binding */ frResMyCombo; },
/* harmony export */   "frMyOrs": function() { return /* binding */ frMyOrs; },
/* harmony export */   "frCheckImageEPs": function() { return /* binding */ frCheckImageEPs; },
/* harmony export */   "frEPStore": function() { return /* binding */ frEPStore; },
/* harmony export */   "myEndPointArr": function() { return /* binding */ myEndPointArr; },
/* harmony export */   "myFREPArr": function() { return /* binding */ myFREPArr; },
/* harmony export */   "resEndPointArr": function() { return /* binding */ resEndPointArr; },
/* harmony export */   "Resources": function() { return /* binding */ Resources; },
/* harmony export */   "InsertTypeMap": function() { return /* binding */ InsertTypeMap; },
/* harmony export */   "TypeMap": function() { return /* binding */ TypeMap; },
/* harmony export */   "List2DBTblMap": function() { return /* binding */ List2DBTblMap; },
/* harmony export */   "AuthDB": function() { return /* binding */ AuthDB; },
/* harmony export */   "DefaultDB": function() { return /* binding */ DefaultDB; }
/* harmony export */ });
///////////////////////////////////////////////////////////////////////////
const SQLiteKeywords = ['ABORT', 'ACTION', 'ADD', 'AFTER', 'ALL', 'ALTER', 'ALWAYS', 'ANALYZE', 'AND', 'AS', 'ASC', 'ATTACH', 'AUTOINCREMENT', 'BEFORE', 'BEGIN', 'BETWEEN', 'BY', 'CASCADE', 'CASE', 'CAST', 'CHECK', 'COLLATE', 'COLUMN', 'COMMIT', 'CONFLICT', 'CONSTRAINT', 'CREATE', 'CROSS', 'CURRENT', 'CURRENT_DATE', 'CURRENT_TIME', 'CURRENT_TIMESTAMP', 'DATABASE', 'DEFAULT', 'DEFERRABLE', 'DEFERRED', 'DELETE', 'DESC', 'DETACH', 'DISTINCT', 'DO', 'DROP', 'EACH', 'ELSE', 'END', 'ESCAPE', 'EXCEPT', 'EXCLUDE', 'EXCLUSIVE', 'EXISTS', 'EXPLAIN', 'FAIL', 'FILTER', 'FIRST', 'FOLLOWING', 'FOR', 'FOREIGN', 'FROM', 'FULL', 'GENERATED', 'GLOB', 'GROUP', 'GROUPS', 'HAVING', 'IF', 'IGNORE', 'IMMEDIATE', 'IN', 'INDEX', 'INDEXED', 'INITIALLY', 'INNER', 'INSERT', 'INSTEAD', 'INTERSECT', 'INTO', 'IS', 'ISNULL', 'JOIN', 'KEY', 'LAST', 'LEFT', 'LIKE', 'LIMIT', 'MATCH', 'MATERIALIZED', 'NATURAL', 'NO', 'NOT', 'NOTHING', 'NOTNULL', 'NULL', 'NULLS', 'OF', 'OFFSET', 'ON', 'OR', 'ORDER', 'OTHERS', 'OUTER', 'OVER', 'PARTITION', 'PLAN', 'PRAGMA', 'PRECEDING', 'PRIMARY', 'QUERY', 'RAISE', 'RANGE', 'RECURSIVE', 'REFERENCES', 'REGEXP', 'REINDEX', 'RELEASE', 'RENAME', 'REPLACE', 'RESTRICT', 'RETURNING', 'RIGHT', 'ROLLBACK', 'ROW', 'ROWS', 'SAVEPOINT', 'SELECT', 'SET', 'TABLE', 'TEMP', 'TEMPORARY', 'THEN', 'TIES', 'TO', 'TRANSACTION', 'TRIGGER', 'UNBOUNDED', 'UNION', 'UNIQUE', 'UPDATE', 'USING', 'VACUUM', 'VALUES', 'VIEW', 'VIRTUAL', 'WHEN', 'WHERE', 'WINDOW', 'WITH', 'WITHOUT'];
///////////////////////////////////////////////////////////////////////////
const frCheckResArr = ['Company', 'Kiosk', 'Memo', 'OperationalUnit', 'PayPeriod', 'SystemUsageTracking', 'Task', 'TaskGroup', 'Timesheet', 'Roster'];
const frCheckMyArr = ['colleague', 'leave', 'memo', 'notification', 'roster', 'timesheet', 'task', 'unavail'];
const frResMyCombo = ['Memo', 'Task', 'Timesheet', 'Roster'];
const frMyOrs = ['colleague', 'leave', 'notification', 'unavail'];
const frCheckImageEPs = ['photo', 'colleague'];
const frEPStore = { Company: { epc: 'res', sl: 'db' }, Kiosk: { epc: 'res', sl: 'db' }, Memo: { epc: 'res', sl: 'db' }, OperationalUnit: { epc: 'res', sl: 'db' }, PayPeriod: { epc: 'res', sl: 'db' }, SystemUsageTracking: { epc: 'res', sl: 'db' }, Task: { epc: 'res', sl: 'db' }, TaskGroup: { epc: 'res', sl: 'db' }, Timesheet: { epc: 'res', sl: 'db' }, Roster: { epc: 'res', sl: 'both' }, colleague: { epc: 'res', sl: 'db' }, contactaddress: { epc: 'my', sl: 'store' }, leave: { epc: 'my', sl: 'db' }, location: { epc: 'my', sl: 'store' }, notification: { epc: 'my', sl: 'db' }, photo: { epc: 'my', sl: 'store' }, roster: { epc: 'my', sl: 'both' }, training: { epc: 'my', sl: 'store' }, unavail: { epc: 'my', sl: 'store' } };
const myEndPointArr = ['photo', 'setup', 'location', 'contactaddress', 'colleague', 'roster', 'timesheet', 'leave', 'unavail', 'notification', 'training', 'memo', 'tasks'];
const myFREPArr = ['colleague', 'leave', 'memo', 'notification', 'photo', 'roster', 'tasks', 'unavail'];
const resEndPointArr = ['Address', 'Category', 'Comment', 'Company', 'CompanyPeriod', 'Contact', 'Country', 'CustomAppData', 'CustomField', 'CustomFieldData', 'Employee', 'EmployeeAgreement', 'EmployeeAgreementHistory', 'EmployeeAppraisal', 'EmployeeAvailability', 'EmployeeHistory', 'EmployeePaycycle', 'EmployeePaycycleReturn', 'EmployeeRole', 'EmployeeSalaryOpunitCosting', 'EmployeeWorkplace', 'EmploymentCondition', 'EmploymentContract', 'EmploymentContractLeaveRules', 'Event', 'Geo', 'Journal', 'Kiosk', 'Leave', 'LeaveAccrual', 'LeavePayLine', 'LeaveRules', 'Memo', 'OperationalUnit', 'PayPeriod', 'PayRules', 'PublicHoliday', 'SalesData', 'Schedule', 'SmsLog', 'State', 'StressProfile', 'SystemUsageBalance', 'SystemUsageTracking', 'Task', 'TaskGroup', 'TaskGroupSetup', 'TaskOpunitConfig', 'TaskSetup', 'Team', 'Timesheet', 'TimesheetPayReturn', 'TrainingModule', 'TrainingRecord', 'Webhook', 'Roster', 'RosterOpen', 'RosterSwap'];
///////////////////////////////////////////////////////////////////////////
const Resources = { Address: 'addresses', Category: 'categories', Colleague: 'colleagues', Comment: 'comments', Company: 'companies', CompanyPeriod: 'company_periods', Contact: 'contacts', Country: 'countries', CustomAppData: 'custom_app_data', CustomField: 'custom_fields', CustomFieldData: 'custom_field_data', Employee: 'employees', EmployeeAgreement: 'employee_agreements', EmployeeAgreementHistory: 'employee_agreement_history', EmployeeAppraisal: 'employee_appraisal', EmployeeAvailability: 'employee_availability', EmployeeHistory: 'employee_history', EmployeePaycycle: 'employee_paycycles', EmployeePaycycleReturn: 'employee_paycycle_returns', EmployeeRole: 'employee_roles', EmployeeSalaryOpunitCosting: 'employee_salary_opunit_costing', EmployeeWorkplace: 'employee_workplaces', EmploymentCondition: 'employment_conditions', EmploymentContract: 'employee_contracts', EmploymentContractLeaveRules: 'employee_contract_leave_rules', Event: 'events', Geo: 'geo', Journal: 'journal', Kiosk: 'kiosks', Leave: 'leaves', LeaveAccrual: 'leave_accruals', LeavePayLine: 'leave_pay_lines', LeaveRules: 'leave_rules', Memo: 'memos', OperationalUnit: 'operational_units', PayPeriod: 'pay_periods', PayRules: 'pay_rules', PublicHoliday: 'public_holidays', Roster: 'rosters', RosterOpen: 'roster_opens', RosterSwap: 'roster_swaps', SalesData: 'sales_data', Schedule: 'schedules', SmsLog: 'sms_logs', State: 'states', StressProfile: 'stress_profiles', SystemUsageBalance: 'system_usage_balances', SystemUsageTracking: 'system_usage_tracking', Task: 'tasks', TaskGroup: 'task_groups', TaskGroupSetup: 'task_group_setups', TaskOpunitConfig: 'task_opunit_configs', TaskSetup: 'task_setups', Team: 'teams', Timesheet: 'timesheets', TimesheetPayReturn: 'timesheet_pay_returns', TrainingModule: 'training_modules', TrainingRecord: 'training_records', Webhook: 'webhooks', colleague: 'colleagues', notification: 'notifications', leave: 'leaves', unavail: 'employee_availability' };
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
const InsertTypeMap = { text: 'string', integer: 'number', numeric: 'number', real: 'number' };
///////////////////////////////////////////////////////////////////////////
const TypeMap = { int: 'integer', integer: 'integer', real: 'real', double: 'real', float: 'real', string: 'text', character: 'text', varchar: 'text', nchar: 'text', clob: 'text', blob: 'text', time: 'text', date: 'text', datetime: 'text', bit: 'numeric', numeric: 'numeric', decimal: 'numeric', boolean: 'numeric' };
///////////////////////////////////////////////////////////////////////////
const List2DBTblMap = { tabshifts: 'rosters', tabtsheets: 'timesheets', tabtasks: 'tasks', tabnews: 'memos' };
///////////////////////////////////////////////////////////////////////////
const AuthDB = {
    "database": "authdb",
    "version": 1,
    "encrypted": true,
    "mode": "full",
    "tables": [
        {
            "name": "deputy_auth",
            "schema": [
                {
                    "column": "dp_uuk",
                    "value": "TEXT PRIMARY KEY NOT NULL"
                },
                {
                    "column": "dp_username",
                    "value": "TEXT"
                },
                {
                    "column": "dp_password",
                    "value": "TEXT"
                },
                {
                    "column": "dp_access_token",
                    "value": "TEXT"
                },
                {
                    "column": "dp_endpoint",
                    "value": "TEXT"
                },
                {
                    "column": "dp_expires_in",
                    "value": "TEXT"
                },
                {
                    "column": "dp_expires_at",
                    "value": "TEXT"
                },
                {
                    "column": "dp_refresh_token",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s','now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                }
            ]
        }
    ]
};
///////////////////////////////////////////////////////////////////////////
const DefaultDB = {
    "database": "defaultdb",
    "version": 1,
    "encrypted": false,
    "mode": "full",
    "tables": [
        {
            "name": "sheriff_settings",
            "schema": [
                {
                    "column": "dp_uuk",
                    "value": "TEXT PRIMARY KEY NOT NULL"
                },
                {
                    "column": "settings",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s','now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                }
            ]
        },
        {
            "name": "firebase_fct",
            "schema": [
                {
                    "column": "app_uuk",
                    "value": "TEXT PRIMARY KEY NOT NULL"
                },
                {
                    "column": "fe_token",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s','now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                }
            ]
        },
        {
            "name": "firebase_fcm",
            "schema": [
                {
                    "column": "app_uuk",
                    "value": "TEXT PRIMARY KEY NOT NULL"
                },
                {
                    "column": "fcm_token",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s','now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                }
            ]
        },
        {
            "name": "deputy_profile",
            "schema": [
                {
                    "column": "dp_uuk",
                    "value": "TEXT PRIMARY KEY NOT NULL"
                },
                {
                    "column": "photo",
                    "value": "TEXT"
                },
                {
                    "column": "dname",
                    "value": "TEXT"
                },
                {
                    "column": "fname",
                    "value": "TEXT"
                },
                {
                    "column": "lname",
                    "value": "TEXT"
                },
                {
                    "column": "email",
                    "value": "TEXT"
                },
                {
                    "column": "phone",
                    "value": "TEXT"
                },
                {
                    "column": "dob",
                    "value": "TEXT"
                },
                {
                    "column": "pin",
                    "value": "TEXT"
                },
                {
                    "column": "gender",
                    "value": "TEXT"
                },
                {
                    "column": "pronoun",
                    "value": "TEXT"
                },
                {
                    "column": "custompn",
                    "value": "TEXT"
                },
                {
                    "column": "street",
                    "value": "TEXT"
                },
                {
                    "column": "city",
                    "value": "TEXT"
                },
                {
                    "column": "country",
                    "value": "TEXT"
                },
                {
                    "column": "state",
                    "value": "TEXT"
                },
                {
                    "column": "pcode",
                    "value": "TEXT"
                },
                {
                    "column": "ename",
                    "value": "TEXT"
                },
                {
                    "column": "ephone",
                    "value": "TEXT"
                },
                {
                    "column": "last_sync",
                    "value": "INTEGER DEFAULT (strftime('%s','now'))"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s','now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexOnlast_sync",
                    "value": "last_sync"
                }
            ]
        },
        {
            "name": "sync",
            "schema": [
                {
                    "column": "id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "table_name",
                    "value": "TEXT"
                },
                {
                    "column": "last_sync",
                    "value": "INTEGER"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexOnlast_sync",
                    "value": "last_sync"
                }
            ]
        },
        {
            "name": "addresses",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "ContactName",
                    "value": "TEXT"
                },
                {
                    "column": "UnitNo",
                    "value": "TEXT"
                },
                {
                    "column": "StreetNo",
                    "value": "TEXT"
                },
                {
                    "column": "SuiteNo",
                    "value": "TEXT"
                },
                {
                    "column": "PoBox",
                    "value": "TEXT"
                },
                {
                    "column": "Street1",
                    "value": "TEXT"
                },
                {
                    "column": "Street2",
                    "value": "TEXT"
                },
                {
                    "column": "City",
                    "value": "TEXT"
                },
                {
                    "column": "State",
                    "value": "TEXT"
                },
                {
                    "column": "Postcode",
                    "value": "TEXT"
                },
                {
                    "column": "Country",
                    "value": "INTEGER"
                },
                {
                    "column": "Phone",
                    "value": "TEXT"
                },
                {
                    "column": "Notes",
                    "value": "TEXT"
                },
                {
                    "column": "Format",
                    "value": "INTEGER"
                },
                {
                    "column": "Saved",
                    "value": "NUMERIC"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "categories",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Category",
                    "value": "TEXT"
                },
                {
                    "column": "'Group'",
                    "value": "TEXT"
                },
                {
                    "column": "SortOrder",
                    "value": "INTEGER"
                },
                {
                    "column": "Stafflog",
                    "value": "NUMERIC"
                },
                {
                    "column": "System",
                    "value": "NUMERIC"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "comments",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Orm",
                    "value": "TEXT"
                },
                {
                    "column": "RecId",
                    "value": "INTEGER"
                },
                {
                    "column": "InFeed",
                    "value": "NUMERIC"
                },
                {
                    "column": "IgnorePermission",
                    "value": "NUMERIC"
                },
                {
                    "column": "Comment",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "companies",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Portfolio",
                    "value": "INTEGER"
                },
                {
                    "column": "Code",
                    "value": "TEXT"
                },
                {
                    "column": "Active",
                    "value": "NUMERIC"
                },
                {
                    "column": "ParentCompany",
                    "value": "INTEGER"
                },
                {
                    "column": "CompanyName",
                    "value": "TEXT"
                },
                {
                    "column": "TradingName",
                    "value": "TEXT"
                },
                {
                    "column": "BusinessNumber",
                    "value": "TEXT"
                },
                {
                    "column": "CompanyNumber",
                    "value": "TEXT"
                },
                {
                    "column": "IsWorkplace",
                    "value": "NUMERIC"
                },
                {
                    "column": "IsPayrollEntity",
                    "value": "NUMERIC"
                },
                {
                    "column": "PayrollExportCode",
                    "value": "TEXT"
                },
                {
                    "column": "Address",
                    "value": "INTEGER"
                },
                {
                    "column": "Contact",
                    "value": "INTEGER"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "company_periods",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Start",
                    "value": "INTEGER"
                },
                {
                    "column": "DateStart",
                    "value": "TEXT"
                },
                {
                    "column": "`End`",
                    "value": "INTEGER"
                },
                {
                    "column": "DateEnd",
                    "value": "TEXT"
                },
                {
                    "column": "Company",
                    "value": "INTEGER"
                },
                {
                    "column": "PayPeriod",
                    "value": "INTEGER"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "contacts",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Phone1",
                    "value": "TEXT"
                },
                {
                    "column": "Phone2",
                    "value": "TEXT"
                },
                {
                    "column": "Phone3",
                    "value": "TEXT"
                },
                {
                    "column": "Fax",
                    "value": "TEXT"
                },
                {
                    "column": "Phone1Type",
                    "value": "TEXT"
                },
                {
                    "column": "Phone2Type",
                    "value": "TEXT"
                },
                {
                    "column": "Phone3Type",
                    "value": "TEXT"
                },
                {
                    "column": "PrimaryPhone",
                    "value": "INTEGER"
                },
                {
                    "column": "Email1",
                    "value": "TEXT"
                },
                {
                    "column": "Email1Type",
                    "value": "TEXT"
                },
                {
                    "column": "Email2Type",
                    "value": "TEXT"
                },
                {
                    "column": "Email2",
                    "value": "TEXT"
                },
                {
                    "column": "PrimaryEmail",
                    "value": "INTEGER"
                },
                {
                    "column": "Im1",
                    "value": "TEXT"
                },
                {
                    "column": "Im2",
                    "value": "TEXT"
                },
                {
                    "column": "Im1Type",
                    "value": "TEXT"
                },
                {
                    "column": "Im2Type",
                    "value": "TEXT"
                },
                {
                    "column": "Web",
                    "value": "TEXT"
                },
                {
                    "column": "Notes",
                    "value": "TEXT"
                },
                {
                    "column": "Saved",
                    "value": "NUMERIC"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "countries",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Code",
                    "value": "TEXT"
                },
                {
                    "column": "CodeA3",
                    "value": "TEXT"
                },
                {
                    "column": "Region",
                    "value": "TEXT"
                },
                {
                    "column": "Active",
                    "value": "INTEGER"
                },
                {
                    "column": "SortOrder",
                    "value": "INTEGER"
                },
                {
                    "column": "Country",
                    "value": "TEXT"
                },
                {
                    "column": "ZipValidatePreg",
                    "value": "TEXT"
                },
                {
                    "column": "PhoneDisplayPreg",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ],
            "values": [
                [1, "AF", "AFG", "AS", 0, 10, "Afghanistan", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [2, "AL", "ALB", "EU", 0, 10, "Albania", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [3, "DZ", "DZA", "AF", 0, 10, "Algeria", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [4, "AS", "ASM", "AU", 0, 10, "American Samoa", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [5, "AD", "AND", "EU", 0, 10, "Andorra", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [6, "AO", "AGO", "AF", 0, 10, "Angola", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [7, "AI", "AIA", "LA", 0, 10, "Anguilla", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [8, "AQ", "ATA", "AN", 0, 10, "Antarctica", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [9, "AG", "ATG", "LA", 0, 10, "Antigua and Barbuda", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [10, "AR", "ARG", "LA", 0, 10, "Argentina", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [11, "AM", "ARM", "AS", 0, 10, "Armenia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [12, "AW", "ABW", "LA", 0, 10, "Aruba", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [13, "AU", "AUS", "AU", 1, 1, "Australia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:19:12+08:00", 1634878320],
                [14, "AT", "AUT", "EU", 0, 10, "Austria", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [15, "AZ", "AZE", "AS", 0, 10, "Azerbaijan", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [16, "BS", "BHS", "LA", 0, 10, "Bahamas", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [17, "BH", "BHR", "AS", 0, 10, "Bahrain", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [18, "BD", "BGD", "AS", 0, 10, "Bangladesh", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [19, "BB", "BRB", "LA", 0, 10, "Barbados", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [20, "BY", "BLR", "EU", 0, 10, "Belarus", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [21, "BE", "BEL", "EU", 0, 10, "Belgium", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [22, "BZ", "BLZ", "LA", 0, 10, "Belize", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [23, "BJ", "BEN", "AF", 0, 10, "Benin", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [24, "BM", "BMU", "LA", 0, 10, "Bermuda", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [25, "BT", "BTN", "AS", 0, 10, "Bhutan", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [26, "BO", "BOL", "LA", 0, 10, "Bolivia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [27, "BA", "BIH", "EU", 0, 10, "Bosnia and Herzegowina", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [28, "BW", "BWA", "AF", 0, 10, "Botswana", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [29, "BV", "BVT", "AN", 0, 10, "Bouvet Island", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [30, "BR", "BRA", "LA", 0, 10, "Brazil", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [31, "IO", "IOT", "AS", 0, 10, "British Indian Ocean Territory", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [32, "VG", "VGB", "LA", 0, 10, "British Virgin Islands", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [33, "BN", "BRN", "AS", 0, 10, "Brunei Darussalam", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [34, "BG", "BGR", "EU", 0, 10, "Bulgaria", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [35, "BF", "BFA", "AF", 0, 10, "Burkina Faso", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [36, "BI", "BDI", "AF", 0, 10, "Burundi", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [37, "KH", "KHM", "AS", 0, 10, "Cambodia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [38, "CM", "CMR", "AF", 0, 10, "Cameroon", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [39, "CA", "CAN", "NA", 0, 5, "Canada", "/[a-zA-Z]\\d[a-zA-Z] ?\\d[a-zA-Z]\\d/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [40, "CV", "CPV", "AF", 0, 10, "Cape Verde", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [41, "KY", "CYM", "LA", 0, 10, "Cayman Islands", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [42, "CF", "CAF", "AF", 0, 10, "Central African Republic", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [43, "TD", "TCD", "AF", 0, 10, "Chad", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [44, "CL", "CHL", "LA", 0, 10, "Chile", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [45, "CN", "CHN", "AS", 0, 10, "China", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [46, "CX", "CXR", "AU", 0, 10, "Christmas Island", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [47, "CC", "CCK", "AU", 0, 10, "Cocos (Keeling) Islands", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [48, "CO", "COL", "LA", 0, 10, "Colombia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [49, "KM", "COM", "AF", 0, 10, "Comoros", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [50, "CG", "COG", "AF", 0, 10, "Congo", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [51, "CK", "COK", "AU", 0, 10, "Cook Islands", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [52, "CR", "CRI", "LA", 0, 10, "Costa Rica", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [53, "CI", "CIV", "AF", 0, 10, "Cote D'ivoire", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [54, "HR", "HRV", "EU", 0, 10, "Croatia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [55, "CU", "CUB", "LA", 0, 10, "Cuba", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [56, "CY", "CYP", "EU", 0, 10, "Cyprus", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [57, "CZ", "CZE", "EU", 0, 10, "Czech Republic", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [58, "DK", "DNK", "EU", 0, 10, "Denmark", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [59, "DJ", "DJI", "AF", 0, 10, "Djibouti", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [60, "DM", "DMA", "LA", 0, 10, "Dominica", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [61, "DO", "DOM", "LA", 0, 10, "Dominican Republic", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [62, "TP", "", "AS", 0, 10, "East Timor", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [63, "EC", "ECU", "LA", 0, 10, "Ecuador", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [64, "EG", "EGY", "AF", 0, 10, "Egypt", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [65, "SV", "SLV", "LA", 0, 10, "El Salvador", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [66, "GQ", "GNQ", "AF", 0, 10, "Equatorial Guinea", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [67, "ER", "ERI", "AF", 0, 10, "Eritrea", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [68, "EE", "EST", "EU", 0, 10, "Estonia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [69, "ET", "ETH", "AF", 0, 10, "Ethiopia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [70, "FK", "FLK", "LA", 0, 10, "Falkland Islands (Malvinas)", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [71, "FO", "FRO", "EU", 0, 10, "Faroe Islands", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [72, "FJ", "FJI", "AU", 0, 10, "Fiji", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [73, "FI", "FIN", "EU", 0, 10, "Finland", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [74, "FR", "FRA", "EU", 0, 10, "France", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [76, "GF", "GUF", "LA", 0, 10, "French Guiana", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [77, "PF", "PYF", "AU", 0, 10, "French Polynesia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [78, "TF", "ATF", "AN", 0, 10, "French Southern Territories", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [79, "GA", "GAB", "AF", 0, 10, "Gabon", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [80, "GE", "GEO", "AS", 0, 10, "Georgia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [81, "GM", "GMB", "AF", 0, 10, "Gambia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [82, "PS", "PSE", "AS", 0, 10, "Palestine Authority", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [83, "DE", "DEU", "EU", 0, 10, "Germany", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [84, "GH", "GHA", "AF", 0, 10, "Ghana", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [85, "GI", "GIB", "EU", 0, 10, "Gibraltar", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [86, "GR", "GRC", "EU", 0, 10, "Greece", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [87, "GL", "GRL", "NA", 0, 10, "Greenland", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [88, "GD", "GRD", "LA", 0, 10, "Grenada", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [89, "GP", "GLP", "LA", 0, 10, "Guadeloupe", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [90, "GU", "GUM", "AU", 0, 10, "Guam", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [91, "GT", "GTM", "LA", 0, 10, "Guatemala", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [92, "GN", "GIN", "AF", 0, 10, "Guinea", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [93, "GW", "GNB", "AF", 0, 10, "Guinea-Bissau", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [94, "GY", "GUY", "LA", 0, 10, "Guyana", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [95, "HT", "HTI", "LA", 0, 10, "Haiti", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [96, "HM", "HMD", "AU", 0, 10, "Heard and McDonald Islands", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [97, "HN", "HND", "LA", 0, 10, "Honduras", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [98, "HK", "HKG", "AS", 0, 10, "Hong Kong", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [99, "HU", "HUN", "EU", 0, 10, "Hungary", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [100, "IS", "ISL", "EU", 0, 10, "Iceland", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [101, "IN", "IND", "AS", 0, 10, "India", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [102, "ID", "IDN", "AS", 0, 10, "Indonesia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [103, "IQ", "IRQ", "AS", 0, 10, "Iraq", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [104, "IE", "IRL", "EU", 0, 10, "Ireland", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [105, "IR", "IRN", "AS", 0, 10, "Islamic Republic of Iran", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [106, "IL", "ISR", "AS", 0, 10, "Israel", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [107, "IT", "ITA", "EU", 0, 10, "Italy", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [108, "JM", "JAM", "LA", 0, 10, "Jamaica", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [109, "JP", "JPN", "AS", 0, 10, "Japan", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [110, "JO", "JOR", "AS", 0, 10, "Jordan", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [111, "KZ", "KAZ", "AS", 0, 10, "Kazakhstan", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [112, "KE", "KEN", "AF", 0, 10, "Kenya", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [113, "KI", "KIR", "AU", 0, 10, "Kiribati", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [114, "KP", "PRK", "AS", 0, 10, "Korea", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [115, "KR", "KOR", "AS", 0, 10, "Korea, Republic of", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [116, "KW", "KWT", "AS", 0, 10, "Kuwait", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [117, "KG", "KGZ", "AS", 0, 10, "Kyrgyzstan", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [118, "LA", "LAO", "AS", 0, 10, "Laos", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [119, "LV", "LVA", "EU", 0, 10, "Latvia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [120, "LB", "LBN", "AS", 0, 10, "Lebanon", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [121, "LS", "LSO", "AF", 0, 10, "Lesotho", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [122, "LR", "LBR", "AF", 0, 10, "Liberia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [123, "LY", "LBY", "AF", 0, 10, "Libyan Arab Jamahiriya", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [124, "LI", "LIE", "EU", 0, 10, "Liechtenstein", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [125, "LT", "LTU", "EU", 0, 10, "Lithuania", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [126, "LU", "LUX", "EU", 0, 10, "Luxembourg", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [127, "MO", "MAC", "AS", 0, 10, "Macau", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [128, "MK", "MKD", "EU", 0, 10, "Macedonia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [129, "MG", "MDG", "AF", 0, 10, "Madagascar", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [130, "MW", "MWI", "AF", 0, 10, "Malawi", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [131, "MY", "MYS", "AS", 0, 10, "Malaysia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [132, "MV", "MDV", "AS", 0, 10, "Maldives", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [133, "ML", "MLI", "AF", 0, 10, "Mali", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [134, "MT", "MLT", "EU", 0, 10, "Malta", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [135, "MH", "MHL", "AU", 0, 10, "Marshall Islands", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [136, "MQ", "MTQ", "LA", 0, 10, "Martinique", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [137, "MR", "MRT", "AF", 0, 10, "Mauritania", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [138, "MU", "MUS", "AF", 0, 10, "Mauritius", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [139, "YT", "MYT", "AF", 0, 10, "Mayotte", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [140, "MX", "MEX", "LA", 0, 10, "Mexico", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [141, "FM", "FSM", "AU", 0, 10, "Micronesia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [142, "MD", "MDA", "EU", 0, 10, "Moldova, Republic of", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [143, "MC", "MCO", "EU", 0, 10, "Monaco", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [144, "MN", "MNG", "AS", 0, 10, "Mongolia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [145, "MS", "MSR", "LA", 0, 10, "Montserrat", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [146, "MA", "MAR", "AF", 0, 10, "Morocco", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [147, "MZ", "MOZ", "AF", 0, 10, "Mozambique", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [148, "MM", "MMR", "AS", 0, 10, "Myanmar", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [149, "NA", "NAM", "AF", 0, 10, "Namibia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [150, "NR", "NRU", "AU", 0, 10, "Nauru", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [151, "NP", "NPL", "AS", 0, 10, "Nepal", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [152, "NL", "NLD", "EU", 0, 10, "Netherlands", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [153, "AN", "ANT", "LA", 0, 10, "Netherlands Antilles", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [154, "NC", "NCL", "AU", 0, 10, "New Caledonia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [155, "NZ", "NZL", "AU", 1, 2, "New Zealand", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:19:12+08:00", 1634878320],
                [156, "NI", "NIC", "LA", 0, 10, "Nicaragua", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [157, "NE", "NER", "AF", 0, 10, "Niger", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [158, "NG", "NGA", "AF", 0, 10, "Nigeria", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [159, "NU", "NIU", "AU", 0, 10, "Niue", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [160, "NF", "NFK", "AU", 0, 10, "Norfolk Island", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [161, "MP", "MNP", "AU", 0, 10, "Northern Mariana Islands", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [162, "NO", "NOR", "EU", 0, 10, "Norway", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [163, "OM", "OMN", "AS", 0, 10, "Oman", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [164, "PK", "PAK", "AS", 0, 10, "Pakistan", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [165, "PW", "PLW", "AU", 0, 10, "Palau", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [166, "PA", "PAN", "LA", 0, 10, "Panama", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [167, "PG", "PNG", "AS", 0, 10, "Papua New Guinea", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [168, "PY", "PRY", "LA", 0, 10, "Paraguay", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [169, "PE", "PER", "LA", 0, 10, "Peru", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [170, "PH", "PHL", "AS", 0, 10, "Philippines", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [171, "PN", "PCN", "AU", 0, 10, "Pitcairn", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [172, "PL", "POL", "EU", 0, 10, "Poland", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [173, "PT", "PRT", "EU", 0, 10, "Portugal", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [174, "PR", "PRI", "LA", 0, 10, "Puerto Rico", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [175, "QA", "QAT", "AS", 0, 10, "Qatar", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [176, "RE", "REU", "AF", 0, 10, "Reunion", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [177, "RO", "ROU", "EU", 0, 10, "Romania", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [178, "RU", "RUS", "EU", 0, 10, "Russian Federation", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [179, "RW", "RWA", "AF", 0, 10, "Rwanda", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [180, "LC", "LCA", "LA", 0, 10, "Saint Lucia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [181, "WS", "WSM", "AU", 0, 10, "Samoa", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [182, "SM", "SMR", "EU", 0, 10, "San Marino", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [183, "ST", "STP", "AF", 0, 10, "Sao Tome and Principe", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [184, "SA", "SAU", "AS", 0, 10, "Saudi Arabia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [185, "SN", "SEN", "AF", 0, 10, "Senegal", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [186, "SC", "SYC", "AF", 0, 10, "Seychelles", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [187, "SL", "SLE", "AF", 0, 10, "Sierra Leone", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [188, "SG", "SGP", "AS", 0, 10, "Singapore", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [189, "SK", "SVK", "EU", 0, 10, "Slovakia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [190, "SI", "SVN", "EU", 0, 10, "Slovenia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [191, "SB", "SLB", "AU", 0, 10, "Solomon Islands", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [192, "SO", "SOM", "AF", 0, 10, "Somalia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [193, "ZA", "ZAF", "AF", 0, 10, "South Africa", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [194, "ES", "ESP", "EU", 0, 10, "Spain", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [195, "LK", "LKA", "AS", 0, 10, "Sri Lanka", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [196, "SH", "SHN", "AF", 0, 10, "St. Helena", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [197, "KN", "KNA", "LA", 0, 10, "St. Kitts and Nevis", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [198, "PM", "SPM", "NA", 0, 10, "St. Pierre and Miquelon", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [199, "VC", "VCT", "LA", 0, 10, "St. Vincent and the Grenadines", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [200, "SD", "SDN", "AF", 0, 10, "Sudan", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [201, "SR", "SUR", "LA", 0, 10, "Suriname", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [202, "SJ", "SJM", "EU", 0, 10, "Svalbard and Jan Mayen Islands", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [203, "SZ", "SWZ", "AF", 0, 10, "Swaziland", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [204, "SE", "SWE", "EU", 0, 10, "Sweden", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [205, "CH", "CHE", "EU", 0, 10, "Switzerland", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [206, "SY", "SYR", "AS", 0, 10, "Syrian Arab Republic", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [207, "TW", "TWN", "AS", 0, 10, "Taiwan", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [208, "TJ", "TJK", "AS", 0, 10, "Tajikistan", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [209, "TZ", "TZA", "AF", 0, 10, "Tanzania, United Republic of", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [210, "TH", "THA", "AS", 0, 10, "Thailand", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [211, "TG", "TGO", "AF", 0, 10, "Togo", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [212, "TK", "TKL", "AU", 0, 10, "Tokelau", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [213, "TO", "TON", "AU", 0, 10, "Tonga", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [214, "TT", "TTO", "LA", 0, 10, "Trinidad and Tobago", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [215, "TN", "TUN", "AF", 0, 10, "Tunisia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [216, "TR", "TUR", "EU", 0, 10, "Turkey", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [217, "TM", "TKM", "AS", 0, 10, "Turkmenistan", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [218, "TC", "TCA", "LA", 0, 10, "Turks and Caicos Islands", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [219, "TV", "TUV", "AU", 0, 10, "Tuvalu", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [220, "UG", "UGA", "AF", 0, 10, "Uganda", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [221, "UA", "UKR", "EU", 0, 10, "Ukraine", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [222, "AE", "ARE", "AS", 0, 10, "United Arab Emirates", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [223, "GB", "GBR", "EU", 0, 3, "United Kingdom (Great Britain)", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [224, "US", "USA", "NA", 0, 6, "United States", "/\\d{5}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [225, "VI", "VIR", "LA", 0, 10, "United States Virgin Islands", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [226, "UY", "URY", "LA", 0, 10, "Uruguay", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [227, "UZ", "UZB", "AS", 0, 10, "Uzbekistan", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [228, "VU", "VUT", "AU", 0, 10, "Vanuatu", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [229, "VA", "VAT", "EU", 0, 10, "Vatican City State", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [230, "VE", "VEN", "LA", 0, 10, "Venezuela", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [231, "VN", "VNM", "AS", 0, 10, "Viet Nam", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [232, "WF", "WLF", "AU", 0, 10, "Wallis And Futuna Islands", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [233, "EH", "ESH", "AF", 0, 10, "Western Sahara", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [234, "YE", "YEM", "AS", 0, 10, "Yemen", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [236, "ZR", "ZAR", "AF", 0, 10, "Zaire", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [237, "ZM", "ZMB", "AF", 0, 10, "Zambia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [238, "ZW", "ZWE", "AF", 0, 10, "Zimbabwe", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [239, "AP", "", "", 0, 10, "Asia-Pacific", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [240, "RS", "SRB", "EU", 0, 10, "Serbia", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2017-07-21T08:52:57+08:00", 1634878320],
                [241, "AX", "", "", 0, 10, "Aland Islands", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [242, "EU", "", "", 0, 10, "Europe", "/\\d{4}/", "", 1, "2009-03-03T11:43:39+09:00", "2009-08-07T13:18:53+08:00", 1634878320],
                [243, "ME", "MNE", "EU", 0, 10, "Montenegro", "/d{4}/", "", 1, "2013-05-18T08:00:00+08:00", "2013-05-28T19:54:49+08:00", 1634878320],
                [244, "GG", "GGY", "EU", 0, 10, "Guernsey", "/d{4}/", "", 1, "2017-07-05T11:00:00+08:00", "2017-07-05T11:12:44+08:00", 1634878320],
                [245, "JE", "JEY", "EU", 0, 10, "Jersey", "/d{4}/", "", 1, "2017-07-05T11:00:00+08:00", "2017-07-05T11:12:44+08:00", 1634878320],
                [246, "IM", "IMN", "EU", 0, 10, "Isle of Man", "/d{4}/", "", 1, "2017-07-06T15:00:00+08:00", "2017-07-06T15:21:08+08:00", 1634878320],
                [247, "BL", "BLM", "LA", 0, 10, "Saint Barthelemy", "/d{4}/", "", 1, "2017-09-07T15:00:00+08:00", "2017-09-07T12:31:49+08:00", 1634878320],
                [248, "BQ", "BES", "LA", 0, 10, "Bonaire, Saint Eustatius and Saba", "/d{4}/", "", 1, "2017-09-07T15:00:00+08:00", "2017-09-07T12:31:49+08:00", 1634878320],
                [249, "GS", "SGS", "LA", 0, 10, "South Georgia and the South Sandwich Islands", "/d{4}/", "", 1, "2017-09-07T15:00:00+08:00", "2017-09-07T12:31:49+08:00", 1634878320],
                [250, "MF", "MAF", "LA", 0, 10, "Saint Martin (French part)", "/d{4}/", "", 1, "2017-09-07T15:00:00+08:00", "2017-09-07T12:31:49+08:00", 1634878320],
                [251, "SS", "SSD", "AF", 0, 10, "South Sudan", "/d{4}/", "", 1, "2017-09-07T15:00:00+08:00", "2017-09-07T12:31:49+08:00", 1634878320],
                [252, "XK", "XKX", "EU", 0, 10, "Kosovo", "/d{4}/", "", 1, "2017-09-07T15:00:00+08:00", "2017-09-07T12:31:49+08:00", 1634878320]
            ]
        },
        {
            "name": "custom_app_data",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "DocumentId",
                    "value": "TEXT"
                },
                {
                    "column": "Data",
                    "value": "TEXT"
                },
                {
                    "column": "KeyInt",
                    "value": "INTEGER"
                },
                {
                    "column": "KeyString",
                    "value": "TEXT"
                },
                {
                    "column": "Label",
                    "value": "TEXT"
                },
                {
                    "column": "OperationalUnit",
                    "value": "INTEGER"
                },
                {
                    "column": "Employee",
                    "value": "INTEGER"
                },
                {
                    "column": "Permission",
                    "value": "TEXT"
                },
                {
                    "column": "Deleted",
                    "value": "NUMERIC"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "custom_fields",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "System",
                    "value": "TEXT"
                },
                {
                    "column": "Name",
                    "value": "TEXT"
                },
                {
                    "column": "ApiName",
                    "value": "TEXT"
                },
                {
                    "column": "DeputyField",
                    "value": "TEXT"
                },
                {
                    "column": "SortOrder",
                    "value": "INTEGER"
                },
                {
                    "column": "`Default`",
                    "value": "TEXT"
                },
                {
                    "column": "Type",
                    "value": "INTEGER"
                },
                {
                    "column": "DisplayTiming",
                    "value": "INTEGER"
                },
                {
                    "column": "ConditionalRules",
                    "value": "TEXT"
                },
                {
                    "column": "`Action`",
                    "value": "INTEGER"
                },
                {
                    "column": "Published",
                    "value": "INTEGER"
                },
                {
                    "column": "Valuelist",
                    "value": "TEXT"
                },
                {
                    "column": "TriggerScript",
                    "value": "INTEGER"
                },
                {
                    "column": "Validation",
                    "value": "TEXT"
                },
                {
                    "column": "Helptext",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "custom_field_data",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "System",
                    "value": "TEXT"
                },
                {
                    "column": "F01",
                    "value": "TEXT"
                },
                {
                    "column": "F02",
                    "value": "TEXT"
                },
                {
                    "column": "F03",
                    "value": "TEXT"
                },
                {
                    "column": "F04",
                    "value": "TEXT"
                },
                {
                    "column": "F05",
                    "value": "TEXT"
                },
                {
                    "column": "F06",
                    "value": "TEXT"
                },
                {
                    "column": "F07",
                    "value": "TEXT"
                },
                {
                    "column": "F08",
                    "value": "TEXT"
                },
                {
                    "column": "F09",
                    "value": "TEXT"
                },
                {
                    "column": "F10",
                    "value": "TEXT"
                },
                {
                    "column": "F11",
                    "value": "TEXT"
                },
                {
                    "column": "F12",
                    "value": "TEXT"
                },
                {
                    "column": "F13",
                    "value": "TEXT"
                },
                {
                    "column": "F14",
                    "value": "TEXT"
                },
                {
                    "column": "F15",
                    "value": "TEXT"
                },
                {
                    "column": "F16",
                    "value": "TEXT"
                },
                {
                    "column": "F17",
                    "value": "TEXT"
                },
                {
                    "column": "F18",
                    "value": "TEXT"
                },
                {
                    "column": "F19",
                    "value": "TEXT"
                },
                {
                    "column": "F20",
                    "value": "TEXT"
                },
                {
                    "column": "F21",
                    "value": "TEXT"
                },
                {
                    "column": "F22",
                    "value": "TEXT"
                },
                {
                    "column": "F23",
                    "value": "TEXT"
                },
                {
                    "column": "F24",
                    "value": "TEXT"
                },
                {
                    "column": "F25",
                    "value": "TEXT"
                },
                {
                    "column": "F26",
                    "value": "TEXT"
                },
                {
                    "column": "F27",
                    "value": "TEXT"
                },
                {
                    "column": "F28",
                    "value": "TEXT"
                },
                {
                    "column": "F29",
                    "value": "TEXT"
                },
                {
                    "column": "F30",
                    "value": "TEXT"
                },
                {
                    "column": "F31",
                    "value": "TEXT"
                },
                {
                    "column": "F32",
                    "value": "TEXT"
                },
                {
                    "column": "F33",
                    "value": "TEXT"
                },
                {
                    "column": "F34",
                    "value": "TEXT"
                },
                {
                    "column": "F35",
                    "value": "TEXT"
                },
                {
                    "column": "F36",
                    "value": "TEXT"
                },
                {
                    "column": "F37",
                    "value": "TEXT"
                },
                {
                    "column": "F38",
                    "value": "TEXT"
                },
                {
                    "column": "F39",
                    "value": "TEXT"
                },
                {
                    "column": "F40",
                    "value": "TEXT"
                },
                {
                    "column": "F41",
                    "value": "TEXT"
                },
                {
                    "column": "F42",
                    "value": "TEXT"
                },
                {
                    "column": "F43",
                    "value": "TEXT"
                },
                {
                    "column": "F44",
                    "value": "TEXT"
                },
                {
                    "column": "F45",
                    "value": "TEXT"
                },
                {
                    "column": "F46",
                    "value": "TEXT"
                },
                {
                    "column": "F47",
                    "value": "TEXT"
                },
                {
                    "column": "F48",
                    "value": "TEXT"
                },
                {
                    "column": "F49",
                    "value": "TEXT"
                },
                {
                    "column": "F50",
                    "value": "TEXT"
                },
                {
                    "column": "F51",
                    "value": "TEXT"
                },
                {
                    "column": "F52",
                    "value": "TEXT"
                },
                {
                    "column": "F53",
                    "value": "TEXT"
                },
                {
                    "column": "F54",
                    "value": "TEXT"
                },
                {
                    "column": "F55",
                    "value": "TEXT"
                },
                {
                    "column": "F56",
                    "value": "TEXT"
                },
                {
                    "column": "F57",
                    "value": "TEXT"
                },
                {
                    "column": "F58",
                    "value": "TEXT"
                },
                {
                    "column": "F59",
                    "value": "TEXT"
                },
                {
                    "column": "F60",
                    "value": "TEXT"
                },
                {
                    "column": "F61",
                    "value": "TEXT"
                },
                {
                    "column": "F62",
                    "value": "TEXT"
                },
                {
                    "column": "F63",
                    "value": "TEXT"
                },
                {
                    "column": "F64",
                    "value": "TEXT"
                },
                {
                    "column": "F65",
                    "value": "TEXT"
                },
                {
                    "column": "F66",
                    "value": "TEXT"
                },
                {
                    "column": "F67",
                    "value": "TEXT"
                },
                {
                    "column": "F68",
                    "value": "TEXT"
                },
                {
                    "column": "F69",
                    "value": "TEXT"
                },
                {
                    "column": "F70",
                    "value": "TEXT"
                },
                {
                    "column": "F71",
                    "value": "TEXT"
                },
                {
                    "column": "F72",
                    "value": "TEXT"
                },
                {
                    "column": "F73",
                    "value": "TEXT"
                },
                {
                    "column": "F74",
                    "value": "TEXT"
                },
                {
                    "column": "F75",
                    "value": "TEXT"
                },
                {
                    "column": "F76",
                    "value": "TEXT"
                },
                {
                    "column": "F77",
                    "value": "TEXT"
                },
                {
                    "column": "F78",
                    "value": "TEXT"
                },
                {
                    "column": "F79",
                    "value": "TEXT"
                },
                {
                    "column": "F80",
                    "value": "TEXT"
                },
                {
                    "column": "F81",
                    "value": "TEXT"
                },
                {
                    "column": "F82",
                    "value": "TEXT"
                },
                {
                    "column": "F83",
                    "value": "TEXT"
                },
                {
                    "column": "F84",
                    "value": "TEXT"
                },
                {
                    "column": "F85",
                    "value": "TEXT"
                },
                {
                    "column": "F86",
                    "value": "TEXT"
                },
                {
                    "column": "F87",
                    "value": "TEXT"
                },
                {
                    "column": "F88",
                    "value": "TEXT"
                },
                {
                    "column": "F89",
                    "value": "TEXT"
                },
                {
                    "column": "F90",
                    "value": "TEXT"
                },
                {
                    "column": "F91",
                    "value": "TEXT"
                },
                {
                    "column": "F92",
                    "value": "TEXT"
                },
                {
                    "column": "F93",
                    "value": "TEXT"
                },
                {
                    "column": "F94",
                    "value": "TEXT"
                },
                {
                    "column": "F95",
                    "value": "TEXT"
                },
                {
                    "column": "F96",
                    "value": "TEXT"
                },
                {
                    "column": "F97",
                    "value": "TEXT"
                },
                {
                    "column": "F98",
                    "value": "TEXT"
                },
                {
                    "column": "F99",
                    "value": "TEXT"
                },
                {
                    "column": "F100",
                    "value": "TEXT"
                },
                {
                    "column": "F101",
                    "value": "TEXT"
                },
                {
                    "column": "F102",
                    "value": "TEXT"
                },
                {
                    "column": "F103",
                    "value": "TEXT"
                },
                {
                    "column": "F104",
                    "value": "TEXT"
                },
                {
                    "column": "F105",
                    "value": "TEXT"
                },
                {
                    "column": "F106",
                    "value": "TEXT"
                },
                {
                    "column": "F107",
                    "value": "TEXT"
                },
                {
                    "column": "F108",
                    "value": "TEXT"
                },
                {
                    "column": "F109",
                    "value": "TEXT"
                },
                {
                    "column": "F110",
                    "value": "TEXT"
                },
                {
                    "column": "F111",
                    "value": "TEXT"
                },
                {
                    "column": "F112",
                    "value": "TEXT"
                },
                {
                    "column": "F113",
                    "value": "TEXT"
                },
                {
                    "column": "F114",
                    "value": "TEXT"
                },
                {
                    "column": "F115",
                    "value": "TEXT"
                },
                {
                    "column": "F116",
                    "value": "TEXT"
                },
                {
                    "column": "F117",
                    "value": "TEXT"
                },
                {
                    "column": "F118",
                    "value": "TEXT"
                },
                {
                    "column": "F119",
                    "value": "TEXT"
                },
                {
                    "column": "F120",
                    "value": "TEXT"
                },
                {
                    "column": "F121",
                    "value": "TEXT"
                },
                {
                    "column": "F122",
                    "value": "TEXT"
                },
                {
                    "column": "F123",
                    "value": "TEXT"
                },
                {
                    "column": "F124",
                    "value": "TEXT"
                },
                {
                    "column": "F125",
                    "value": "TEXT"
                },
                {
                    "column": "F126",
                    "value": "TEXT"
                },
                {
                    "column": "F127",
                    "value": "TEXT"
                },
                {
                    "column": "F128",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "employees",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Company",
                    "value": "INTEGER"
                },
                {
                    "column": "FirstName",
                    "value": "TEXT"
                },
                {
                    "column": "LastName",
                    "value": "TEXT"
                },
                {
                    "column": "DisplayName",
                    "value": "TEXT"
                },
                {
                    "column": "OtherName",
                    "value": "TEXT"
                },
                {
                    "column": "Salutation",
                    "value": "TEXT"
                },
                {
                    "column": "MainAddress",
                    "value": "INTEGER"
                },
                {
                    "column": "PostalAddress",
                    "value": "INTEGER"
                },
                {
                    "column": "Contact",
                    "value": "INTEGER"
                },
                {
                    "column": "EmergencyAddress",
                    "value": "INTEGER"
                },
                {
                    "column": "DateOfBirth",
                    "value": "TEXT"
                },
                {
                    "column": "Gender",
                    "value": "INTEGER"
                },
                {
                    "column": "Photo",
                    "value": "INTEGER"
                },
                {
                    "column": "UserId",
                    "value": "INTEGER"
                },
                {
                    "column": "JobAppId",
                    "value": "INTEGER"
                },
                {
                    "column": "Active",
                    "value": "NUMERIC"
                },
                {
                    "column": "StartDate",
                    "value": "TEXT"
                },
                {
                    "column": "TerminationDate",
                    "value": "TEXT"
                },
                {
                    "column": "StressProfile",
                    "value": "INTEGER"
                },
                {
                    "column": "Position",
                    "value": "TEXT"
                },
                {
                    "column": "HigherDuty",
                    "value": "NUMERIC"
                },
                {
                    "column": "Role",
                    "value": "INTEGER"
                },
                {
                    "column": "AllowAppraisal",
                    "value": "NUMERIC"
                },
                {
                    "column": "HistoryId",
                    "value": "INTEGER"
                },
                {
                    "column": "CustomFieldData",
                    "value": "INTEGER"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "employee_agreements",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "EmployeeId",
                    "value": "INTEGER"
                },
                {
                    "column": "PayPoint",
                    "value": "INTEGER"
                },
                {
                    "column": "EmpType",
                    "value": "INTEGER"
                },
                {
                    "column": "CompanyName",
                    "value": "TEXT"
                },
                {
                    "column": "Active",
                    "value": "NUMERIC"
                },
                {
                    "column": "StartDate",
                    "value": "TEXT"
                },
                {
                    "column": "EndDate",
                    "value": "TEXT"
                },
                {
                    "column": "Contract",
                    "value": "INTEGER"
                },
                {
                    "column": "SalaryPayRule",
                    "value": "INTEGER"
                },
                {
                    "column": "ContractFile",
                    "value": "INTEGER"
                },
                {
                    "column": "PayrollId",
                    "value": "TEXT"
                },
                {
                    "column": "PayPeriod",
                    "value": "INTEGER"
                },
                {
                    "column": "HistoryId",
                    "value": "INTEGER"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "employee_agreement_history",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "AgreementId",
                    "value": "INTEGER"
                },
                {
                    "column": "PayPoint",
                    "value": "INTEGER"
                },
                {
                    "column": "EmpType",
                    "value": "INTEGER"
                },
                {
                    "column": "CompanyName",
                    "value": "TEXT"
                },
                {
                    "column": "Active",
                    "value": "NUMERIC"
                },
                {
                    "column": "StartDate",
                    "value": "TEXT"
                },
                {
                    "column": "Contract",
                    "value": "INTEGER"
                },
                {
                    "column": "SalaryPayRule",
                    "value": "INTEGER"
                },
                {
                    "column": "ContractFile",
                    "value": "INTEGER"
                },
                {
                    "column": "PayrollId",
                    "value": "TEXT"
                },
                {
                    "column": "PayPeriod",
                    "value": "INTEGER"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "employee_appraisal",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Employee",
                    "value": "INTEGER"
                },
                {
                    "column": "DayTimestamp",
                    "value": "INTEGER"
                },
                {
                    "column": "Date",
                    "value": "TEXT"
                },
                {
                    "column": "Mark01",
                    "value": "REAL"
                },
                {
                    "column": "Mark02",
                    "value": "REAL"
                },
                {
                    "column": "Mark03",
                    "value": "REAL"
                },
                {
                    "column": "Mark04",
                    "value": "REAL"
                },
                {
                    "column": "Mark05",
                    "value": "REAL"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "employee_availability",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Employee",
                    "value": "INTEGER"
                },
                {
                    "column": "Type",
                    "value": "INTEGER"
                },
                {
                    "column": "MaxDateRecurringGenerated",
                    "value": "TEXT"
                },
                {
                    "column": "StartTime",
                    "value": "INTEGER"
                },
                {
                    "column": "EndTime",
                    "value": "INTEGER"
                },
                {
                    "column": "Date",
                    "value": "TEXT"
                },
                {
                    "column": "Comment",
                    "value": "TEXT"
                },
                {
                    "column": "Schedule",
                    "value": "INTEGER"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "employee_history",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Company",
                    "value": "INTEGER"
                },
                {
                    "column": "FirstName",
                    "value": "TEXT"
                },
                {
                    "column": "LastName",
                    "value": "TEXT"
                },
                {
                    "column": "DisplayName",
                    "value": "TEXT"
                },
                {
                    "column": "OtherName",
                    "value": "TEXT"
                },
                {
                    "column": "Salutation",
                    "value": "TEXT"
                },
                {
                    "column": "MainAddress",
                    "value": "INTEGER"
                },
                {
                    "column": "PostalAddress",
                    "value": "INTEGER"
                },
                {
                    "column": "EmergencyAddress",
                    "value": "INTEGER"
                },
                {
                    "column": "DateOfBirth",
                    "value": "TEXT"
                },
                {
                    "column": "Gender",
                    "value": "INTEGER"
                },
                {
                    "column": "Photo",
                    "value": "INTEGER"
                },
                {
                    "column": "JobAppId",
                    "value": "INTEGER"
                },
                {
                    "column": "Active",
                    "value": "NUMERIC"
                },
                {
                    "column": "StartDate",
                    "value": "TEXT"
                },
                {
                    "column": "TerminationDate",
                    "value": "TEXT"
                },
                {
                    "column": "Position",
                    "value": "TEXT"
                },
                {
                    "column": "Role",
                    "value": "INTEGER"
                },
                {
                    "column": "EmployeeId",
                    "value": "INTEGER"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "employee_paycycles",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "EmployeeId",
                    "value": "INTEGER"
                },
                {
                    "column": "EmployeeAgreementId",
                    "value": "INTEGER"
                },
                {
                    "column": "PeriodId",
                    "value": "INTEGER"
                },
                {
                    "column": "RecommendedLoadings",
                    "value": "NUMERIC"
                },
                {
                    "column": "Timesheets",
                    "value": "INTEGER"
                },
                {
                    "column": "TimesheetsTimeApproved",
                    "value": "INTEGER"
                },
                {
                    "column": "TimesheetsPayApproved",
                    "value": "INTEGER"
                },
                {
                    "column": "PaycycleRules",
                    "value": "INTEGER"
                },
                {
                    "column": "PaycycleRulesApproved",
                    "value": "INTEGER"
                },
                {
                    "column": "Exported",
                    "value": "NUMERIC"
                },
                {
                    "column": "ExportId",
                    "value": "INTEGER"
                },
                {
                    "column": "Paid",
                    "value": "NUMERIC"
                },
                {
                    "column": "TimeTotal",
                    "value": "REAL"
                },
                {
                    "column": "CostTotal",
                    "value": "REAL"
                },
                {
                    "column": "EmployeeAgreementHistoryId",
                    "value": "INTEGER"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "employee_paycycle_returns",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "PaycycleId",
                    "value": "INTEGER"
                },
                {
                    "column": "PayRule",
                    "value": "INTEGER"
                },
                {
                    "column": "Approved",
                    "value": "NUMERIC"
                },
                {
                    "column": "Overridden",
                    "value": "NUMERIC"
                },
                {
                    "column": "Value",
                    "value": "REAL"
                },
                {
                    "column": "Cost",
                    "value": "REAL"
                },
                {
                    "column": "OverrideComment",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "employee_roles",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Role",
                    "value": "TEXT"
                },
                {
                    "column": "Ranking",
                    "value": "INTEGER"
                },
                {
                    "column": "ReportTo",
                    "value": "INTEGER"
                },
                {
                    "column": "Permissions",
                    "value": "TEXT"
                },
                {
                    "column": "Require2fa",
                    "value": "NUMERIC"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "employee_salary_opunit_costing",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Employee",
                    "value": "INTEGER"
                },
                {
                    "column": "EmployeeAgreement",
                    "value": "INTEGER"
                },
                {
                    "column": "AgreementHistory",
                    "value": "INTEGER"
                },
                {
                    "column": "DayTimestamp",
                    "value": "INTEGER"
                },
                {
                    "column": "Date",
                    "value": "TEXT"
                },
                {
                    "column": "OpUnit",
                    "value": "INTEGER"
                },
                {
                    "column": "Cost",
                    "value": "REAL"
                },
                {
                    "column": "Final",
                    "value": "NUMERIC"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "employee_workplaces",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "EmployeeId",
                    "value": "INTEGER"
                },
                {
                    "column": "Company",
                    "value": "INTEGER"
                },
                {
                    "column": "SortOrder",
                    "value": "INTEGER"
                },
                {
                    "column": "Agreement1",
                    "value": "INTEGER"
                },
                {
                    "column": "Agreement2",
                    "value": "INTEGER"
                },
                {
                    "column": "Agreement3",
                    "value": "INTEGER"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "employment_conditions",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Name",
                    "value": "TEXT"
                },
                {
                    "column": "Description",
                    "value": "TEXT"
                },
                {
                    "column": "AwardLevel",
                    "value": "TEXT"
                },
                {
                    "column": "EmploymentBasis",
                    "value": "INTEGER"
                },
                {
                    "column": "EmploymentCategory",
                    "value": "INTEGER"
                },
                {
                    "column": "EmploymentPeriod",
                    "value": "INTEGER"
                },
                {
                    "column": "EmploymentStatus",
                    "value": "INTEGER"
                },
                {
                    "column": "ProbationaryPeriod",
                    "value": "INTEGER"
                },
                {
                    "column": "WorkingDaysPerPeriod",
                    "value": "REAL"
                },
                {
                    "column": "UsualStartTime",
                    "value": "TEXT"
                },
                {
                    "column": "UsualFinishTime",
                    "value": "TEXT"
                },
                {
                    "column": "UsualMealbreak",
                    "value": "TEXT"
                },
                {
                    "column": "AvgHoursPerDay",
                    "value": "REAL"
                },
                {
                    "column": "MinHoursPerDay",
                    "value": "REAL"
                },
                {
                    "column": "MinHoursForLeave",
                    "value": "REAL"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "employee_contracts",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Code",
                    "value": "TEXT"
                },
                {
                    "column": "Name",
                    "value": "TEXT"
                },
                {
                    "column": "Description",
                    "value": "TEXT"
                },
                {
                    "column": "EmploymentBasis",
                    "value": "INTEGER"
                },
                {
                    "column": "EmploymentCategory",
                    "value": "INTEGER"
                },
                {
                    "column": "EmploymentStatus",
                    "value": "INTEGER"
                },
                {
                    "column": "EmploymentCondition",
                    "value": "INTEGER"
                },
                {
                    "column": "BasePayRule",
                    "value": "INTEGER"
                },
                {
                    "column": "StressProfile",
                    "value": "INTEGER"
                },
                {
                    "column": "StartDate",
                    "value": "TEXT"
                },
                {
                    "column": "EndDate",
                    "value": "TEXT"
                },
                {
                    "column": "PeriodType",
                    "value": "INTEGER"
                },
                {
                    "column": "File",
                    "value": "INTEGER"
                },
                {
                    "column": "StrictLeaveApproval",
                    "value": "NUMERIC"
                },
                {
                    "column": "Award",
                    "value": "TEXT"
                },
                {
                    "column": "EmploymentSubType",
                    "value": "TEXT"
                },
                {
                    "column": "AwardStartDate",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "employee_contract_leave_rules",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "ContractId",
                    "value": "INTEGER"
                },
                {
                    "column": "LeaveRuleId",
                    "value": "INTEGER"
                },
                {
                    "column": "BasePayRule",
                    "value": "INTEGER"
                },
                {
                    "column": "LoadingPayRule1",
                    "value": "INTEGER"
                },
                {
                    "column": "LoadingPayRule2",
                    "value": "INTEGER"
                },
                {
                    "column": "LoadingPayRule3",
                    "value": "INTEGER"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "events",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Title",
                    "value": "TEXT"
                },
                {
                    "column": "Schedule",
                    "value": "INTEGER"
                },
                {
                    "column": "Colour",
                    "value": "TEXT"
                },
                {
                    "column": "ShowOnRoster",
                    "value": "NUMERIC"
                },
                {
                    "column": "AddToBudget",
                    "value": "REAL"
                },
                {
                    "column": "BlockTimeOff",
                    "value": "NUMERIC"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "geo",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Orm",
                    "value": "TEXT"
                },
                {
                    "column": "RecId",
                    "value": "INTEGER"
                },
                {
                    "column": "Longitude",
                    "value": "REAL"
                },
                {
                    "column": "Latitude",
                    "value": "REAL"
                },
                {
                    "column": "No",
                    "value": "TEXT"
                },
                {
                    "column": "Street",
                    "value": "TEXT"
                },
                {
                    "column": "Suburb",
                    "value": "TEXT"
                },
                {
                    "column": "State",
                    "value": "TEXT"
                },
                {
                    "column": "Postcode",
                    "value": "TEXT"
                },
                {
                    "column": "Country",
                    "value": "INTEGER"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "journal",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Date",
                    "value": "TEXT"
                },
                {
                    "column": "EmployeeId",
                    "value": "INTEGER"
                },
                {
                    "column": "Comment",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "kiosks",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Name",
                    "value": "TEXT"
                },
                {
                    "column": "InstallationId",
                    "value": "TEXT"
                },
                {
                    "column": "Company",
                    "value": "INTEGER"
                },
                {
                    "column": "ConnectionMode",
                    "value": "INTEGER"
                },
                {
                    "column": "SubnetRestriction",
                    "value": "TEXT"
                },
                {
                    "column": "AuthenticationMode",
                    "value": "INTEGER"
                },
                {
                    "column": "UseBiometric",
                    "value": "NUMERIC"
                },
                {
                    "column": "LastActivity",
                    "value": "TEXT"
                },
                {
                    "column": "IpAddress",
                    "value": "TEXT"
                },
                {
                    "column": "EnableMultiLocations",
                    "value": "NUMERIC"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "leaves",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Employee",
                    "value": "INTEGER"
                },
                {
                    "column": "EmployeeHistory",
                    "value": "INTEGER"
                },
                {
                    "column": "Company",
                    "value": "INTEGER"
                },
                {
                    "column": "LeaveRule",
                    "value": "INTEGER"
                },
                {
                    "column": "Start",
                    "value": "INTEGER"
                },
                {
                    "column": "DateStart",
                    "value": "TEXT"
                },
                {
                    "column": "`End`",
                    "value": "INTEGER"
                },
                {
                    "column": "DateEnd",
                    "value": "TEXT"
                },
                {
                    "column": "Days",
                    "value": "REAL"
                },
                {
                    "column": "ApproverTime",
                    "value": "INTEGER"
                },
                {
                    "column": "ApproverPay",
                    "value": "INTEGER"
                },
                {
                    "column": "Comment",
                    "value": "TEXT"
                },
                {
                    "column": "Status",
                    "value": "INTEGER"
                },
                {
                    "column": "ApprovalComment",
                    "value": "TEXT"
                },
                {
                    "column": "TotalHours",
                    "value": "REAL"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "leave_accruals",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Employee",
                    "value": "INTEGER"
                },
                {
                    "column": "EmployeeHistory",
                    "value": "INTEGER"
                },
                {
                    "column": "TransactionDate",
                    "value": "TEXT"
                },
                {
                    "column": "Type",
                    "value": "INTEGER"
                },
                {
                    "column": "LeaveRule",
                    "value": "INTEGER"
                },
                {
                    "column": "Hours",
                    "value": "REAL"
                },
                {
                    "column": "Days",
                    "value": "REAL"
                },
                {
                    "column": "Comment",
                    "value": "TEXT"
                },
                {
                    "column": "FkId",
                    "value": "INTEGER"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "leave_pay_lines",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "LeaveId",
                    "value": "INTEGER"
                },
                {
                    "column": "LeaveRule",
                    "value": "INTEGER"
                },
                {
                    "column": "EmployeeAgreement",
                    "value": "INTEGER"
                },
                {
                    "column": "Date",
                    "value": "TEXT"
                },
                {
                    "column": "StartTime",
                    "value": "TEXT"
                },
                {
                    "column": "EndTime",
                    "value": "TEXT"
                },
                {
                    "column": "Hours",
                    "value": "TEXT"
                },
                {
                    "column": "Comment",
                    "value": "TEXT"
                },
                {
                    "column": "TimesheetId",
                    "value": "INTEGER"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "leave_rules",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Name",
                    "value": "TEXT"
                },
                {
                    "column": "Type",
                    "value": "TEXT"
                },
                {
                    "column": "Description",
                    "value": "TEXT"
                },
                {
                    "column": "MaxAllowedAnnually",
                    "value": "REAL"
                },
                {
                    "column": "PaidLeave",
                    "value": "NUMERIC"
                },
                {
                    "column": "AnnualRollOver",
                    "value": "NUMERIC"
                },
                {
                    "column": "Visible",
                    "value": "NUMERIC"
                },
                {
                    "column": "UnitType",
                    "value": "INTEGER"
                },
                {
                    "column": "ResetType",
                    "value": "INTEGER"
                },
                {
                    "column": "ResetSchedule",
                    "value": "INTEGER"
                },
                {
                    "column": "ResetValue",
                    "value": "REAL"
                },
                {
                    "column": "PayoutOnTermination",
                    "value": "NUMERIC"
                },
                {
                    "column": "EntitlementAfterMonth",
                    "value": "INTEGER"
                },
                {
                    "column": "ExportType",
                    "value": "INTEGER"
                },
                {
                    "column": "PayrollCategory",
                    "value": "TEXT"
                },
                {
                    "column": "CalcType",
                    "value": "INTEGER"
                },
                {
                    "column": "Calc",
                    "value": "TEXT"
                },
                {
                    "column": "F00",
                    "value": "TEXT"
                },
                {
                    "column": "F01",
                    "value": "TEXT"
                },
                {
                    "column": "F02",
                    "value": "TEXT"
                },
                {
                    "column": "F03",
                    "value": "TEXT"
                },
                {
                    "column": "F04",
                    "value": "TEXT"
                },
                {
                    "column": "F05",
                    "value": "TEXT"
                },
                {
                    "column": "F06",
                    "value": "TEXT"
                },
                {
                    "column": "F07",
                    "value": "TEXT"
                },
                {
                    "column": "F08",
                    "value": "TEXT"
                },
                {
                    "column": "F09",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "memos",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "ShowFrom",
                    "value": "TEXT"
                },
                {
                    "column": "Active",
                    "value": "NUMERIC"
                },
                {
                    "column": "ShowTill",
                    "value": "TEXT"
                },
                {
                    "column": "Title",
                    "value": "TEXT"
                },
                {
                    "column": "Content",
                    "value": "TEXT"
                },
                {
                    "column": "Type",
                    "value": "INTEGER"
                },
                {
                    "column": "File",
                    "value": "INTEGER"
                },
                {
                    "column": "Url",
                    "value": "TEXT"
                },
                {
                    "column": "ConfirmText",
                    "value": "TEXT"
                },
                {
                    "column": "Keyword",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "_DPMetaData",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "operational_units",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "Company",
                    "value": "INTEGER"
                },
                {
                    "column": "WorkType",
                    "value": "TEXT"
                },
                {
                    "column": "ParentOperationalUnit",
                    "value": "INTEGER"
                },
                {
                    "column": "OperationalUnitName",
                    "value": "TEXT"
                },
                {
                    "column": "Active",
                    "value": "NUMERIC"
                },
                {
                    "column": "PayrollExportName",
                    "value": "TEXT"
                },
                {
                    "column": "Address",
                    "value": "INTEGER"
                },
                {
                    "column": "Contact",
                    "value": "INTEGER"
                },
                {
                    "column": "RosterSortOrder",
                    "value": "INTEGER"
                },
                {
                    "column": "ShowOnRoster",
                    "value": "NUMERIC"
                },
                {
                    "column": "Colour",
                    "value": "TEXT"
                },
                {
                    "column": "RosterActiveHoursSchedule",
                    "value": "INTEGER"
                },
                {
                    "column": "DailyRosterBudget",
                    "value": "REAL"
                },
                {
                    "column": "OperationalUnitType",
                    "value": "INTEGER"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "pay_periods",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Name",
                    "value": "TEXT"
                },
                {
                    "column": "Active",
                    "value": "NUMERIC"
                },
                {
                    "column": "StartDate",
                    "value": "TEXT"
                },
                {
                    "column": "Cycle",
                    "value": "INTEGER"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "pay_rules",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "PayTitle",
                    "value": "TEXT"
                },
                {
                    "column": "RemunerationType",
                    "value": "INTEGER"
                },
                {
                    "column": "RemunerationBy",
                    "value": "INTEGER"
                },
                {
                    "column": "AnnualSalary",
                    "value": "REAL"
                },
                {
                    "column": "HourlyRate",
                    "value": "REAL"
                },
                {
                    "column": "IsMultiplier",
                    "value": "NUMERIC"
                },
                {
                    "column": "MultiplierValue",
                    "value": "REAL"
                },
                {
                    "column": "MultiplierBaseRate",
                    "value": "INTEGER"
                },
                {
                    "column": "MinimumType",
                    "value": "INTEGER"
                },
                {
                    "column": "MaximumType",
                    "value": "INTEGER"
                },
                {
                    "column": "MinimumValue",
                    "value": "REAL"
                },
                {
                    "column": "MaximumValue",
                    "value": "REAL"
                },
                {
                    "column": "MinimumShiftLength",
                    "value": "TEXT"
                },
                {
                    "column": "MaximumShiftLength",
                    "value": "TEXT"
                },
                {
                    "column": "AdvancedCalculation",
                    "value": "TEXT"
                },
                {
                    "column": "IsExported",
                    "value": "NUMERIC"
                },
                {
                    "column": "UnitValue",
                    "value": "REAL"
                },
                {
                    "column": "Schedule",
                    "value": "INTEGER"
                },
                {
                    "column": "RecommendWith",
                    "value": "INTEGER"
                },
                {
                    "column": "DexmlScript",
                    "value": "INTEGER"
                },
                {
                    "column": "DexmlScriptParam",
                    "value": "TEXT"
                },
                {
                    "column": "PeriodType",
                    "value": "INTEGER"
                },
                {
                    "column": "PayPortionRule",
                    "value": "INTEGER"
                },
                {
                    "column": "PayrollCategory",
                    "value": "TEXT"
                },
                {
                    "column": "Comment",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "public_holidays",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Title",
                    "value": "TEXT"
                },
                {
                    "column": "Schedule",
                    "value": "INTEGER"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "rosters",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Date",
                    "value": "TEXT"
                },
                {
                    "column": "StartTime",
                    "value": "INTEGER"
                },
                {
                    "column": "EndTime",
                    "value": "INTEGER"
                },
                {
                    "column": "Mealbreak",
                    "value": "TEXT"
                },
                {
                    "column": "Slots",
                    "value": "TEXT"
                },
                {
                    "column": "TotalTime",
                    "value": "REAL"
                },
                {
                    "column": "Cost",
                    "value": "REAL"
                },
                {
                    "column": "OperationalUnit",
                    "value": "INTEGER"
                },
                {
                    "column": "Employee",
                    "value": "INTEGER"
                },
                {
                    "column": "Comment",
                    "value": "TEXT"
                },
                {
                    "column": "Warning",
                    "value": "TEXT"
                },
                {
                    "column": "WarningOverrideComment",
                    "value": "TEXT"
                },
                {
                    "column": "Published",
                    "value": "NUMERIC"
                },
                {
                    "column": "MatchedByTimesheet",
                    "value": "INTEGER"
                },
                {
                    "column": "Open",
                    "value": "NUMERIC"
                },
                {
                    "column": "ApprovalRequired",
                    "value": "NUMERIC"
                },
                {
                    "column": "ConfirmStatus",
                    "value": "INTEGER"
                },
                {
                    "column": "ConfirmComment",
                    "value": "TEXT"
                },
                {
                    "column": "ConfirmBy",
                    "value": "INTEGER"
                },
                {
                    "column": "ConfirmTime",
                    "value": "INTEGER"
                },
                {
                    "column": "SwapStatus",
                    "value": "INTEGER"
                },
                {
                    "column": "SwapManageBy",
                    "value": "INTEGER"
                },
                {
                    "column": "ShiftTemplate",
                    "value": "INTEGER"
                },
                {
                    "column": "ConnectStatus",
                    "value": "INTEGER"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "roster_opens",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Roster",
                    "value": "INTEGER"
                },
                {
                    "column": "Employee",
                    "value": "INTEGER"
                },
                {
                    "column": "Accepted",
                    "value": "NUMERIC"
                },
                {
                    "column": "Seen",
                    "value": "NUMERIC"
                },
                {
                    "column": "Declined",
                    "value": "NUMERIC"
                },
                {
                    "column": "Link",
                    "value": "TEXT"
                },
                {
                    "column": "Message",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "roster_swaps",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "SourceRoster",
                    "value": "INTEGER"
                },
                {
                    "column": "TargetRoster",
                    "value": "INTEGER"
                },
                {
                    "column": "Employee",
                    "value": "INTEGER"
                },
                {
                    "column": "Status",
                    "value": "INTEGER"
                },
                {
                    "column": "RequestMessage",
                    "value": "TEXT"
                },
                {
                    "column": "ResponseMessage",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "sales_data",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Date",
                    "value": "TEXT"
                },
                {
                    "column": "Timestamp",
                    "value": "INTEGER"
                },
                {
                    "column": "Employee",
                    "value": "INTEGER"
                },
                {
                    "column": "OperationalUnit",
                    "value": "INTEGER"
                },
                {
                    "column": "SalesType",
                    "value": "TEXT"
                },
                {
                    "column": "SalesRef",
                    "value": "TEXT"
                },
                {
                    "column": "SalesQty",
                    "value": "REAL"
                },
                {
                    "column": "SalesAmount",
                    "value": "REAL"
                },
                {
                    "column": "SalesPayload",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "schedules",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Name",
                    "value": "TEXT"
                },
                {
                    "column": "StartDate",
                    "value": "TEXT"
                },
                {
                    "column": "StartTime",
                    "value": "TEXT"
                },
                {
                    "column": "EndTime",
                    "value": "TEXT"
                },
                {
                    "column": "RepeatType",
                    "value": "INTEGER"
                },
                {
                    "column": "RepeatEvery",
                    "value": "INTEGER"
                },
                {
                    "column": "WeeklyOnDays",
                    "value": "TEXT"
                },
                {
                    "column": "MonthlyOnDates",
                    "value": "TEXT"
                },
                {
                    "column": "MonthlyOnDays",
                    "value": "TEXT"
                },
                {
                    "column": "EndDate",
                    "value": "TEXT"
                },
                {
                    "column": "Exception",
                    "value": "TEXT"
                },
                {
                    "column": "Saved",
                    "value": "NUMERIC"
                },
                {
                    "column": "Orm",
                    "value": "TEXT"
                },
                {
                    "column": "Template",
                    "value": "NUMERIC"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "sms_logs",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Destination",
                    "value": "TEXT"
                },
                {
                    "column": "Message",
                    "value": "TEXT"
                },
                {
                    "column": "Count",
                    "value": "INTEGER"
                },
                {
                    "column": "SmsId",
                    "value": "TEXT"
                },
                {
                    "column": "DeliveryReport",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "states",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Country",
                    "value": "INTEGER"
                },
                {
                    "column": "Code",
                    "value": "TEXT"
                },
                {
                    "column": "Active",
                    "value": "NUMERIC"
                },
                {
                    "column": "SortOrder",
                    "value": "INTEGER"
                },
                {
                    "column": "State",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ],
            "values": [
                [10, 224, "AL", 1, 10, "Alabama", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [11, 224, "AK", 1, 10, "Alaska", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [12, 224, "AZ", 1, 10, "Arizona", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [13, 224, "AR", 1, 10, "Arkansas", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [15, 224, "CA", 1, 10, "California", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:43:49+09:00", 1634878320],
                [16, 224, "CO", 1, 10, "Colorado", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [17, 224, "CT", 1, 10, "Connecticut", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [18, 224, "DE", 1, 10, "Delaware", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [19, 224, "DC", 1, 10, "Washington DC", 1, "2009-03-03T12:31:40+09:00", "2015-09-15T16:35:40+08:00", 1634878320],
                [20, 224, "FL", 1, 10, "Florida", 1, "2009-03-03T12:31:40+09:00", "2009-03-11T09:21:53+09:00", 1634878320],
                [21, 224, "GA", 1, 10, "Georgia", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [22, 224, "GU", 1, 10, "Guam", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [23, 224, "HI", 1, 10, "Hawaii", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [24, 224, "ID", 1, 10, "Idaho", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [25, 224, "IL", 1, 10, "Illinois", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [26, 224, "IN", 1, 10, "Indiana", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [27, 224, "IA", 1, 10, "Iowa", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [28, 224, "KS", 1, 10, "Kansas", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [29, 224, "KY", 1, 10, "Kentucky", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [30, 224, "LA", 1, 10, "Louisiana", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [31, 224, "ME", 1, 10, "Maine", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [32, 224, "MD", 1, 10, "Maryland", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [33, 224, "MA", 1, 10, "Massachusetts", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [34, 224, "MI", 1, 10, "Michigan", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [35, 224, "MN", 1, 10, "Minnesota", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [36, 224, "MS", 1, 10, "Mississippi", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [37, 224, "MO", 1, 10, "Missouri", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [38, 224, "MT", 1, 10, "Montana", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [39, 224, "NE", 1, 10, "Nebraska", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [40, 224, "NV", 1, 10, "Nevada", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [41, 224, "NH", 1, 10, "New Hampshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [42, 224, "NJ", 1, 10, "New Jersey", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [43, 224, "NM", 1, 10, "New Mexico", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [44, 224, "NY", 1, 10, "New York", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [45, 224, "NC", 1, 10, "North Carolina", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [46, 224, "ND", 1, 10, "North Dakota", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [47, 224, "OH", 1, 10, "Ohio", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [48, 224, "OK", 1, 10, "Oklahoma", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [49, 224, "OR", 1, 10, "Oregon", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [50, 224, "PA", 1, 10, "Pennsylvania", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [51, 224, "PR", 1, 10, "Puerto Rico", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [52, 224, "RI", 1, 10, "Rhode Island", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [53, 224, "SC", 1, 10, "South Carolina", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [54, 224, "SD", 1, 10, "South Dakota", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [55, 224, "TN", 1, 10, "Tennessee", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [56, 224, "TX", 1, 10, "Texas", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [57, 224, "UT", 1, 10, "Utah", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [58, 224, "VT", 1, 10, "Vermont", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [59, 224, "VI", 1, 10, "Virgin Islands", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [60, 224, "VA", 1, 10, "Virginia", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [61, 224, "WA", 1, 10, "Washington", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [62, 224, "WV", 1, 10, "West Virginia", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [63, 224, "WI", 1, 10, "Wisconsin", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [64, 224, "WY", 1, 10, "Wyoming", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [66, 74, "02", 1, 10, "Aisne", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [67, 74, "03", 1, 10, "Allier", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [68, 74, "04", 1, 10, "Alpes-de-Haute-Provence", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [69, 74, "06", 1, 10, "Alpes-Maritimes", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [70, 74, "07", 1, 10, "Ardèche", 1, "2009-03-03T12:31:40+09:00", "2017-09-07T12:31:49+08:00", 1634878320],
                [71, 74, "08", 1, 10, "Ardennes", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [72, 74, "09", 1, 10, "Ariège", 1, "2009-03-03T12:31:40+09:00", "2017-09-07T12:31:49+08:00", 1634878320],
                [73, 74, "10", 1, 10, "Aube", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [74, 74, "01", 1, 10, "Ain", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [75, 74, "11", 1, 10, "Aude", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [76, 74, "12", 1, 10, "Aveyron", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [77, 74, "13", 1, 10, "Bouches-du-Rhône", 1, "2009-03-03T12:31:40+09:00", "2017-09-07T12:31:49+08:00", 1634878320],
                [78, 74, "14", 1, 10, "Calvados", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [79, 74, "15", 1, 10, "Cantal", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [80, 74, "16", 1, 10, "Charente", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [81, 74, "17", 1, 10, "Charente-Maritime", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [82, 74, "18", 1, 10, "Cher", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [83, 74, "19", 1, 10, "Corrèze", 1, "2009-03-03T12:31:40+09:00", "2017-09-07T12:31:49+08:00", 1634878320],
                [84, 74, "2A", 1, 10, "Corse-du-Sud", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [85, 74, "21", 1, 10, "Côte-d'Or", 1, "2009-03-03T12:31:40+09:00", "2017-09-07T12:31:49+08:00", 1634878320],
                [86, 74, "22", 1, 10, "Côtes-d'Armor", 1, "2009-03-03T12:31:40+09:00", "2017-09-07T12:43:26+08:00", 1634878320],
                [87, 74, "23", 1, 10, "Creuse", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [88, 74, "24", 1, 10, "Dordogne", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [89, 74, "25", 1, 10, "Doubs", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [90, 74, "26", 1, 10, "Drôme", 1, "2009-03-03T12:31:40+09:00", "2017-09-07T12:31:49+08:00", 1634878320],
                [91, 74, "91", 1, 10, "Essonne", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [92, 74, "27", 1, 10, "Eure", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [93, 74, "28", 1, 10, "Eure-et-Loir", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [94, 74, "29", 1, 10, "Finistère", 1, "2009-03-03T12:31:40+09:00", "2017-09-07T12:31:49+08:00", 1634878320],
                [95, 74, "30", 1, 10, "Gard", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [96, 74, "32", 1, 10, "Gers", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [97, 74, "33", 1, 10, "Gironde", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [98, 74, "2B", 1, 10, "Haute-Corse", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [99, 74, "31", 1, 10, "Haute-Garonne", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [100, 74, "43", 1, 10, "Haute-Loire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [101, 74, "52", 1, 10, "Haute-Marne", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [102, 74, "87", 1, 10, "Haute-Vienne", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [103, 74, "05", 1, 10, "Haute-Vienne", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [104, 74, "92", 1, 10, "Hauts-de-Seine", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [105, 74, "34", 1, 10, "Hérault", 1, "2009-03-03T12:31:40+09:00", "2017-09-07T12:31:49+08:00", 1634878320],
                [106, 74, "35", 1, 10, "Ille-et-Vilaine", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [107, 74, "36", 1, 10, "Indre", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [108, 74, "37", 1, 10, "Indre-et-Loire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [109, 74, "38", 1, 10, "Isère", 1, "2009-03-03T12:31:40+09:00", "2017-09-07T12:31:49+08:00", 1634878320],
                [110, 74, "39", 1, 10, "Jura", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [111, 74, "40", 1, 10, "Landes", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [112, 74, "41", 1, 10, "Loir-et-Cher", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [113, 74, "42", 1, 10, "Loire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [114, 74, "44", 1, 10, "Loire-Atlantique", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [115, 74, "45", 1, 10, "Loiret", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [116, 74, "46", 1, 10, "Lot", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [117, 74, "47", 1, 10, "Lot-et-Garonne", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [118, 74, "48", 1, 10, "Lozère", 1, "2009-03-03T12:31:40+09:00", "2017-09-07T12:31:49+08:00", 1634878320],
                [119, 74, "49", 1, 10, "Maine-et-Loire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [120, 74, "50", 1, 10, "Manche", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [121, 74, "51", 1, 10, "Marne", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [122, 74, "75", 1, 10, "Paris", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [123, 74, "93", 1, 10, "Seine-Saint-Denis", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [124, 74, "80", 1, 10, "Somme", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [125, 74, "81", 1, 10, "Tarn", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [126, 74, "82", 1, 10, "Tarn-et-Garonne", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [127, 74, "90", 1, 10, "Territoire de Belfort", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [128, 74, "95", 1, 10, "Val-d'Oise", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [129, 74, "94", 1, 10, "Val-de-Marne", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [130, 74, "83", 1, 10, "Var", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [131, 74, "84", 1, 10, "Vaucluse", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [132, 74, "85", 1, 10, "Vendée", 1, "2009-03-03T12:31:40+09:00", "2017-09-07T12:31:49+08:00", 1634878320],
                [133, 74, "86", 1, 10, "Vienne", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [134, 74, "88", 1, 10, "Vosges", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [135, 74, "89", 1, 10, "Yonne", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [136, 39, "AB", 1, 10, "Alberta", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [137, 39, "BC", 1, 10, "British Columbia", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [138, 39, "MB", 1, 10, "Manitoba", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [139, 39, "NB", 1, 10, "New Brunswick", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [140, 39, "NL", 1, 10, "Newfoundland and Labrador", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [141, 39, "NT", 1, 10, "Northwest Territories", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [142, 39, "NS", 1, 10, "Nova Scotia", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [143, 39, "NU", 1, 10, "Nunavut", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [144, 39, "ON", 1, 10, "Ontario", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [145, 39, "PE", 1, 10, "Prince Edward Island", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [146, 39, "QC", 1, 10, "Québec", 1, "2009-03-03T12:31:40+09:00", "2017-09-07T12:31:49+08:00", 1634878320],
                [147, 39, "SK", 1, 10, "Saskatchewan", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [148, 39, "YT", 1, 10, "Yukon Territory", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [149, 13, "ACT", 1, 10, "Australian Capital Territory", 1, "2009-03-03T12:31:40+09:00", "2009-03-11T09:20:30+09:00", 1634878320],
                [150, 13, "NSW", 1, 10, "New South Wales", 1, "2009-03-03T12:31:40+09:00", "2009-03-11T09:20:36+09:00", 1634878320],
                [151, 13, "NT", 1, 10, "Northern Territory", 1, "2009-03-03T12:31:40+09:00", "2009-03-11T09:21:03+09:00", 1634878320],
                [152, 13, "QLD", 1, 10, "Queensland", 1, "2009-03-03T12:31:40+09:00", "2009-03-11T09:20:51+09:00", 1634878320],
                [153, 13, "SA", 1, 10, "South Australia", 1, "2009-03-03T12:31:40+09:00", "2009-03-11T09:21:09+09:00", 1634878320],
                [154, 13, "TAS", 1, 10, "Tasmania", 1, "2009-03-03T12:31:40+09:00", "2009-03-11T09:21:14+09:00", 1634878320],
                [155, 13, "VIC", 1, 10, "Victoria", 1, "2009-03-03T12:31:40+09:00", "2009-03-11T09:20:58+09:00", 1634878320],
                [156, 13, "WA", 1, 10, "Western Australia", 1, "2009-03-03T12:31:40+09:00", "2009-03-11T09:21:20+09:00", 1634878320],
                [157, 152, "DR", 1, 10, "Drenthe", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [158, 152, "FL", 1, 10, "Flevoland", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [159, 152, "FR", 1, 10, "Friesland", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [160, 152, "GE", 1, 10, "Gelderland", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [161, 152, "GR", 1, 10, "Groningen", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [162, 152, "LI", 1, 10, "Limburg", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [163, 152, "NB", 1, 10, "Noord Brabant", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [164, 152, "NH", 1, 10, "Noord Holland", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [165, 152, "OV", 1, 10, "Overijssel", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [166, 152, "UT", 1, 10, "Utrecht", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [167, 152, "ZE", 1, 10, "Zeeland", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [168, 152, "ZH", 1, 10, "Zuid Holland", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [169, 83, "BAW", 1, 10, "Baden-Württemberg", 1, "2009-03-03T12:31:40+09:00", "2017-09-07T12:31:49+08:00", 1634878320],
                [170, 83, "BAY", 1, 10, "Bayern", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [171, 83, "BER", 1, 10, "Berlin", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [172, 83, "BRG", 1, 10, "Branderburg", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [173, 83, "BRE", 1, 10, "Bremen", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [174, 83, "HAM", 1, 10, "Hamburg", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [175, 83, "HES", 1, 10, "Hessen", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [176, 83, "MEC", 1, 10, "Mecklenburg-Vorpommern", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [177, 83, "NDS", 1, 10, "Niedersachsen", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [178, 83, "NRW", 1, 10, "Nordrhein-Westfalen", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [179, 83, "RHE", 1, 10, "Rheinland-Pfalz", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [180, 83, "SAR", 1, 10, "Saarland", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [181, 83, "SAS", 1, 10, "Sachsen", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [182, 83, "SAC", 1, 10, "Sachsen-Anhalt", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [183, 83, "SCN", 1, 10, "Schleswig-Holstein", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [184, 83, "THE", 1, 10, "Thüringen", 1, "2009-03-03T12:31:40+09:00", "2017-09-07T12:31:49+08:00", 1634878320],
                [185, 223, "ABN", 1, 10, "Aberdeen", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [186, 223, "ABNS", 1, 10, "Aberdeenshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [187, 223, "ANG", 1, 10, "Anglesey", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [188, 223, "AGS", 1, 10, "Angus", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [189, 223, "ARY", 1, 10, "Argyll and Bute", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [190, 223, "BEDS", 1, 10, "Bedfordshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [191, 223, "BERKS", 1, 10, "Berkshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [192, 223, "BLA", 1, 10, "Blaenau Gwent", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [193, 223, "BRI", 1, 10, "Bridgend", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [194, 223, "BSTL", 1, 10, "Bristol", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [195, 223, "BUCKS", 1, 10, "Buckinghamshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [196, 223, "CAE", 1, 10, "Caerphilly", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [197, 223, "CAMBS", 1, 10, "Cambridgeshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [198, 223, "CDF", 1, 10, "Cardiff", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [199, 223, "CARM", 1, 10, "Carmarthenshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [200, 223, "CDGN", 1, 10, "Ceredigion", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [201, 223, "CHE", 1, 10, "Cheshire East", 1, "2009-03-03T12:31:40+09:00", "2018-01-29T20:02:53+08:00", 1634878320],
                [202, 223, "CLACK", 1, 10, "Clackmannanshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [203, 223, "CON", 1, 10, "Conwy", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [204, 223, "CORN", 1, 10, "Cornwall", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [205, 223, "DNBG", 1, 10, "Denbighshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [206, 223, "DERBY", 1, 10, "Derbyshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [207, 223, "DVN", 1, 10, "Devon", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [208, 223, "DOR", 1, 10, "Dorset", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [209, 223, "DGL", 1, 10, "Dumfries and Galloway", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [210, 223, "DUND", 1, 10, "Dundee", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [211, 223, "DHM", 1, 10, "Durham", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [212, 223, "ARYE", 1, 10, "East Ayrshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [213, 223, "DUNBE", 1, 10, "East Dunbartonshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [214, 223, "LOTE", 1, 10, "East Lothian", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [215, 223, "RENE", 1, 10, "East Renfrewshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [216, 223, "ERYS", 1, 10, "East Riding of Yorkshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [217, 223, "SXE", 1, 10, "East Sussex", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [218, 223, "EDIN", 1, 10, "Edinburgh", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [219, 223, "ESX", 1, 10, "Essex", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [220, 223, "FALK", 1, 10, "Falkirk", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [221, 223, "FFE", 1, 10, "Fife", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [222, 223, "FLINT", 1, 10, "Flintshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [223, 223, "GLAS", 1, 10, "Glasgow", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [224, 223, "GLOS", 1, 10, "Gloucestershire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [225, 223, "LDN", 1, 10, "Greater London", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [226, 223, "MCH", 1, 10, "Greater Manchester", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [227, 223, "GDD", 1, 10, "Gwynedd", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [228, 223, "HANTS", 1, 10, "Hampshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [229, 223, "HWR", 1, 10, "Herefordshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [230, 223, "HERTS", 1, 10, "Hertfordshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [231, 223, "HLD", 1, 10, "Highlands", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [232, 223, "IVER", 1, 10, "Inverclyde", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [233, 223, "IOW", 1, 10, "Isle of Wight", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [234, 223, "KNT", 1, 10, "Kent", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [235, 223, "LANCS", 1, 10, "Lancashire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [236, 223, "LEC", 1, 10, "Leicestershire", 1, "2009-03-03T12:31:40+09:00", "2018-01-29T20:02:55+08:00", 1634878320],
                [237, 223, "LINCS", 1, 10, "Lincolnshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [238, 223, "MSY", 1, 10, "Merseyside", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [239, 223, "MERT", 1, 10, "Merthyr Tydfil", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [240, 223, "MLOT", 1, 10, "Midlothian", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [241, 223, "MMOUTH", 1, 10, "Monmouthshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [242, 223, "MORAY", 1, 10, "Moray", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [243, 223, "NPRTAL", 1, 10, "Neath Port Talbot", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [244, 223, "NEWPT", 1, 10, "Newport", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [245, 223, "NOR", 1, 10, "Norfolk", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [246, 223, "ARYN", 1, 10, "North Ayrshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [247, 223, "LANN", 1, 10, "North Lanarkshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [248, 223, "YSN", 1, 10, "North Yorkshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [249, 223, "NHM", 1, 10, "Northamptonshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [250, 223, "NLD", 1, 10, "Northumberland", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [251, 223, "NTT", 1, 10, "Nottinghamshire", 1, "2009-03-03T12:31:40+09:00", "2018-01-29T20:02:56+08:00", 1634878320],
                [252, 223, "ORK", 1, 10, "Orkney Islands", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [253, 223, "OFE", 1, 10, "Oxfordshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [254, 223, "PEM", 1, 10, "Pembrokeshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [255, 223, "PERTH", 1, 10, "Perth and Kinross", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [256, 223, "PWS", 1, 10, "Powys", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [257, 223, "REN", 1, 10, "Renfrewshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [258, 223, "RHON", 1, 10, "Rhondda Cynon Taff", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [259, 223, "RUT", 1, 10, "Rutland", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [260, 223, "BOR", 1, 10, "Scottish Borders", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [261, 223, "SHET", 1, 10, "Shetland Islands", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [262, 223, "SPE", 1, 10, "Shropshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [263, 223, "SOM", 1, 10, "Somerset", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [264, 223, "ARYS", 1, 10, "South Ayrshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [265, 223, "LANS", 1, 10, "South Lanarkshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [266, 223, "YSS", 1, 10, "South Yorkshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [267, 223, "SFD", 1, 10, "Staffordshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [268, 223, "STIR", 1, 10, "Stirling", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [269, 223, "SFK", 1, 10, "Suffolk", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [270, 223, "SRY", 1, 10, "Surrey", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [271, 223, "SWAN", 1, 10, "Swansea", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [272, 223, "TORF", 1, 10, "Torfaen", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [273, 223, "TWR", 1, 10, "Tyne and Wear", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [274, 223, "VGLAM", 1, 10, "Vale of Glamorgan", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [275, 223, "WARKS", 1, 10, "Warwickshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [276, 223, "WDUN", 1, 10, "West Dunbartonshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [277, 223, "WLOT", 1, 10, "West Lothian", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [278, 223, "WMD", 1, 10, "West Midlands", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [279, 223, "SXW", 1, 10, "West Sussex", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [280, 223, "YSW", 1, 10, "West Yorkshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [281, 223, "WIL", 1, 10, "Western Isles", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [282, 223, "WLT", 1, 10, "Wiltshire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [283, 223, "WORCS", 1, 10, "Worcestershire", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [284, 223, "WRX", 1, 10, "Wrexham", 1, "2009-03-03T12:31:40+09:00", "2009-03-12T10:44:10+09:00", 1634878320],
                [285, 223, "BAS", 1, 10, "Bath and North East Somerset", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:52+08:00", 1634878320],
                [286, 223, "BBD", 1, 10, "Blackburn with Darwen", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:52+08:00", 1634878320],
                [287, 223, "BPL", 1, 10, "Blackpool", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:52+08:00", 1634878320],
                [288, 223, "BGW", 1, 10, "Blaenau Gwent", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:52+08:00", 1634878320],
                [289, 223, "BMH", 1, 10, "Bournemouth", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:52+08:00", 1634878320],
                [290, 223, "BRC", 1, 10, "Bracknell Forest", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:53+08:00", 1634878320],
                [291, 223, "BNH", 1, 10, "Brighton and Hove", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:53+08:00", 1634878320],
                [292, 223, "CBF", 1, 10, "Central Bedfordshire", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:53+08:00", 1634878320],
                [293, 223, "CHW", 1, 10, "Cheshire West and Chester", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:53+08:00", 1634878320],
                [294, 223, "CMA", 1, 10, "Cumbria", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:53+08:00", 1634878320],
                [295, 223, "DAL", 1, 10, "Darlington", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:54+08:00", 1634878320],
                [296, 223, "DER", 1, 10, "Derby", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:54+08:00", 1634878320],
                [297, 223, "ELS", 1, 10, "Eilean Siar", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:54+08:00", 1634878320],
                [298, 223, "HAL", 1, 10, "Halton", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:54+08:00", 1634878320],
                [299, 223, "HPL", 1, 10, "Hartlepool", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:54+08:00", 1634878320],
                [300, 223, "IOS", 1, 10, "Isles of Scilly", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:54+08:00", 1634878320],
                [301, 223, "KHL", 1, 10, "Kingston upon Hull", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:55+08:00", 1634878320],
                [302, 223, "LCE", 1, 10, "Leicester", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:55+08:00", 1634878320],
                [303, 223, "LUT", 1, 10, "Luton", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:55+08:00", 1634878320],
                [304, 223, "MDW", 1, 10, "Medway", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:55+08:00", 1634878320],
                [305, 223, "MDB", 1, 10, "Middlesbrough", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:55+08:00", 1634878320],
                [306, 223, "MIK", 1, 10, "Milton Keynes", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:56+08:00", 1634878320],
                [307, 223, "NEL", 1, 10, "North East Lincolnshire", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:56+08:00", 1634878320],
                [308, 223, "NLN", 1, 10, "North Lincolnshire", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:56+08:00", 1634878320],
                [309, 223, "NSM", 1, 10, "North Somerset", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:56+08:00", 1634878320],
                [310, 223, "NGM", 1, 10, "Nottingham", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:56+08:00", 1634878320],
                [311, 223, "PTE", 1, 10, "Peterborough", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:57+08:00", 1634878320],
                [312, 223, "PLY", 1, 10, "Plymouth", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:57+08:00", 1634878320],
                [313, 223, "POL", 1, 10, "Poole", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:57+08:00", 1634878320],
                [314, 223, "POR", 1, 10, "Portsmouth", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:57+08:00", 1634878320],
                [315, 223, "RDG", 1, 10, "Reading", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:57+08:00", 1634878320],
                [316, 223, "RCC", 1, 10, "Redcar and Cleveland", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:57+08:00", 1634878320],
                [317, 223, "SLG", 1, 10, "Slough", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:58+08:00", 1634878320],
                [318, 223, "SGC", 1, 10, "South Gloucestershire", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:58+08:00", 1634878320],
                [319, 223, "STH", 1, 10, "Southampton", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:58+08:00", 1634878320],
                [320, 223, "SOS", 1, 10, "Southend-on-Sea", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:58+08:00", 1634878320],
                [321, 223, "STT", 1, 10, "Stockton-on-Tees", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:58+08:00", 1634878320],
                [322, 223, "STE", 1, 10, "Stoke-on-Trent", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:58+08:00", 1634878320],
                [323, 223, "SWD", 1, 10, "Swindon", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:59+08:00", 1634878320],
                [324, 223, "TFW", 1, 10, "Telford and Wrekin", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:59+08:00", 1634878320],
                [325, 223, "THR", 1, 10, "Thurrock", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:59+08:00", 1634878320],
                [326, 223, "TOB", 1, 10, "Torbay", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:59+08:00", 1634878320],
                [327, 223, "WRT", 1, 10, "Warrington", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:59+08:00", 1634878320],
                [328, 223, "WBK", 1, 10, "West Berkshire", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:02:59+08:00", 1634878320],
                [329, 223, "WNM", 1, 10, "Windsor and Maidenhead", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:03:00+08:00", 1634878320],
                [330, 223, "WOK", 1, 10, "Wokingham", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:03:00+08:00", 1634878320],
                [331, 223, "YOK", 1, 10, "York", 1, "2018-01-29T20:00:00+08:00", "2018-01-29T20:03:00+08:00", 1634878320],
                [332, 223, "ANN", 1, 10, "Antrim", 1, "2021-01-12T20:00:00+08:00", "2021-01-18T09:52:38+08:00", 1634878320],
                [333, 223, "ABC", 1, 10, "Armagh", 1, "2021-01-12T20:00:00+08:00", "2021-01-18T09:52:38+08:00", 1634878320],
                [334, 223, "DOW", 1, 10, "Down", 1, "2021-01-12T20:00:00+08:00", "2021-01-18T09:52:38+08:00", 1634878320],
                [335, 223, "FMO", 1, 10, "Fermanagh", 1, "2021-01-12T20:00:00+08:00", "2021-01-18T09:52:38+08:00", 1634878320],
                [336, 223, "LDY", 1, 10, "Londonderry", 1, "2021-01-12T20:00:00+08:00", "2021-01-18T09:52:39+08:00", 1634878320],
                [337, 223, "TYR", 1, 10, "Tyrone", 1, "2021-01-12T20:00:00+08:00", "2021-01-18T09:52:39+08:00", 1634878320]
            ]
        },
        {
            "name": "stress_profiles",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Name",
                    "value": "TEXT"
                },
                {
                    "column": "MaxHoursPerShift",
                    "value": "REAL"
                },
                {
                    "column": "MaxHoursPerPeriod",
                    "value": "REAL"
                },
                {
                    "column": "MaxDaysPerPeriod",
                    "value": "REAL"
                },
                {
                    "column": "MaxHoursPerDay",
                    "value": "REAL"
                },
                {
                    "column": "GapHoursBetweenShifts",
                    "value": "REAL"
                },
                {
                    "column": "CustomRules",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "system_usage_balances",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Type",
                    "value": "INTEGER"
                },
                {
                    "column": "Date",
                    "value": "TEXT"
                },
                {
                    "column": "Credit",
                    "value": "REAL"
                },
                {
                    "column": "Description",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "system_usage_tracking",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Date",
                    "value": "TEXT"
                },
                {
                    "column": "EmpId",
                    "value": "INTEGER"
                },
                {
                    "column": "CompanyId",
                    "value": "INTEGER"
                },
                {
                    "column": "BalanceId",
                    "value": "INTEGER"
                },
                {
                    "column": "UsageType",
                    "value": "INTEGER"
                },
                {
                    "column": "UsageRecordId",
                    "value": "INTEGER"
                },
                {
                    "column": "Usage",
                    "value": "REAL"
                },
                {
                    "column": "Description",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "tasks",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "TaskSetupId",
                    "value": "INTEGER"
                },
                {
                    "column": "OpUnitId",
                    "value": "INTEGER"
                },
                {
                    "column": "GroupId",
                    "value": "INTEGER"
                },
                {
                    "column": "DayTimestamp",
                    "value": "INTEGER"
                },
                {
                    "column": "Date",
                    "value": "TEXT"
                },
                {
                    "column": "OrigDayTimestamp",
                    "value": "INTEGER"
                },
                {
                    "column": "OrigDate",
                    "value": "TEXT"
                },
                {
                    "column": "AvailableAfterTimestamp",
                    "value": "INTEGER"
                },
                {
                    "column": "DueDate",
                    "value": "TEXT"
                },
                {
                    "column": "DueTimestamp",
                    "value": "INTEGER"
                },
                {
                    "column": "RepeatIfNotCompleted",
                    "value": "NUMERIC"
                },
                {
                    "column": "SortOrder",
                    "value": "INTEGER"
                },
                {
                    "column": "Type",
                    "value": "INTEGER"
                },
                {
                    "column": "Question",
                    "value": "TEXT"
                },
                {
                    "column": "Answer",
                    "value": "TEXT"
                },
                {
                    "column": "Comment",
                    "value": "TEXT"
                },
                {
                    "column": "UserEntry",
                    "value": "INTEGER"
                },
                {
                    "column": "UserPerformTask",
                    "value": "INTEGER"
                },
                {
                    "column": "UserResponsible",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "TsCompleted",
                    "value": "INTEGER"
                },
                {
                    "column": "Start",
                    "value": "INTEGER"
                },
                {
                    "column": "`End`",
                    "value": "INTEGER"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "task_groups",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "GroupSetupId",
                    "value": "INTEGER"
                },
                {
                    "column": "`Key`",
                    "value": "TEXT"
                },
                {
                    "column": "Name",
                    "value": "TEXT"
                },
                {
                    "column": "DayTimestamp",
                    "value": "INTEGER"
                },
                {
                    "column": "Date",
                    "value": "TEXT"
                },
                {
                    "column": "OrigDayTimestamp",
                    "value": "INTEGER"
                },
                {
                    "column": "OrigDate",
                    "value": "TEXT"
                },
                {
                    "column": "OpUnitId",
                    "value": "INTEGER"
                },
                {
                    "column": "SortOrder",
                    "value": "INTEGER"
                },
                {
                    "column": "Comment",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "task_group_setups",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "`Key`",
                    "value": "TEXT"
                },
                {
                    "column": "Name",
                    "value": "TEXT"
                },
                {
                    "column": "Active",
                    "value": "NUMERIC"
                },
                {
                    "column": "Compulsory",
                    "value": "NUMERIC"
                },
                {
                    "column": "Notification",
                    "value": "TEXT"
                },
                {
                    "column": "Deadline",
                    "value": "REAL"
                },
                {
                    "column": "Plugins",
                    "value": "TEXT"
                },
                {
                    "column": "Oncreate",
                    "value": "TEXT"
                },
                {
                    "column": "Onsubmit",
                    "value": "TEXT"
                },
                {
                    "column": "Comment",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "task_opunit_configs",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "TaskSetupId",
                    "value": "INTEGER"
                },
                {
                    "column": "TaskGroupId",
                    "value": "INTEGER"
                },
                {
                    "column": "Active",
                    "value": "NUMERIC"
                },
                {
                    "column": "SortOrder",
                    "value": "INTEGER"
                },
                {
                    "column": "OpUnitId",
                    "value": "INTEGER"
                },
                {
                    "column": "Schedule",
                    "value": "INTEGER"
                },
                {
                    "column": "Type",
                    "value": "INTEGER"
                },
                {
                    "column": "AvailableAfter",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "task_setups",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "GroupId",
                    "value": "INTEGER"
                },
                {
                    "column": "Type",
                    "value": "INTEGER"
                },
                {
                    "column": "Parent",
                    "value": "INTEGER"
                },
                {
                    "column": "Question",
                    "value": "TEXT"
                },
                {
                    "column": "`Default`",
                    "value": "TEXT"
                },
                {
                    "column": "SortOrder",
                    "value": "INTEGER"
                },
                {
                    "column": "Schedule",
                    "value": "INTEGER"
                },
                {
                    "column": "OnYes",
                    "value": "TEXT"
                },
                {
                    "column": "OnNo",
                    "value": "TEXT"
                },
                {
                    "column": "RenderFunc",
                    "value": "TEXT"
                },
                {
                    "column": "Active",
                    "value": "NUMERIC"
                },
                {
                    "column": "AvailableAfter",
                    "value": "TEXT"
                },
                {
                    "column": "RepeatIfNotCompleted",
                    "value": "NUMERIC"
                },
                {
                    "column": "Time",
                    "value": "TEXT"
                },
                {
                    "column": "Section",
                    "value": "TEXT"
                },
                {
                    "column": "Priority",
                    "value": "TEXT"
                },
                {
                    "column": "Helptext",
                    "value": "TEXT"
                },
                {
                    "column": "SupercedePrev",
                    "value": "NUMERIC"
                },
                {
                    "column": "Colour",
                    "value": "TEXT"
                },
                {
                    "column": "OnStart",
                    "value": "TEXT"
                },
                {
                    "column": "OnSubmit",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "teams",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "LeaderEmployee",
                    "value": "INTEGER"
                },
                {
                    "column": "Name",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "timesheets",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Employee",
                    "value": "INTEGER"
                },
                {
                    "column": "EmployeeHistory",
                    "value": "INTEGER"
                },
                {
                    "column": "EmployeeAgreement",
                    "value": "INTEGER"
                },
                {
                    "column": "Date",
                    "value": "TEXT"
                },
                {
                    "column": "StartTime",
                    "value": "INTEGER"
                },
                {
                    "column": "EndTime",
                    "value": "INTEGER"
                },
                {
                    "column": "Mealbreak",
                    "value": "TEXT"
                },
                {
                    "column": "MealbreakSlots",
                    "value": "TEXT"
                },
                {
                    "column": "Slots",
                    "value": "TEXT"
                },
                {
                    "column": "TotalTime",
                    "value": "REAL"
                },
                {
                    "column": "TotalTimeInv",
                    "value": "REAL"
                },
                {
                    "column": "Cost",
                    "value": "REAL"
                },
                {
                    "column": "Roster",
                    "value": "INTEGER"
                },
                {
                    "column": "EmployeeComment",
                    "value": "TEXT"
                },
                {
                    "column": "SupervisorComment",
                    "value": "TEXT"
                },
                {
                    "column": "Supervisor",
                    "value": "INTEGER"
                },
                {
                    "column": "Disputed",
                    "value": "NUMERIC"
                },
                {
                    "column": "TimeApproved",
                    "value": "NUMERIC"
                },
                {
                    "column": "TimeApprover",
                    "value": "INTEGER"
                },
                {
                    "column": "Discarded",
                    "value": "NUMERIC"
                },
                {
                    "column": "ValidationFlag",
                    "value": "INTEGER"
                },
                {
                    "column": "OperationalUnit",
                    "value": "INTEGER"
                },
                {
                    "column": "IsInProgress",
                    "value": "NUMERIC"
                },
                {
                    "column": "IsLeave",
                    "value": "NUMERIC"
                },
                {
                    "column": "LeaveId",
                    "value": "INTEGER"
                },
                {
                    "column": "LeaveRule",
                    "value": "INTEGER"
                },
                {
                    "column": "Invoiced",
                    "value": "NUMERIC"
                },
                {
                    "column": "InvoiceComment",
                    "value": "TEXT"
                },
                {
                    "column": "PayRuleApproved",
                    "value": "NUMERIC"
                },
                {
                    "column": "Exported",
                    "value": "NUMERIC"
                },
                {
                    "column": "StagingId",
                    "value": "INTEGER"
                },
                {
                    "column": "PayStaged",
                    "value": "NUMERIC"
                },
                {
                    "column": "PaycycleId",
                    "value": "INTEGER"
                },
                {
                    "column": "File",
                    "value": "INTEGER"
                },
                {
                    "column": "CustomFieldData",
                    "value": "INTEGER"
                },
                {
                    "column": "RealTime",
                    "value": "NUMERIC"
                },
                {
                    "column": "AutoProcessed",
                    "value": "NUMERIC"
                },
                {
                    "column": "AutoRounded",
                    "value": "NUMERIC"
                },
                {
                    "column": "AutoTimeApproved",
                    "value": "NUMERIC"
                },
                {
                    "column": "AutoPayRuleApproved",
                    "value": "NUMERIC"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "timesheet_pay_returns",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Timesheet",
                    "value": "INTEGER"
                },
                {
                    "column": "PayRule",
                    "value": "INTEGER"
                },
                {
                    "column": "Overridden",
                    "value": "NUMERIC"
                },
                {
                    "column": "Value",
                    "value": "REAL"
                },
                {
                    "column": "Cost",
                    "value": "REAL"
                },
                {
                    "column": "OverrideComment",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "training_modules",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Title",
                    "value": "TEXT"
                },
                {
                    "column": "Provider",
                    "value": "TEXT"
                },
                {
                    "column": "ProviderAddress",
                    "value": "INTEGER"
                },
                {
                    "column": "Cost",
                    "value": "REAL"
                },
                {
                    "column": "TimeRequiredDays",
                    "value": "INTEGER"
                },
                {
                    "column": "RenewalPeriodMonths",
                    "value": "INTEGER"
                },
                {
                    "column": "Comment",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "training_records",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Employee",
                    "value": "INTEGER"
                },
                {
                    "column": "Module",
                    "value": "INTEGER"
                },
                {
                    "column": "TrainingDate",
                    "value": "TEXT"
                },
                {
                    "column": "ExpiryDate",
                    "value": "TEXT"
                },
                {
                    "column": "Active",
                    "value": "NUMERIC"
                },
                {
                    "column": "Comment",
                    "value": "TEXT"
                },
                {
                    "column": "File",
                    "value": "INTEGER"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "webhooks",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Topic",
                    "value": "TEXT"
                },
                {
                    "column": "Filters",
                    "value": "TEXT"
                },
                {
                    "column": "Address",
                    "value": "TEXT"
                },
                {
                    "column": "Type",
                    "value": "TEXT"
                },
                {
                    "column": "Headers",
                    "value": "TEXT"
                },
                {
                    "column": "Enabled",
                    "value": "NUMERIC"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexIdModifiedDesc",
                    "value": "Id DESC, Modified DESC"
                }
            ]
        },
        {
            "name": "colleagues",
            "schema": [
                {
                    "column": "EmpId",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Company",
                    "value": "INTEGER"
                },
                {
                    "column": "DisplayName",
                    "value": "TEXT"
                },
                {
                    "column": "Email",
                    "value": "TEXT"
                },
                {
                    "column": "FirstName",
                    "value": "TEXT"
                },
                {
                    "column": "IsSameWorkplace",
                    "value": "INTEGER"
                },
                {
                    "column": "IsSubordinate",
                    "value": "INTEGER"
                },
                {
                    "column": "LastName",
                    "value": "TEXT"
                },
                {
                    "column": "Mobile",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "Photo",
                    "value": "TEXT"
                },
                {
                    "column": "PhotoLinkId",
                    "value": "TEXT"
                },
                {
                    "column": "Position",
                    "value": "INTEGER"
                },
                {
                    "column": "Role",
                    "value": "INTEGER"
                },
                {
                    "column": "Status",
                    "value": "INTEGER"
                },
                {
                    "column": "UserId",
                    "value": "INTEGER"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexOnEmpId",
                    "value": "EmpId DESC"
                },
                {
                    "name": "IndexOnModified",
                    "value": "Modified DESC"
                }
            ]
        },
        {
            "name": "local_deets",
            "schema": [
                {
                    "column": "id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "user_email",
                    "value": "TEXT NOT NULL"
                },
                {
                    "column": "me_obj",
                    "value": "TEXT"
                },
                {
                    "column": "my_obj",
                    "value": "TEXT"
                },
                {
                    "column": "ppl_obj",
                    "value": "TEXT"
                },
                {
                    "column": "me_ava",
                    "value": "TEXT"
                },
                {
                    "column": "work_ava",
                    "value": "TEXT"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                }
            ]
        },
        {
            "name": "local_images",
            "schema": [
                {
                    "column": "id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "img_name",
                    "value": "TEXT"
                },
                {
                    "column": "img_uri",
                    "value": "TEXT"
                },
                {
                    "column": "img_size",
                    "value": "INTEGER"
                },
                {
                    "column": "img_mtime",
                    "value": "INTEGER"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                }
            ]
        },
        {
            "name": "notifications",
            "schema": [
                {
                    "column": "Id",
                    "value": "INTEGER PRIMARY KEY NOT NULL"
                },
                {
                    "column": "Created",
                    "value": "TEXT"
                },
                {
                    "column": "Creator",
                    "value": "INTEGER"
                },
                {
                    "column": "ExpiryDate",
                    "value": "TEXT"
                },
                {
                    "column": "Link",
                    "value": "INTEGER"
                },
                {
                    "column": "Message",
                    "value": "TEXT"
                },
                {
                    "column": "Modified",
                    "value": "TEXT"
                },
                {
                    "column": "Orm",
                    "value": "INTEGER"
                },
                {
                    "column": "Recid",
                    "value": "INTEGER"
                },
                {
                    "column": "TsCreated",
                    "value": "INTEGER"
                },
                {
                    "column": "last_modified",
                    "value": "INTEGER DEFAULT (strftime('%s', 'now'))"
                }
            ],
            "indexes": [
                {
                    "name": "IndexOnLastModified",
                    "value": "last_modified DESC"
                },
                {
                    "name": "IndexOnId",
                    "value": "Id DESC"
                },
                {
                    "name": "IndexOnModified",
                    "value": "Modified DESC"
                }
            ]
        },
    ]
};


/***/ }),

/***/ 49603:
/*!**********************************************!*\
  !*** ./src/app/services/calendar.service.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CalendarService": function() { return /* binding */ CalendarService; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! date-fns */ 45229);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! date-fns */ 8488);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var _ionic_native_calendar_ngx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ionic-native/calendar/ngx */ 20287);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var _events_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./events.service */ 80106);
/* harmony import */ var _datetime_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./datetime.service */ 12826);
/* harmony import */ var _detail_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./detail.service */ 52153);
/* harmony import */ var _fairwork_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fairwork.service */ 93405);
/* harmony import */ var _sqlite_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sqlite.service */ 90636);
/* harmony import */ var _appTypes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./appTypes */ 38670);
/* harmony import */ var _firebase_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./firebase.service */ 19446);













////////////////////////////////////////////////////////////////
let CalendarService = class CalendarService {
    ////////////////////////////////////////////////////////////////
    constructor(logger, plt, evServ, dT, fwServ, sqlServ, cal, dS, fireServ) {
        this.logger = logger;
        this.plt = plt;
        this.evServ = evServ;
        this.dT = dT;
        this.fwServ = fwServ;
        this.sqlServ = sqlServ;
        this.cal = cal;
        this.dS = dS;
        this.fireServ = fireServ;
        ////////////////////////////////////////////////////////////////
        this.initDone = false;
        this.hasPerms = null;
        this.calEnabled = null;
        this.calEvents = { shift: null, task: null };
        this.calList = null;
        this.allCalList = null;
        this.selectedCal = null;
        this.calOpts = {
            id: null,
            firstReminderMinutes: null,
            calendarName: null,
            calendarId: null
        };
        this.isReschedule = false;
        this.beforeTimes = { shift: 60, task: 60 };
        this.evIco = { shift: '\uD83D\uDEE1', confirm: '\uD83D\uDC4C', task: '\uD83D\uDCCB' };
        this.evBName = { shift: '𝗪𝗼𝗿𝗸 𝗦𝗵𝗶𝗳𝘁', confirm: '𝘊𝘰𝘯𝘧𝘪𝘳𝘮 𝘚𝘩𝘪𝘧𝘵', task: '𝗪𝗼𝗿𝗸 𝗧𝗮𝘀𝗸' };
        this.tasksInProg = false;
        this.shiftsInProg = false;
        this.schedEvs = { shift: [], task: [] };
        this.showIncome = null;
        // GVars -----------------------------------------------------
        this.myObj = null;
        this.workAreas = null;
        this.workName = null;
        this.workCode = null;
        this.workPeople = [];
        this.workLocation = null;
    }
    ////////////////////////////////////////////////////////////////
    doInitCal() {
        this.plt.ready().then(() => (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            this.evServ.subscribe('calInit', (stage) => (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
                this.logger.info('\uD83D\uDCC5 [calServ|doInitCal] (EVENT) [STAGE] = ' + stage + ' ... ');
                if (stage === 'calenabled') {
                    const checkSCalRes = yield this.checkSheriffCal();
                    yield this.setSelectedCal(checkSCalRes.data);
                    this.initGVars();
                }
                else {
                    this.initDone = true;
                    this.doScheduleEvents();
                }
            }));
            this.initRefreshCalSettings();
        }));
    }
    ////////////////////////////////////////////////////////////////
    doScheduleEvents() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            let schedTypeTtl = 0;
            let schedTypeCount = 0;
            let schedSTime = new Date();
            let cM;
            this.isReschedule ? cM = '♻️[RE]Scheduling' : cM = 'Init Scheduling';
            this.evServ.subscribe('calSched', () => {
                schedTypeCount++;
                if (schedTypeCount === schedTypeTtl) {
                    const schedTT = (this.evServ.getDur(schedSTime) / 1000).toFixed(2) + 's';
                    const tShifts = this.schedEvs.shift.length;
                    const tTasks = this.schedEvs.task.length;
                    const tEvs = tShifts + tTasks;
                    this.logger.info('\uD83D\uDCC5 - 🏁 FINISHED ' + cM + ': ' + tEvs + ' Total Events Added in ' + schedTT + 's:');
                    let sShiftsIds = [];
                    for (let i = 0; i < this.schedEvs.shift.length; i++) {
                        sShiftsIds.push(this.schedEvs.shift[i].dId + '|' + this.schedEvs.shift[i].cId);
                    }
                    ;
                    this.logger.info('\uD83D\uDCC5 - 📑 Shifts: ' + sShiftsIds.join(', ') + ' (' + tShifts + ')');
                    let sTasksIds = [];
                    for (let i = 0; i < this.schedEvs.task.length; i++) {
                        sTasksIds.push(this.schedEvs.task[i].dId + '|' + this.schedEvs.task[i].cId);
                    }
                    ;
                    this.logger.info('\uD83D\uDCC5 - 🤹🏼 Tasks: ' + sTasksIds.join(', ') + ' (' + tTasks + ')');
                    if (this.isReschedule) {
                        this.evServ.publish('reschedFinish', 'calendar');
                        this.isReschedule = false;
                    }
                    ;
                    this.evServ.destroy('calSched');
                }
            });
            yield this.deleteAllSheriffEvs();
            this.schedEvs.shift = [];
            this.schedEvs.task = [];
            this.evServ.publish('alertsStatus', true);
            if (this.calEnabled) {
                this.logger.info('\uD83D\uDCC5 {alertMethods.calendar=TRUE}');
                for (const v of Object.values(this.calEvents)) {
                    if (v) {
                        schedTypeTtl++;
                    }
                }
                ;
                if (schedTypeTtl > 0) {
                    if (this.calEvents.shift) {
                        this.logger.info('\uD83D\uDCC5 {alertEvents.shift=TRUE} - ' + cM + ' Shifts...');
                        this.calCheckShifts(null);
                    }
                    else {
                        this.logger.info('\uD83D\uDCC5 {alertEvents.shift=FALSE} - !SKIPPING! ' + cM + ' Shifts.');
                    }
                    ;
                    if (this.calEvents.task) {
                        this.logger.info('\uD83D\uDCC5 {alertEvents.task=TRUE} - ' + cM + ' Tasks...');
                        this.calCheckTasks(null);
                    }
                    else {
                        this.logger.info('\uD83D\uDCC5 {alertEvents.task=FALSE} - !SKIPPING! ' + cM + 'Tasks.');
                    }
                }
                else {
                    if (this.isReschedule) {
                        this.evServ.publish('reschedFinish', 'calendar');
                        this.isReschedule = false;
                    }
                    ;
                    this.logger.info('\uD83D\uDD14 {alertEvents.shift=FALSE} && {alertEvents.task=FALSE} - !SKIPPING! Notification ' + cM);
                }
            }
            else {
                if (this.isReschedule) {
                    this.evServ.publish('reschedFinish', 'calendar');
                    this.isReschedule = false;
                }
                ;
                this.logger.info('\uD83D\uDCC5 {alertMethods.calendar=FALSE}');
            }
        });
    }
    ////////////////////////////////////////////////////////////////
    updateCalSettings() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[calServ|updateCalSettings] ()...');
            this.isReschedule = true;
            yield this.initRefreshCalSettings();
            this.doScheduleEvents();
            return Promise.resolve(true);
        });
    }
    ////////////////////////////////////////////////////////////////
    createCal() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('\uD83D\uDCC5 [calServ|createCal] ()...');
            let newCalOpts = { calendarName: 'Sheriff Calendar', calendarColor: '#FF9800' };
            try {
                yield this.cal.createCalendar(newCalOpts);
                return Promise.resolve(true);
            }
            catch (cCErr) {
                return Promise.resolve(false);
            }
        });
    }
    ////////////////////////////////////////////////////////////////
    checkSheriffCal() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('\uD83D\uDCC5 [calSev|checkSheriffCal] ()...');
            try {
                const cLResAll = yield this.cal.listCalendars();
                this.allCalList = cLResAll;
                const cLRes = cLResAll.filter(c => c.isPrimary);
                this.calList = cLRes;
                const hasSCal = cLRes.filter(c => c.name.toString() === 'Sheriff Calendar')[0];
                if (hasSCal) {
                    return Promise.resolve({ result: true, data: hasSCal.id });
                }
                else {
                    if ((yield this.createCal())) {
                        const newCLResAll = yield this.cal.listCalendars();
                        this.allCalList = newCLResAll;
                        const newCLRes = newCLResAll.filter(c => c.isPrimary);
                        this.calList = newCLRes;
                        const hasNewSCal = newCLRes.filter(c => c.name.toString() === 'Sheriff Calendar')[0];
                        return Promise.resolve({ result: true, data: hasNewSCal.id });
                    }
                    else {
                        return Promise.resolve({ result: false, data: null });
                    }
                }
            }
            catch (lCErr) {
                this.logger.info('[checkSheriffCal] (ERROR): ' + JSON.stringify(lCErr));
                return Promise.resolve({ result: false, data: null });
            }
        });
    }
    ////////////////////////////////////////////////////////////////
    setSelectedCal(sheriffCalId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('\uD83D\uDCC5 [calServ|setSelectedCal] (sheriffCalId[backupOnly]' + sheriffCalId + ')... ');
            const saveSettCalId = (id) => (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () { this.userSettings.alerts.options.alertCal.value = id; yield this.sqlServ.setSettings(this.userSettings); yield this.fireServ.updateSettingsObj(this.userSettings); return Promise.resolve(true); });
            let calChoice = null;
            let sCalObj;
            if (sheriffCalId !== null) {
                sCalObj = this.calList.filter(c => c.id.toString() === sheriffCalId)[0];
            }
            ;
            if (this.uAlertOpts.alertCal.value !== null) {
                const selCalId = this.uAlertOpts.alertCal.value;
                const matchCal = this.calList.filter(c => c.id.toString() === selCalId.toString())[0];
                if (matchCal) {
                    calChoice = matchCal;
                }
                else {
                    if (sheriffCalId !== null) {
                        calChoice = sCalObj;
                    }
                    else {
                        if (this.calList.length > 0) {
                            calChoice = this.calList[0];
                        }
                    }
                }
            }
            else {
                if (sheriffCalId !== null) {
                    calChoice = sCalObj;
                }
                else {
                    if (this.calList.length > 0) {
                        calChoice = this.calList[0];
                    }
                }
            }
            ;
            this.selectedCal = calChoice;
            this.calOpts.id = String(calChoice.id);
            this.calOpts.calendarName = String(calChoice.name);
            this.calOpts.calendarId = Number(calChoice.id);
            yield saveSettCalId(calChoice.id);
            return Promise.resolve(true);
        });
    }
    ////////////////////////////////////////////////////////////////
    checkCalPerms() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            const hRWP = yield this.cal.hasReadWritePermission();
            this.hasPerms = hRWP;
            return Promise.resolve(hRWP);
        });
    }
    ////////////////////////////////////////////////////////////////
    reqCalPerms() {
        this.cal.requestReadWritePermission();
        return Promise.resolve(true);
    }
    ////////////////////////////////////////////////////////////////
    initGVars() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            this.myObj = yield this.dS.getMy();
            this.workAreas = this.dS.workAreas;
            this.workPeople = this.dS.pplArr;
            this.workName = this.dS.workName;
            this.workCode = this.dS.workCode;
            if (this.myObj !== null && this.myObj.hasOwnProperty('Workplace')) {
                if (this.myObj.Workplace.length > 0) {
                    const loc = this.myObj.Workplace[0]._DPMetaData.AddressObject.Print;
                    if (loc !== null && loc !== undefined && loc.length > 0) {
                        this.workLocation = loc.replace('\n', '');
                    }
                    else {
                        this.workLocation = this.workName;
                    }
                }
                else {
                    this.workLocation = this.workName;
                }
                ;
            }
            ;
            this.evServ.publish('calInit', 'gvars');
        });
    }
    ////////////////////////////////////////////////////////////////
    initRefreshCalSettings() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            let savedUSettObj;
            const dsRes = yield this.dS.getSettings();
            if (dsRes !== null) {
                savedUSettObj = dsRes;
            }
            else {
                const dbRes = yield this.sqlServ.getSettings();
                if (dbRes.result) {
                    savedUSettObj = dbRes.data;
                }
                else {
                    const fireRes = yield this.fireServ.getSettingsValue(null);
                    if (fireRes.result) {
                        savedUSettObj = fireRes.data;
                    }
                    else {
                        savedUSettObj = (0,_appTypes__WEBPACK_IMPORTED_MODULE_6__.defaultAUSettings)();
                    }
                }
            }
            ;
            this.userSettings = savedUSettObj;
            this.uAlertOpts = this.userSettings.alerts.options;
            this.calEnabled = Boolean(this.uAlertOpts.alertMethods.value.calendar);
            this.calEvents.shift = Boolean(this.uAlertOpts.alertEvents.value.shift);
            this.calEvents.task = Boolean(this.uAlertOpts.alertEvents.value.task);
            this.beforeTimes.shift = Number(this.uAlertOpts.alertBefore.value.shift.mins);
            this.beforeTimes.task = Number(this.uAlertOpts.alertBefore.value.task.mins);
            this.showIncome = Boolean(this.userSettings.payrates.options.show.value);
            if (!this.initDone) {
                this.evServ.publish('calInit', 'calenabled');
                return Promise.resolve(true);
            }
            else {
                const freshCL = (yield this.cal.listCalendars()).filter((c) => Boolean(c.isPrimary) === true);
                if (freshCL && freshCL.length > 0) {
                    this.calList = freshCL;
                    if (String(this.calOpts.id) !== String(this.uAlertOpts.alertCal.value)) {
                        const matchCArr = this.calList.filter(c => String(c.id) === String(this.uAlertOpts.alertCal.value));
                        if (matchCArr && matchCArr.length > 0) {
                            const matchCal = matchCArr[0];
                            this.selectedCal = matchCal;
                            this.calOpts.id = String(matchCal.id);
                            this.calOpts.calendarName = String(matchCal.name);
                            this.calOpts.calendarId = Number(matchCal.id);
                            return Promise.resolve(true);
                        }
                        else {
                            return Promise.resolve(true);
                        }
                    }
                    else {
                        return Promise.resolve(true);
                    }
                }
                else {
                    return Promise.resolve(true);
                }
            }
            ;
        });
    }
    ////////////////////////////////////////////////////////////////
    updateBeforeTimes(event, mins) {
        this.logger.info('\uD83D\uDCC5 [calServ|updateBeforeTimes] (' + event + ',' + mins + ')...');
        this.beforeTimes[event] = mins;
    }
    ////////////////////////////////////////////////////////////////
    capType(lowT) { return lowT.charAt(0).toUpperCase() + lowT.slice(1); }
    ////////////////////////////////////////////////////////////////
    triggerTime(evD, beforeT) { return this.dT.subMs(evD, beforeT); }
    ////////////////////////////////////////////////////////////////
    deleteAllSched() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('\uD83D\uDCC5 [calServ|deleteAllSched] ()...');
            yield this.deleteAllSheriffEvs();
            this.schedEvs.shift = [];
            this.schedEvs.task = [];
            return Promise.resolve(true);
        });
    }
    ////////////////////////////////////////////////////////////////
    reScheduleAll() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('\uD83D\uDCC5 [calServ|reScheduleAll] ()...');
            this.isReschedule = true;
            yield this.deleteAllSched();
            this.doInitCal();
        });
    }
    ////////////////////////////////////////////////////////////////
    getBeforeTime(event) { return this.beforeTimes[event]; }
    ;
    ////////////////////////////////////////////////////////////////
    getFName(empId) {
        const isE = (name) => { if (name === '' || name === ' ' || name === null || name === undefined) {
            return true;
        }
        else {
            return false;
        } };
        let fN;
        const pObArr = this.workPeople.filter(p => p.EmpId === empId);
        if (pObArr.length > 0) {
            const rawFN = pObArr[0].FirstName;
            const rawLN = pObArr[0].LastName;
            const rawDN = pObArr[0].DisplayName;
            if (!isE(rawFN) && !isE(rawLN)) {
                fN = this.capType(rawFN) + ' ' + this.capType(rawLN.charAt(0)) + '.';
            }
            else if (!isE(rawFN)) {
                fN = this.capType(rawFN);
            }
            else if (!isE(rawDN)) {
                const rDNArr = rawDN.split(' ');
                if (rDNArr.length > 1) {
                    fN = this.capType(rDNArr[0]);
                }
                else {
                    fN = this.capType(rawDN);
                }
            }
        }
        else {
            fN = 'NK';
        }
        ;
        return fN;
    }
    ;
    ////////////////////////////////////////////////////////////////
    deleteCal(calName) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('\uD83D\uDCC5 [calServ|deleteCal] (' + calName + ')...');
            let delName;
            calName !== null ? delName = calName : delName = 'Sheriff Calendar';
            const dCalRes = yield this.cal.deleteCalendar(delName);
            if (dCalRes) {
                return Promise.resolve({ result: true, data: dCalRes });
            }
            else {
                return Promise.resolve({ result: false, data: dCalRes });
            }
        });
    }
    ////////////////////////////////////////////////////////////////
    getPay(rosterObj) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () { const payRes = yield this.fwServ.getShiftPay(rosterObj); return Promise.resolve(payRes); });
    }
    /////////////////////////////////////////////////////////////////
    formatShift(rawNS) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            const wNames = (oUId) => { let oUArr = this.workAreas.filter(oU => (oU.Id === oUId)); return { cname: oUArr[0]['CompanyCode'], warea: oUArr[0]['OperationalUnitName'] }; };
            let niceNS = rawNS;
            const nN = wNames(rawNS.OperationalUnit);
            nN.warea ? niceNS['nOpUnit'] = nN.warea : niceNS['nOpUnit'] = '';
            nN.cname ? niceNS['nCompanyName'] = nN.cname : niceNS['nCompanyName'] = this.workName;
            niceNS['nDate'] = this.dT.format(new Date(rawNS.Date), 'EEEE, d MMMM yyyy');
            const nStartEndObj = this.dT.rosterSETimes(rawNS.StartTime, rawNS.EndTime);
            niceNS['nStart'] = nStartEndObj.s.trim();
            niceNS['nEnd'] = nStartEndObj.e.trim();
            const calcPay = yield this.getPay(rawNS);
            niceNS['nIncomeObj'] = calcPay;
            niceNS['nIncome'] = calcPay.t.toFixed(0);
            let tT = { hours: 0, minutes: 0 };
            if (rawNS.TotalTime.toString().includes('.')) {
                const ttArr = rawNS.TotalTime.toString().split('.');
                tT.hours = parseInt(ttArr[0]);
                tT.minutes = Math.round(Number('0.' + ttArr[1]) * 60);
            }
            else {
                tT.hours = rawNS.TotalTime;
            }
            ;
            niceNS['nTotalTime'] = tT;
            niceNS['nConfirmStatus'] = rawNS.ConfirmStatus;
            let lnConfirmBy;
            rawNS.ConfirmBy === 0 ? lnConfirmBy = false : lnConfirmBy = this.dT.Dut(rawNS.ConfirmBy);
            niceNS['nConfirmBy'] = lnConfirmBy;
            return Promise.resolve(niceNS);
        });
    }
    /////////////////////////////////////////////////////////////////
    createCalEv(eventObj) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            let evType;
            let reqConf;
            let cCEvArr = [];
            let cCEvObj = { title: null, location: null, notes: null, startDate: null, endDate: null, options: {} };
            // SHIFTS -------------------------------------------------
            if (eventObj.hasOwnProperty('MatchedByTimesheet')) {
                evType = 'shift';
                const rawShiftO = eventObj;
                let shiftEvObj = cCEvObj;
                let shiftEvCalOpts = this.calOpts;
                shiftEvCalOpts.firstReminderMinutes = this.beforeTimes[evType];
                shiftEvObj.title = this.evIco.shift + this.evBName.shift + ' @ ' + this.workCode + ' (' + rawShiftO.nOpUnit + ')';
                shiftEvObj.location = this.workLocation;
                const aNDur = rawShiftO.nTotalTime;
                let nDurStr;
                if (aNDur.hours > 0 && aNDur.minutes > 0) {
                    nDurStr = aNDur.hours + ':' + aNDur.minutes;
                }
                else {
                    if (aNDur.hours > 0) {
                        nDurStr = aNDur.hours + 'h';
                    }
                    else {
                        nDurStr = aNDur.minutes + 'm';
                    }
                }
                ;
                let aNIncome;
                this.showIncome ? aNIncome = '\n\uD83D\uDCB2 ' + rawShiftO.nIncome : aNIncome = '';
                shiftEvObj.notes = 'Sheriff Event ID #' + rawShiftO.Id.toString() + '\n\u23F1 ' + nDurStr + aNIncome;
                const sD = this.dT.Dut(rawShiftO.StartTime);
                const eD = this.dT.Dut(rawShiftO.EndTime);
                shiftEvObj.startDate = sD;
                shiftEvObj.endDate = eD;
                shiftEvObj.options = shiftEvCalOpts;
                cCEvArr.push(shiftEvObj);
                // Confirm Shift ----------------------------------------
                if (rawShiftO.ConfirmStatus === 1 && rawShiftO.nConfirmBy !== false) {
                    reqConf = true;
                    let confEvObj = cCEvObj;
                    let confEvCalOpts = this.calOpts;
                    confEvCalOpts.firstReminderMinutes = this.beforeTimes[evType];
                    confEvObj.title = this.evIco.confirm + this.evBName.confirm + ' Deadline: ' + this.dT.format(new Date(rawShiftO.Date), 'EEE, d MMM') + ' @ ' + this.workCode + ' (' + rawShiftO.nOpUnit + ')';
                    confEvObj.location = null;
                    confEvObj.notes = 'Sheriff Event ID #' + rawShiftO.Id.toString();
                    confEvObj.startDate = rawShiftO.nConfirmBy;
                    confEvObj.endDate = this.dT.addHrs(rawShiftO.nConfirmBy, 1);
                    confEvObj.options = confEvCalOpts;
                    cCEvArr.push(confEvObj);
                }
                // TASKS --------------------------------------------------
            }
            else if (eventObj.hasOwnProperty('TaskSetupId')) {
                evType = 'task';
                const rawTaskO = eventObj;
                let taskEvObj = cCEvObj;
                let taskEvCalOpts = this.calOpts;
                taskEvCalOpts.firstReminderMinutes = this.beforeTimes[evType];
                taskEvObj.title = this.evIco.task + this.evBName.task + '- Task #' + rawTaskO.Id + ' from ' + this.getFName(rawTaskO.UserEntry) + ' @ ' + this.workCode;
                taskEvObj.location = this.workLocation;
                taskEvObj.notes = 'Sheriff Event ID #' + rawTaskO.Id.toString();
                taskEvObj.startDate = new Date(rawTaskO.DueDate);
                taskEvObj.endDate = this.dT.addHrs(taskEvObj.startDate, 1);
                taskEvObj.options = taskEvCalOpts;
                cCEvArr.push(taskEvObj);
            }
            else {
                this.logger.info('\uD83D\uDCC5 [calServ|createCalEv] (Error): Unknown eventObj Type?');
            }
            ;
            // FN ------------------------------------------------------
            for (let i = 0; i < cCEvArr.length; i++) {
                const cCEO = cCEvArr[i];
                try {
                    const cCEvRes = yield this.cal.createEventWithOptions(cCEO.title, cCEO.location, cCEO.notes, cCEO.startDate, cCEO.endDate, cCEO.options);
                    this.schedEvs[evType].push({ dId: eventObj.Id, cId: cCEvRes });
                    return Promise.resolve({ result: true, data: cCEvRes });
                }
                catch (cCEvErr) {
                    this.logger.info('\uD83D\uDCC5 [calServ|createCalEv] (Error): ' + cCEvErr);
                    return Promise.resolve({ result: false, data: cCEvErr });
                }
            }
        });
    }
    ////////////////////////////////////////////////////////////////
    findCalEvent(eventId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            const sD = this.dT.subDays(new Date(), 28);
            const eD = this.dT.addDays(new Date(), 28);
            let searchStr;
            eventId !== null ? searchStr = 'Sheriff Event ID #' + eventId.toString() : searchStr = 'Sheriff Event ID #';
            const fCERes = yield this.cal.findEvent(null, null, searchStr, sD, eD);
            if (fCERes) {
                return Promise.resolve({ result: true, data: fCERes });
            }
            else {
                return Promise.resolve({ result: true, data: fCERes });
            }
        });
    }
    ////////////////////////////////////////////////////////////////
    listCalEvents(startDate, endDate) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            return this.cal.listEventsInRange(startDate, endDate);
        });
    }
    ////////////////////////////////////////////////////////////////
    deleteAllSheriffEvs() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            const sT = new Date();
            this.logger.info('\uD83D\uDCC5 >🗑️> [calServ|deleteAllSheriffEvs] (STARTED)...');
            const sD = (0,date_fns__WEBPACK_IMPORTED_MODULE_9__.default)(new Date(), 5);
            const eD = (0,date_fns__WEBPACK_IMPORTED_MODULE_10__.default)(new Date(), 5);
            const allCals = this.allCalList;
            for (let i = 0; i < allCals.length; i++) {
                let thisCalDelIdList = [];
                const sheriffEvs10Y = yield this.cal.findEvent(null, null, 'Sheriff Event ID #', sD, eD);
                if (sheriffEvs10Y.length > 0) {
                    for (let i = 0; i < sheriffEvs10Y.length; i++) {
                        thisCalDelIdList.push(String(sheriffEvs10Y[i].id));
                    }
                }
                ;
                const deputyEvs10Y = yield this.cal.findEvent(null, null, 'Open in Deputy:', sD, eD);
                if (deputyEvs10Y.length > 0) {
                    for (let i = 0; i < deputyEvs10Y.length; i++) {
                        thisCalDelIdList.push(String(deputyEvs10Y[i].id));
                    }
                }
                ;
                this.logger.info(' 🗑️ FOUND ' + thisCalDelIdList.length + ' in ' + allCals[i].name + '(' + allCals[i].id + ') - Deleting...');
                let delGood = 0;
                let delBad = 0;
                for (let i = 0; i < thisCalDelIdList.length; i++) {
                    try {
                        yield this.cal.deleteEventById(String(thisCalDelIdList[i]), sD);
                        delGood++;
                    }
                    catch (_a) {
                        delBad++;
                    }
                }
                ;
                if (delGood === thisCalDelIdList.length) {
                    this.logger.info(' ✔️ REMOVED ALL (' + delGood + '/' + thisCalDelIdList.length + ')');
                }
                else {
                    this.logger.info(' ❌ REMOVED ONLY ' + delGood + '/' + thisCalDelIdList.length + ')');
                }
                ;
            }
            ;
            this.logger.info('\uD83D\uDCC5 <🗑️< [calServ|deleteAllSheriffEvs] (FINISHED!) - ' + this.evServ.getDur(sT) + 'ms');
            return Promise.resolve(true);
        });
    }
    ////////////////////////////////////////////////////////////////
    deleteCalEvent(eventId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('\uD83D\uDCC5 [calServ|deleteEvent] (' + eventId + ')...');
            const dCERes = yield this.cal.deleteEvent(null, null, 'Sheriff Event ID #' + eventId.toString(), null, null);
            if (dCERes) {
                return Promise.resolve({ result: true, data: dCERes });
            }
            else {
                return Promise.resolve({ result: true, data: dCERes });
            }
        });
    }
    ////////////////////////////////////////////////////////////////
    deleteCalEventById(calEventId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('\uD83D\uDCC5 [calServ|deleteCalEventById] (' + calEventId + ')...');
            const nowLess28 = this.dT.subDays(new Date(), 28);
            try {
                const dCEBIdRes = yield this.cal.deleteEventById(calEventId, nowLess28);
                console.log(dCEBIdRes);
                return Promise.resolve(dCEBIdRes);
            }
            catch (err) {
                this.logger.info('[calServ|deleteCalEventById] (ERROR): ' + JSON.stringify(err));
            }
        });
    }
    ////////////////////////////////////////////////////////////////
    openCal(openDate) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('\uD83D\uDCC5 [calServ|openCal] (' + openDate + ')...');
            let oD;
            openDate !== null ? oD = openDate : oD = new Date();
            const oCRes = yield this.cal.openCalendar(oD);
            if (oCRes) {
                return Promise.resolve({ result: true, data: oCRes });
            }
            else {
                return Promise.resolve({ result: true, data: oCRes });
            }
        });
    }
    ////////////////////////////////////////////////////////////////
    cShiftsDelay(shiftData) {
        this.logger.info('\uD83D\uDCC5 [calServ|cShiftsDelay] ()...');
        const cSDelayLoop = setInterval(() => {
            if (!this.tasksInProg) {
                this.logger.info('\uD83D\uDCC5 [calServ|cShiftsDelay] [TasksInProg=' + this.tasksInProg + '] - Running checkShifts()...');
                clearInterval(cSDelayLoop);
                setTimeout(() => { this.calCheckShifts(shiftData); }, 250);
            }
            else {
                this.logger.info('\uD83D\uDCC5 [calServ|cShiftsDelay] [TasksInProg=' + this.tasksInProg + '] - Waiting...');
            }
        }, 500);
    }
    ////////////////////////////////////////////////////////////////
    calCheckShifts(shiftData) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            let allFSSs = [];
            if (shiftData !== null) {
                allFSSs = shiftData;
            }
            else {
                let dbSRes = yield this.sqlServ.getFutureStartShifts();
                if (dbSRes.result) {
                    allFSSs = dbSRes.data;
                }
                else {
                    allFSSs = [];
                }
            }
            ;
            allFSSs.push(_appTypes__WEBPACK_IMPORTED_MODULE_6__.testShift);
            if (allFSSs.length > 0) {
                this.logger.info('\uD83D\uDCC5 [calServ|checkShifts] Found [' + allFSSs.length + '] Shifts to Schedule...');
                if (this.tasksInProg) {
                    this.logger.info('\uD83D\uDCC5 [calServ|checkShifts] (WARNING) tasksInProg=' + this.tasksInProg.toString().toUpperCase() + ' - Running cShiftsDelay()...');
                    this.cShiftsDelay(allFSSs);
                }
                else {
                    this.shiftsInProg = true;
                    const sSArr = allFSSs;
                    let schedGood = 0;
                    let schedBad = 0;
                    let schedSkip = 0;
                    for (let i = 0; i < sSArr.length; i++) {
                        const rawTSO = sSArr[i];
                        const tSO = yield this.formatShift(rawTSO);
                        const tSOStart = this.dT.Dut(tSO.StartTime);
                        if (this.dT.isA(tSOStart, new Date())) {
                            const findExist = yield this.findCalEvent(tSO.Id);
                            if (findExist.length > 0) {
                                for (let i = 0; i < findExist.length; i++) {
                                    yield this.deleteCalEventById(findExist[i].id);
                                }
                            }
                            ;
                            const doSchedRes = yield this.createCalEv(tSO);
                            if (doSchedRes.result) {
                                schedGood++;
                            }
                            else {
                                schedBad++;
                            }
                        }
                        else {
                            schedSkip++;
                        }
                    }
                    ;
                    this.logger.info('\uD83D\uDCC5 [calServ|checkShifts] (FINISHED) RESULTS: ✔️ ' + schedGood + ', ❌ ' + schedBad + ', ➖ ' + schedSkip);
                    this.shiftsInProg = false;
                    this.evServ.publish('calSched', true);
                }
            }
            else {
                this.logger.info('\uD83D\uDCC5 [calServ|checkShifts] (NIL) No Future Start Shifts To Schedule.');
                this.shiftsInProg = false;
                this.evServ.publish('calSched', true);
            }
        });
    }
    //////////////////////////////////////////////////////////////// 
    cTasksDelay(taskData) {
        this.logger.info('\uD83D\uDCC5 [calServ|cTasksDelay] ()...');
        const cTDelayLoop = setInterval(() => {
            if (!this.shiftsInProg) {
                this.logger.info('\uD83D\uDCC5 [calServ|cTasksDelay] [ShiftsInProg=' + this.shiftsInProg + '] - Running checkTasks()...');
                clearInterval(cTDelayLoop);
                setTimeout(() => { this.calCheckTasks(taskData); }, 250);
            }
            else {
                this.logger.info('\uD83D\uDCC5 [calServ|cTasksDelay] [ShiftsInProg=' + this.shiftsInProg + '] - Waiting...');
            }
        }, 500);
    }
    ////////////////////////////////////////////////////////////////
    calCheckTasks(taskData) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            let allFDTs = [];
            if (taskData !== null) {
                allFDTs = taskData;
            }
            else {
                let dbTRes = yield this.sqlServ.getFutureDueTasks();
                if (dbTRes.result) {
                    allFDTs = dbTRes.data;
                }
                else {
                    allFDTs = [];
                }
            }
            ;
            if (allFDTs.length > 0) {
                this.logger.info('\uD83D\uDCC5 [calServ|checkTasks] Found [' + allFDTs.length + '] Tasks to Schedule...');
                if (this.shiftsInProg) {
                    this.logger.info('\uD83D\uDCC5 [calServ|checkShifts] (WARNING) shiftsInProg=' + this.shiftsInProg.toString().toUpperCase() + ' - Running cTasksDelay()...');
                    this.cTasksDelay(allFDTs);
                }
                else {
                    this.tasksInProg = true;
                    let schedGood = 0;
                    let schedBad = 0;
                    let schedSkip = 0;
                    for (let i = 0; i < allFDTs.length; i++) {
                        const tT = allFDTs[i];
                        if (this.dT.isA(new Date(tT.DueDate), new Date())) {
                            const findExist = yield this.findCalEvent(tT.Id);
                            if (findExist.length > 0) {
                                for (let i = 0; i < findExist.length; i++) {
                                    yield this.deleteCalEventById(findExist[i].id);
                                }
                            }
                            ;
                            const doSchedRes = yield this.createCalEv(tT);
                            if (doSchedRes.result) {
                                schedGood++;
                            }
                            else {
                                schedBad++;
                            }
                        }
                        else {
                            schedSkip++;
                        }
                    }
                    ;
                    this.logger.info('\uD83D\uDCC5 [calServ|checkTasks] (FINISHED) RESULTS: ✔️ ' + schedGood + ', ❌ ' + schedBad + ', ➖ ' + schedSkip);
                    this.tasksInProg = false;
                    this.evServ.publish('calSched', true);
                }
            }
            else {
                this.logger.info('\uD83D\uDCC5 [calServ|checkTasks] (NIL) No Future Due Tasks Not Completed.');
                this.tasksInProg = false;
                this.evServ.publish('calSched', true);
            }
        });
    }
};
CalendarService.ctorParameters = () => [
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_11__.NGXLogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_12__.Platform },
    { type: _events_service__WEBPACK_IMPORTED_MODULE_1__.EventsService },
    { type: _datetime_service__WEBPACK_IMPORTED_MODULE_2__.DateTimeService },
    { type: _fairwork_service__WEBPACK_IMPORTED_MODULE_4__.FairworkService },
    { type: _sqlite_service__WEBPACK_IMPORTED_MODULE_5__.SQLiteService },
    { type: _ionic_native_calendar_ngx__WEBPACK_IMPORTED_MODULE_0__.Calendar },
    { type: _detail_service__WEBPACK_IMPORTED_MODULE_3__.DetailService },
    { type: _firebase_service__WEBPACK_IMPORTED_MODULE_7__.FirebaseService }
];
CalendarService = (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_13__.Injectable)({ providedIn: 'root' })
    ////////////////////////////////////////////////////////////////
], CalendarService);



/***/ }),

/***/ 12826:
/*!**********************************************!*\
  !*** ./src/app/services/datetime.service.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DateTimeService": function() { return /* binding */ DateTimeService; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var _ionic_native_date_picker_ngx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ionic-native/date-picker/ngx */ 61194);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! date-fns */ 92707);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! date-fns */ 22100);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! date-fns */ 93812);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! date-fns */ 50752);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! date-fns */ 94513);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! date-fns */ 63818);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! date-fns */ 51056);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! date-fns */ 45255);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! date-fns */ 21805);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! date-fns */ 84839);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! date-fns */ 46436);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! date-fns */ 30331);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! date-fns */ 15102);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! date-fns */ 77071);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! date-fns */ 69934);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! date-fns */ 61023);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! date-fns */ 76175);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! date-fns */ 54323);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! date-fns */ 91747);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! date-fns */ 12541);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! date-fns */ 12297);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! date-fns */ 27920);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! date-fns */ 18344);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! date-fns */ 38537);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! date-fns */ 57888);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! date-fns */ 44840);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! date-fns */ 33550);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! date-fns */ 35759);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! date-fns */ 87482);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! date-fns */ 64465);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! date-fns */ 98120);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! date-fns */ 23501);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! date-fns */ 29399);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! date-fns */ 39705);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! date-fns */ 16031);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! date-fns */ 50820);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! date-fns */ 48069);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! date-fns */ 23246);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! date-fns */ 45229);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! date-fns */ 79223);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! date-fns */ 20013);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! date-fns */ 4547);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! date-fns */ 87592);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! date-fns */ 51000);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! date-fns */ 76784);





////////////////////////////////////////////////////////////////////////////////////////////////////
let DateTimeService = class DateTimeService {
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    constructor(logger, datePicker) {
        this.logger = logger;
        this.datePicker = datePicker;
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        this.dPOpts = {
            mode: '',
            date: '',
            minDate: '',
            maxDate: '',
            titleText: '',
            is24Hour: false,
            androidTheme: 4,
            allowOldDates: true,
            allowFutureDates: true,
            todayText: 'Today'
        };
        this.tPOpts = {
            mode: 'time',
            date: '',
            titleText: 'Select Time',
            is24Hour: false,
            androidTheme: 4,
            nowText: 'Now'
        };
        this.monthNo = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        this.weekDayNo = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        this.uTokExpd = (authObj) => { if ((this.gUT()) - 600 > Number(authObj.expires_at)) {
            return true;
        }
        else {
            return false;
        } };
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    checkServ() { this.logger.info('[DTServ|checkServ] (TRUE) Date: ' + new Date().getDate()); return Promise.resolve(true); }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    rCalWVDH(d) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.default)(d, 'EEE') + ' ' + (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.default)(d, 'd'); }
    rCalWVT(d) { const soW = this.sOW(d); const eoW = this.eOW(d); const soWD = (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.default)(soW, 'd'); const eoWD = (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.default)(eoW, 'd'); return soWD + ' - ' + eoWD + ' ' + (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.default)(d, 'MMMM'); }
    rCalWVHC(d) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.default)(d, 'haaa'); }
    rCalDVT(d) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.default)(d, 'EEE, d MMM yyyy'); }
    addS(d, secs) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.default)(d, secs); }
    no2WD(weekdayNo) { return this.weekDayNo[weekdayNo]; }
    parseStr(Dstr, strF) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_3__.default)(Dstr, strF, new Date()); }
    format(Date, form) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.default)(Date, form); }
    gDate(d) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_4__.default)(d); }
    tD(ut) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_5__.default)(ut); }
    fDtN(d) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_6__.default)(d, { addSuffix: true }); }
    gD(d) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_7__.default)(d); }
    gY(d) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_8__.default)(d); }
    gH(d) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_9__.default)(d); }
    gm(d) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_10__.default)(d); }
    Dln(longNiceDate) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_3__.default)(longNiceDate, 'EEEE, d MMMM yyyy', new Date()); }
    LNd(Date) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.default)(Date, 'EEEE, d MMMM yyyy'); }
    LNdS(Date) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.default)(Date, 'EEEE, d MMMM'); }
    Dn(niceDate) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_3__.default)(niceDate, 'd MMM yyyy', new Date()); }
    Nd(Date) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.default)(Date, 'd MMM yyyy'); }
    Id(Date) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_11__.default)(Date); }
    Di(ISO) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_12__.default)(ISO); }
    pISO(ISO) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_12__.default)(ISO); }
    pJSON(JSON) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_13__.default)(JSON); }
    UTSd(Date) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.default)(Date, 'T'); }
    UTd(Date) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_14__.default)(Date); }
    NTut(UTS) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.default)((0,date_fns__WEBPACK_IMPORTED_MODULE_15__.default)(UTS), 'h:mmaaa'); }
    TFHut(UTS) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.default)((0,date_fns__WEBPACK_IMPORTED_MODULE_15__.default)(UTS), 'HH:mm'); }
    Dut(unixTime) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_15__.default)(unixTime); }
    DiffInDays(laterDate, earlierDate) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_16__.default)(laterDate, earlierDate); }
    DifDurStr(startDate, endDate) { let dur = (0,date_fns__WEBPACK_IMPORTED_MODULE_17__.default)({ start: startDate, end: endDate }); return (0,date_fns__WEBPACK_IMPORTED_MODULE_18__.default)(dur, { delimiter: ', ' }); }
    DurAsObj(startDate, endDate) {
        let rawDurObj = (0,date_fns__WEBPACK_IMPORTED_MODULE_17__.default)({ start: startDate, end: endDate });
        const dPs = ['seconds', 'minutes', 'hours', 'days', 'weeks', 'months', 'years'];
        for (let i = 0; i < dPs.length; i++) {
            if (!rawDurObj.hasOwnProperty(dPs[i])) {
                rawDurObj[dPs[i]] = 0;
            }
        }
        ;
        return rawDurObj;
    }
    syncStr(d) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_19__.default)(d, { fractionDigits: 3 }); }
    dISO(d) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_11__.default)(d); }
    dMax(dArr) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_20__.default)(dArr); }
    isSD(date1, date2) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_21__.default)(date1, date2); }
    isA(testDate, afterDate) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_22__.default)(testDate, afterDate); }
    isB(testDate, beforeDate) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_23__.default)(testDate, beforeDate); }
    isSW(date1, date2) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_24__.default)(date1, date2, { weekStartsOn: 1 }); }
    isSM(date1, date2) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_25__.default)(date1, date2); }
    sOW(Date) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_26__.default)(Date, { weekStartsOn: 1 }); }
    eOW(Date) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_27__.default)(Date, { weekStartsOn: 1 }); }
    isTW(d) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_28__.default)(d, { weekStartsOn: 1 }); }
    gM(Date) { return this.monthNo[(0,date_fns__WEBPACK_IMPORTED_MODULE_29__.default)(Date)]; }
    addHrs(date, hrs) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_30__.default)(date, hrs); }
    subDays(date, days) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_31__.default)(date, days); }
    addDays(date, days) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_32__.default)(date, days); }
    isThisFN(date) { const ftDAgo = this.subDays(new Date(), 14); if (this.isA(date, ftDAgo) && this.isB(date, new Date())) {
        return true;
    }
    else {
        return false;
    } }
    endOfHr(date) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_33__.default)(date); }
    startOfHr(date) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_34__.default)(date); }
    parse(dateStr, datePtn) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_3__.default)(dateStr, datePtn, new Date()); }
    round5(d) { let ms = 1000 * 60 * 5; let rD = new Date(Math.round(new Date(d).getTime() / ms) * ms); return rD; }
    round5_24h(date) { const roundD = this.round5(date); return (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.default)(roundD, 'HH:mm'); }
    isBW(d, range) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_35__.default)(d, range); }
    gUT() { return (0,date_fns__WEBPACK_IMPORTED_MODULE_36__.default)(new Date()); }
    getUT(d) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_36__.default)(d); }
    addWs(d, w) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_37__.default)(d, w); }
    isV(d) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_38__.default)(d); }
    subYs(d, years) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_39__.default)(d, years); }
    subWs(d, weeks) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_40__.default)(d, weeks); }
    subMs(d, mins) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_41__.default)(d, mins); }
    addMs(d, mins) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_42__.default)(d, mins); }
    sOfM(d) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_43__.default)(d); }
    eOfM(d) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_44__.default)(d); }
    sOfW(mode) { const sD = (0,date_fns__WEBPACK_IMPORTED_MODULE_26__.default)(new Date(), { weekStartsOn: 1 }); if (mode === 'date') {
        return sD;
    }
    else {
        return this.getUT(sD);
    } }
    eOfW(mode) { const eD = (0,date_fns__WEBPACK_IMPORTED_MODULE_27__.default)(new Date(), { weekStartsOn: 1 }); if (mode === 'date') {
        return eD;
    }
    else {
        return this.getUT(eD);
    } }
    authExpAt(authObj) {
        let newAuthObj = authObj;
        const nowUTS = this.getUT(new Date());
        const addExpSecs = Number(authObj.expires_in);
        const expAtSecs = nowUTS + addExpSecs;
        newAuthObj['expires_at'] = String(expAtSecs);
        newAuthObj['expires_in'] = String(authObj.expires_in);
        return newAuthObj;
    }
    shiftTTToDur(shiftTT) {
        let sTT = { hours: 0, minutes: 0 };
        sTT.hours = Math.floor(shiftTT);
        sTT.minutes = Math.round((0,date_fns__WEBPACK_IMPORTED_MODULE_45__.default)((shiftTT - sTT.hours)));
        return sTT;
    }
    rosVsTSTTDiff(rosterTT, tsheetTT) {
        let ttDiff = { hours: 0, minutes: 0 };
        let isNeg = false;
        const ttDiffRawHrs = tsheetTT - rosterTT;
        const ttDiffSign = Math.sign(ttDiffRawHrs);
        let ttDiffRawAbsHrs;
        if (ttDiffSign === 0) {
            return ttDiff;
        }
        else if (ttDiffSign === -1) {
            ttDiffRawAbsHrs = Math.abs(ttDiffRawHrs);
            isNeg = true;
        }
        else if (ttDiffSign === 1) {
            ttDiffRawAbsHrs = ttDiffRawHrs;
            isNeg = false;
        }
        ;
        const ttDiffWholeHrs = Math.floor(ttDiffRawAbsHrs);
        if (ttDiffWholeHrs === 0) {
            ttDiff.hours = 0;
        }
        else {
            if (isNeg) {
                ttDiff.hours = -ttDiffWholeHrs;
            }
            else {
                ttDiff.hours = ttDiffWholeHrs;
            }
        }
        ;
        const ttDiffPartHrs2Fixed = (ttDiffRawAbsHrs - ttDiffWholeHrs).toFixed(2);
        const ttDiffPartHrs = Number(ttDiffPartHrs2Fixed);
        if (ttDiffPartHrs === 0) {
            ttDiff.minutes = 0;
        }
        else {
            const ttDiffPHInMins = (0,date_fns__WEBPACK_IMPORTED_MODULE_45__.default)(ttDiffPartHrs);
            const ttDiffPHInMinsRounded = Math.round(ttDiffPHInMins);
            if (isNeg) {
                ttDiff.minutes = -ttDiffPHInMinsRounded;
            }
            else {
                ttDiff.minutes = ttDiffPHInMinsRounded;
            }
        }
        ;
        return ttDiff;
    }
    getShiftWeek() {
        const nowD = new Date();
        const getTN = (d) => {
            let res;
            if (this.isSD(d, nowD)) {
                res = 'T';
            }
            else if (this.isB(d, nowD)) {
                res = 'B';
            }
            else {
                res = 'A';
            }
            ;
            return res;
        };
        const tMon = (0,date_fns__WEBPACK_IMPORTED_MODULE_26__.default)(nowD, { weekStartsOn: 1 });
        const rW = [{ sn: 'mo', ln: 'monday', d: null, day: null, isshift: false, tonow: '' }, { sn: 'tu', ln: 'tuesday', d: null, day: null, isshift: false, tonow: '' }, { sn: 'we', ln: 'wednesday', d: null, day: null, isshift: false, tonow: '' }, { sn: 'th', ln: 'thursday', d: null, day: null, isshift: false, tonow: '' }, { sn: 'fr', ln: 'friday', d: null, day: null, isshift: false, tonow: '' }, { sn: 'sa', ln: 'saturday', d: null, day: null, isshift: false, tonow: '' }, { sn: 'su', ln: 'sunday', d: null, day: null, isshift: false, tonow: '' }];
        for (let i = 0; i < rW.length; i++) {
            const pI = i;
            if (i === 0) {
                rW[i]['d'] = tMon;
                rW[i]['day'] = (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.default)(tMon, 'd');
                rW[i]['tonow'] = getTN(tMon);
            }
            else {
                const tDay = this.addDays(tMon, pI);
                rW[i]['d'] = tDay;
                rW[i]['day'] = (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.default)(tDay, 'd');
                rW[i]['tonow'] = getTN(tDay);
            }
        }
        ;
        return Promise.resolve(rW);
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    rosterSETimes(StartUTS, EndUTS) {
        let sD = (0,date_fns__WEBPACK_IMPORTED_MODULE_15__.default)(StartUTS);
        let eD = (0,date_fns__WEBPACK_IMPORTED_MODULE_15__.default)(EndUTS);
        let finalS;
        let finalSPat = 'h:mm';
        let finalE;
        let finalEPat = 'h:mmaaa';
        if ((0,date_fns__WEBPACK_IMPORTED_MODULE_1__.default)(sD, 'aaa') !== (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.default)(eD, 'aaa')) {
            finalSPat += 'aaa';
        }
        ;
        finalS = (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.default)(sD, finalSPat);
        finalE = (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.default)(eD, finalEPat);
        return { s: finalS, e: finalE };
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    rosterSEDoneTimes(StartUTS, EndUTS) {
        const sD = (0,date_fns__WEBPACK_IMPORTED_MODULE_15__.default)(StartUTS);
        const eD = (0,date_fns__WEBPACK_IMPORTED_MODULE_15__.default)(EndUTS);
        const sT = (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.default)(sD, 'h:mm');
        const eT = (0,date_fns__WEBPACK_IMPORTED_MODULE_1__.default)(eD, 'h:mm');
        return { s: sT, e: eT };
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    openDRPicker(oPList, oPFromTo, oPDate, oPMin, oPMax) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_46__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DTServ|openPicker] (' + oPList + ',' + oPFromTo + ',' + oPDate + ',' + oPMin + ',' + oPMax + ')...');
            const stdLists = ['rosters', 'tsheets', 'tasks', 'news'];
            let defOpts = this.dPOpts;
            defOpts.mode = 'date';
            defOpts.date = oPDate;
            defOpts.minDate = oPMin;
            defOpts.maxDate = oPMax;
            if (stdLists.includes(oPList)) {
                defOpts.mode = 'date';
                defOpts.titleText = '\uD83D\uDCC5 𝖲𝖾𝗅𝖾𝖼𝗍 ' + (oPFromTo === 'start' ? '𝗦𝗧𝗔𝗥𝗧' : '𝗘𝗡𝗗') + ' 𝖣𝖺𝗍𝖾:';
                defOpts.allowFutureDates = false;
            }
            return yield this.datePicker.show(defOpts);
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    openTimePicker(newBOpenTime, startOrEnd) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_46__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DTServ|openTimePicker] ()...');
            return yield this.datePicker.show({ mode: 'datetime', date: newBOpenTime, titleText: (startOrEnd === 'start' ? '𝗦𝗧𝗔𝗥𝗧' : '𝗘𝗡𝗗') + ' 𝖳𝗂𝗆𝖾:', nowText: 'Now', is24Hour: false, androidTheme: 4 });
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    dpDateOnly(openDate) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_46__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DTServ|dpDateOnly] ()...');
            return yield this.datePicker.show({ mode: 'date', date: openDate, androidTheme: 4 });
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    pickerProfileDOB(openAt) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_46__.__awaiter)(this, void 0, void 0, function* () {
            let openD;
            openAt !== null ? openD = openAt : openD = new Date();
            const pPDOBRes = yield this.datePicker.show({ mode: 'date', date: openD, androidTheme: 4 });
            return Promise.resolve(pPDOBRes);
        });
    }
};
DateTimeService.ctorParameters = () => [
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_47__.NGXLogger },
    { type: _ionic_native_date_picker_ngx__WEBPACK_IMPORTED_MODULE_0__.DatePicker }
];
DateTimeService = (0,tslib__WEBPACK_IMPORTED_MODULE_46__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_48__.Injectable)({ providedIn: 'root' })
    ////////////////////////////////////////////////////////////////////////////////////////////////////
], DateTimeService);



/***/ }),

/***/ 22092:
/*!********************************************!*\
  !*** ./src/app/services/deputy.service.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeputyService": function() { return /* binding */ DeputyService; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _datetime_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./datetime.service */ 12826);
/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @capacitor/core */ 68384);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var _filesystem_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./filesystem.service */ 22904);
/* harmony import */ var _storage_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./storage.service */ 71188);
/* harmony import */ var _events_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./events.service */ 80106);
/* harmony import */ var _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ionic-native/http/ngx */ 68589);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var _ionic_native_file_transfer_ngx__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic-native/file-transfer/ngx */ 97905);
/* harmony import */ var _baseDB__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./baseDB */ 96414);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ 26215);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! date-fns */ 92707);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! date-fns */ 93812);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! date-fns */ 61023);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! date-fns */ 87482);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! date-fns */ 45255);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! date-fns */ 50752);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! date-fns */ 46436);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! date-fns */ 49387);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! date-fns */ 12297);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! date-fns */ 71879);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash */ 23815);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_8__);















////////////////////////////////////////////////////////////////////////////////////////////////////
let DeputyService = class DeputyService {
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    constructor(fileServ, storeServ, eventServ, logger, shttp, dT, transfer, platform) {
        this.fileServ = fileServ;
        this.storeServ = storeServ;
        this.eventServ = eventServ;
        this.logger = logger;
        this.shttp = shttp;
        this.dT = dT;
        this.transfer = transfer;
        this.platform = platform;
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        this.logP = '[DeputyService]';
        this.mod = this.logP;
        this.didRefresh = false;
        this.uUK = null;
        this.userEmail = null;
        this.isAuthenticated = new rxjs__WEBPACK_IMPORTED_MODULE_9__.BehaviorSubject(null);
        this.Client = {
            id: 'd06f14114b6005d5935e1ea13af4f3658b889302',
            secret: 'b9d5d47aa18cf73d890c933fabd156f469abedab',
            redirect: 'http://localhost/callback',
            scope: 'longlife_refresh_token',
            authUrl: 'https://once.deputy.com/my/oauth/access_token',
            auth: { access_token: null, expires_in: null, expires_at: null, scope: null, endpoint: null, refresh_token: null },
            authhead: null,
            apiUrl: null
        };
        this.SServer = {
            baseUrl: 'http://sheriff.zer0ne.dev:6969/',
            FCT: { custom_token: null, expires_at: null, fe_token: null }
        };
        this.testCount = 0;
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        this.getAuthRefreshOpts = (authOrRefresh, codeOrRefreshToken) => {
            let gAROpts = { method: 'post', responseType: 'json', data: { client_id: this.Client.id, client_secret: this.Client.secret, redirect_uri: this.Client.redirect, scope: this.Client.scope } };
            if (authOrRefresh === 'auth') {
                gAROpts['data']['grant_type'] = 'authorization_code';
                gAROpts['data']['code'] = codeOrRefreshToken;
            }
            else {
                gAROpts['data']['grant_type'] = 'refresh_token';
                gAROpts['data']['refresh_token'] = codeOrRefreshToken;
            }
            ;
            return gAROpts;
        };
        this.platform.ready().then(() => { this.fileTransfer = this.transfer.create(); });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    doSServerDPLogin(upCreds) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Deputy|doSServerDPLogin] (' + upCreds.user + '|' + upCreds.pass + ')...');
            const dplOpts = { method: 'post', data: { email: upCreds.user, password: upCreds.pass }, responseType: 'json', timeout: 30 };
            try {
                const { status, data } = yield this.shttp.sendRequest('http://sheriff.zer0ne.dev:6969/app/iablogin', dplOpts);
                if (status === 200) {
                    return Promise.resolve({ result: true, data: data });
                }
                else {
                    this.logger.info('[Deputy|doSServerDPLogin] (ERROR): ' + JSON.stringify(data));
                    return Promise.resolve({ result: false });
                }
            }
            catch (sFCMErr) {
                this.logger.info('[Deputy|doSServerDPLogin] (ERROR): ' + JSON.stringify(sFCMErr));
                return Promise.resolve({ result: false });
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    setSServerFCM(newFCM) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const sFCMOpts = { method: 'post', data: { ssauth: this.Client.auth.access_token, email: this.userEmail, fcm: newFCM }, responseType: 'json' };
            try {
                const { status, data } = yield this.shttp.sendRequest('http://sheriff.zer0ne.dev:6969/msg/setfcm', sFCMOpts);
                if (status === 200) {
                    return Promise.resolve(true);
                }
                else {
                    this.logger.info('[Deputy|setSServerFCM] (ERROR): (' + data.code + ') ' + data.msg);
                    return Promise.resolve(false);
                }
            }
            catch (sFCMErr) {
                this.logger.info('[Deputy|setSServerFCM] (ERROR): ' + JSON.stringify(sFCMErr));
                return Promise.resolve(false);
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getServerLog() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const gSLOpts = { method: 'post', data: { ssauth: this.Client.auth.access_token, email: this.userEmail }, responseType: 'text' };
            try {
                const { status, data } = yield this.shttp.sendRequest('http://sheriff.zer0ne.dev:6969/app/log', gSLOpts);
                if (status === 200) {
                    return Promise.resolve({ result: true, data: data });
                }
                else {
                    return Promise.resolve({ result: false, data: data });
                }
            }
            catch (gSLErr) {
                this.logger.info('[Deputy|getServerLog] (ERROR): ' + JSON.stringify(gSLErr));
                return Promise.resolve({ result: false, data: JSON.stringify(gSLErr) });
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getSnoopData() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const gSDOpts = { method: 'post', data: { ssauth: this.Client.auth.access_token, email: this.userEmail }, responseType: 'json' };
            try {
                const { status, data } = yield this.shttp.sendRequest('http://sheriff.zer0ne.dev:6969/app/snoophrs', gSDOpts);
                if (status === 200) {
                    return Promise.resolve({ result: true, data: data });
                }
                else {
                    return Promise.resolve({ result: false });
                }
            }
            catch (gSDErr) {
                this.logger.info('[Deputy|getSnoopData] (ERROR): ' + JSON.stringify(gSDErr));
                return Promise.resolve({ result: false, data: JSON.stringify(gSDErr) });
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getServerNotif() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const gSNOpts = { method: 'post', data: { ssauth: this.Client.auth.access_token, email: this.userEmail }, responseType: 'text' };
            try {
                const { status, data } = yield this.shttp.sendRequest('http://sheriff.zer0ne.dev:6969/app/notif', gSNOpts);
                if (status === 200) {
                    return Promise.resolve({ result: true, data: data });
                }
                else {
                    return Promise.resolve({ result: false, data: data });
                }
            }
            catch (gSLErr) {
                this.logger.info('[Deputy|getServerNotif] (ERROR): ' + JSON.stringify(gSLErr));
                return Promise.resolve({ result: false, data: JSON.stringify(gSLErr) });
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    doAuthToken(code) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            try {
                if (code) {
                    this.logger.info('[Deputy|doAuthToken] Requesting DP Tokens using CODE: ' + code);
                    const authOpts = this.getAuthRefreshOpts('auth', code);
                    const { status, error, data } = yield this.shttp.sendRequest(this.Client.authUrl, authOpts);
                    if (status === 200) {
                        const addExpAtRes = this.dT.authExpAt(data);
                        let allStrData = addExpAtRes;
                        for (const [key, value] of Object.entries(allStrData)) {
                            if (typeof value !== 'string') {
                                allStrData[key] = String(value);
                            }
                            ;
                            if (key.toString() === 'endpoint') {
                                allStrData[key] = String(value).replace('https://', '');
                            }
                            ;
                        }
                        ;
                        return Promise.resolve({ result: true, data: allStrData });
                    }
                    else {
                        return Promise.resolve({ result: false, data: JSON.stringify(error) });
                    }
                }
                else {
                    return Promise.resolve({ result: false, data: '[Deputy|doAuthToken] (ERROR): Missing/Invalid Code Provided' });
                }
            }
            catch (dATErr) {
                return Promise.resolve({ result: false, data: dATErr.error.description });
            }
        });
    }
    ;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    doRefreshToken(refreshAuthObj) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DeputyApiService|doRefreshToken] ()...');
            try {
                const refOpts = this.getAuthRefreshOpts('refresh', refreshAuthObj.refresh_token);
                this.shttp.setHeader(this.Client.auth.endpoint, 'Authorization', null);
                this.shttp.clearCookies();
                this.shttp.setFollowRedirect(false);
                this.shttp.setServerTrustMode('default');
                this.shttp.setDataSerializer('urlencoded');
                const refRes = yield this.shttp.sendRequest('https://' + refreshAuthObj.endpoint + '/oauth/access_token', refOpts);
                if (refRes.status === 200 && refRes.data.hasOwnProperty('access_token') && refRes.data.access_token !== refreshAuthObj.access_token) {
                    const addExpAtRes = this.dT.authExpAt(refRes.data);
                    let allStrData = addExpAtRes;
                    for (const [key, value] of Object.entries(allStrData)) {
                        if (typeof value !== 'string') {
                            allStrData[key] = String(value);
                        }
                        ;
                        if (key.toString() === 'endpoint') {
                            allStrData[key] = String(value).replace('https://', '');
                        }
                        ;
                    }
                    ;
                    this.setAuthGVars(allStrData);
                }
                else {
                    this.setAuthGVars(false);
                }
            }
            catch (refreshErr) {
                console.log(refreshErr);
                this.logger.info('[Deputy|doRefreshToken] (Error): ' + JSON.stringify(refreshErr));
                this.setAuthGVars(false);
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    setAuthGVars(dpAuthObj) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DeputyApiService|setAuthGVars] ()...');
            this.shttp.clearCookies();
            let tIVRes;
            !dpAuthObj ? tIVRes = false : tIVRes = yield this.tokenIsValid(dpAuthObj);
            if (tIVRes) {
                this.isAuthenticated.next(true);
                this.Client.auth = dpAuthObj;
                this.Client.authhead = { 'Authorization': 'OAuth ' + this.Client.auth.access_token };
                this.Client.apiUrl = 'https://' + this.Client.auth.endpoint + '/api/v1/';
                this.shttp.setHeader(this.Client.auth.endpoint, 'Authorization', 'OAuth ' + this.Client.auth.access_token);
                this.shttp.setFollowRedirect(true);
                this.shttp.setRequestTimeout(20);
                this.shttp.setServerTrustMode('nocheck');
                this.shttp.setDataSerializer('json');
                let evResO = { result: true, refresh: this.didRefresh, data: this.Client.auth };
                if (!this.didRefresh) {
                    this.eventServ.showToast('success', 'ᴛᴏᴋᴇɴ ᴠᴀʟɪᴅ');
                }
                else {
                    this.eventServ.showToast('success', 'ᴛᴏᴋᴇɴ ʀᴇꜰʀᴇꜱʜᴇᴅ');
                    this.didRefresh = false;
                }
                ;
                this.storeServ.setObject(this.uUK + 'DPAuth', dpAuthObj);
                this.storeServ.setItem('userEmail', this.userEmail);
                this.storeServ.setItem('currentUUK', this.uUK);
                // ----------------------------------------
                this.eventServ.publish('setAuthGVarsDone', evResO);
                // ----------------------------------------
                this.logger.info('🔑🎟️🎟️🎟️🎟️🎟️🎟️🎟️🎟️🎟️🎟️🎟️🎟️🎟️🎟️🎟️🎟️🎟️🎟️🎟️');
                this.logger.info('🔑 𝗗𝗘𝗣𝗨𝗧𝗬 𝗔𝗨𝗧𝗛 𝗘𝗩 {Object} - "setAuthGVarsDone"');
                this.logger.info('🔑 .result:boolean  = TRUE');
                this.logger.info('🔑 .refresh:boolean = ' + evResO.refresh.toString().toUpperCase());
                this.logger.info('🔑 .data:object     = {');
                this.logger.info('🔑   access_token:string  = ' + evResO.data.access_token);
                this.logger.info('🔑   expires_in:string    = ' + evResO.data.expires_in);
                this.logger.info('🔑   expires_at:string    = ' + evResO.data.expires_at);
                this.logger.info('🔑   scope:string         = ' + evResO.data.scope);
                this.logger.info('🔑   endpoint:string      = ' + evResO.data.endpoint);
                this.logger.info('🔑   refresh_token:string = ' + evResO.data.refresh_token);
                this.logger.info('🔑 }');
                this.logger.info('🔑🎟️🎟️🎟️🎟️🎟️🎟️🎟️🎟️🎟️🎟️🎟️🎟️🎟️🎟️🎟️🎟️🎟️🎟️🎟️');
            }
            else {
                if (!this.didRefresh) {
                    this.didRefresh = true;
                    this.eventServ.showToast('refresh', 'ʀᴇꜰʀᴇꜱʜɪɴɢ...');
                    if (dpAuthObj) {
                        this.doRefreshToken(dpAuthObj);
                    } // Try Refresh Token (x1)
                    else {
                        this.doRefreshToken(this.Client.auth);
                    }
                }
                else {
                    this.didRefresh = false;
                    this.eventServ.showToast('error', 'ʀᴇꜰʀᴇꜱʜ ꜰᴀɪʟᴇᴅ: ʀᴇꜰʀᴇꜱʜ ᴇrror');
                    this.eventServ.publish('setAuthGVarsDone', { result: false });
                    this.clearAuthGVars();
                }
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    clearAuthGVars() {
        this.logger.info('[DeputyApiService|clearAuthGVars] ()...');
        this.Client.auth = null;
        this.Client.authhead = null;
        this.Client.apiUrl = null;
        this.uUK = null;
        this.userEmail = null;
        this.isAuthenticated.next(false);
        this.eventServ.publish('clearAuthGVarsDone', true);
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    tokenIsValid(testAuth) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const testOpts = { method: 'get', headers: { 'Authorization': 'OAuth ' + testAuth.access_token }, responseType: 'json' };
            try {
                const { status } = yield this.shttp.sendRequest('https://' + testAuth.endpoint + '/api/v1/me', testOpts);
                if (status === 200) {
                    return Promise.resolve(true);
                }
                else {
                    return Promise.resolve(false);
                }
            }
            catch (_a) {
                return Promise.resolve(false);
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getFCT(tToken) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const { status, data } = yield this.shttp.sendRequest('http://sheriff.zer0ne.dev:6969/fct/getfct', { method: 'post', data: { email: this.userEmail, token: tToken }, responseType: 'json', timeout: 10 });
                if (status === 200) {
                    this.logger.info('[Deputy|getFCT] 🔥🎟️ (SUCCESS): [TOKEN]: ' + data.custom_token.substring(0, 20) + '... [EXPIRES]: ' + data.expires_at + ' [FE_TOKEN]: ' + data.fe_token);
                    this.SServer.FCT = data;
                    this.storeServ.setItem('currentFEToken', data.fe_token);
                    return Promise.resolve({ result: true, data: data });
                }
                else {
                    return Promise.resolve({ result: false, data: data });
                }
            }
            catch (dRFCTErr) {
                this.logger.info('[Deputy|getFCT] (ERROR): ' + JSON.stringify(dRFCTErr));
                return Promise.resolve({ result: false, data: JSON.stringify(dRFCTErr) });
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    quickMeAva() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[' + this.mod + '|quickMeAva] ()...');
            const statMeAva = yield this.fileServ.stat(this.fileServ.phoneFS, '/Sheriff/assets/meAvatar');
            const meAvaUri = (_capacitor_core__WEBPACK_IMPORTED_MODULE_1__.Capacitor.convertFileSrc(statMeAva.data.uri));
            try {
                const { status, data } = yield this.shttp.sendRequest(this.Client.apiUrl + 'me', { method: 'get', responseType: 'json' });
                if (status === 200) {
                    yield this.fileServ.replaceMeAva(data.UserObjectForAPI.Photo);
                }
                if (this.storeServ.getItem(this.uUK + 'meAvatar')) {
                    return Promise.resolve({ result: true, data: meAvaUri });
                }
                else {
                    this.storeServ.setItem(this.uUK + 'meAvatar', meAvaUri);
                    return Promise.resolve({ result: true, data: meAvaUri });
                }
            }
            catch (_a) {
                return Promise.resolve({ result: false });
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    quickWorkAva() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[' + this.mod + '|quickWorkAva] ()...');
            const statWorkAva = yield this.fileServ.stat(this.fileServ.phoneFS, '/Sheriff/assets/workAvatar');
            const workAvaUri = (_capacitor_core__WEBPACK_IMPORTED_MODULE_1__.Capacitor.convertFileSrc(statWorkAva.data.uri));
            try {
                const { status, data } = yield this.shttp.sendRequest(this.Client.apiUrl + 'my/setup', { method: 'get', responseType: 'json' });
                if (status === 200) {
                    yield this.fileServ.replaceWorkAva(data.PortfolioLogoUrl);
                }
                if (this.storeServ.getItem(this.uUK + 'workAvatar')) {
                    return Promise.resolve({ result: true, data: workAvaUri });
                }
                else {
                    this.storeServ.setItem(this.uUK + 'workAvatar', workAvaUri);
                    return Promise.resolve({ result: true, data: workAvaUri });
                }
            }
            catch (_a) {
                return Promise.resolve({ result: false });
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    dlConvertMeWorkAvas() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[' + this.mod + '|dlConvertMeWorkAvas] ()...');
            let meRes;
            let workRes;
            let meAvaStr;
            let workAvaStr;
            let webMeAvaURL;
            let webWorkAvaURL;
            const doMeErr = (err) => { meRes = false; this.logger.info('[meAva] (Error): ' + JSON.stringify(err)); this.eventServ.publish('avaTasksCounter', { name: 'me', data: null }); };
            const doWorkErr = (err) => { workRes = false; this.logger.info('[workAva] (Error): ' + JSON.stringify(err)); this.eventServ.publish('avaTasksCounter', { name: 'work', data: null }); };
            const getMeAva = () => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
                const freshMeObj = yield this.shttp.sendRequest(this.Client.apiUrl + 'me', { method: 'get', responseType: 'json' });
                let storedMeObj;
                if (freshMeObj.status === 200) {
                    storedMeObj = freshMeObj.data;
                }
                else {
                    storedMeObj = yield this.storeServ.getObject(this.uUK + 'MeData');
                }
                ;
                webMeAvaURL = storedMeObj.UserObjectForAPI.Photo;
                try {
                    let uriForSaveMe = null;
                    const existMeAvaRes = yield this.fileServ.stat(this.fileServ.phoneFS, '/Sheriff/assets/meAvatar');
                    if (existMeAvaRes.result) {
                        const replacedMe = yield this.fileServ.compareReplaceAva('me', webMeAvaURL, existMeAvaRes.data.size);
                        let consMTxt;
                        replacedMe ? consMTxt = '✔️Replaced' : consMTxt = '🔸Retained';
                        this.logger.info('[Deputy|dlConvertMeWorkAvas] 🎇 (Keep/Replace|meAva) ' + consMTxt);
                        uriForSaveMe = (_capacitor_core__WEBPACK_IMPORTED_MODULE_1__.Capacitor.convertFileSrc(existMeAvaRes.data.uri));
                    }
                    else {
                        uriForSaveMe = yield this.fileServ.dlFile(webMeAvaURL, 'meAvatar');
                    }
                    ;
                    if (uriForSaveMe !== null) {
                        meRes = true;
                        this.storeServ.setItem(this.uUK + 'meAvatar', uriForSaveMe);
                        this.eventServ.publish('avaTasksCounter', { name: 'me', data: uriForSaveMe });
                    }
                    else {
                        this.logger.info('[Deputy|dlConvertMeWorkAvas] - ERROR: uriForSaveMe===null');
                    }
                }
                catch (meDLErr) {
                    doMeErr(meDLErr);
                }
            });
            const getWorkAva = () => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
                const storedMySetupData = yield this.storeServ.getObject(this.uUK + 'MySetupData');
                const storeAvaExpUTS = Number(storedMySetupData.PortfolioLogoUrl.split('Expires=')[1].substring(0, 10));
                const nowUTS = this.dT.getUT(new Date());
                if (nowUTS > storeAvaExpUTS) {
                    const freshWorkAva = yield this.getMyWorkAva();
                    if (freshWorkAva !== 'error') {
                        webWorkAvaURL = freshWorkAva;
                    }
                    {
                        webWorkAvaURL = null;
                    }
                }
                else {
                    webWorkAvaURL = storedMySetupData.PortfolioLogoUrl;
                }
                ;
                try {
                    let uriForSaveWork = null;
                    const existWorkAvaRes = yield this.fileServ.stat(this.fileServ.phoneFS, '/Sheriff/assets/workAvatar');
                    if (existWorkAvaRes.result) {
                        if (webWorkAvaURL !== null) {
                            const replacedWork = yield this.fileServ.compareReplaceAva('work', webWorkAvaURL, existWorkAvaRes.data.size);
                            let consMTxt;
                            replacedWork ? consMTxt = '✔️Replaced' : consMTxt = '🔸Retained';
                            this.logger.info('[Deputy|dlConvertMeWorkAvas] 🎇 (Keep/Replace|workAva) ' + consMTxt);
                        }
                        ;
                        uriForSaveWork = (_capacitor_core__WEBPACK_IMPORTED_MODULE_1__.Capacitor.convertFileSrc(existWorkAvaRes.data.uri));
                    }
                    else {
                        if (webWorkAvaURL !== null) {
                            uriForSaveWork = yield this.fileServ.dlFile(webWorkAvaURL, 'workAvatar');
                        }
                        else {
                            uriForSaveWork = './../../assets/img/icon.png';
                        }
                    }
                    ;
                    if (uriForSaveWork !== null) {
                        workRes = true;
                        this.storeServ.setItem(this.uUK + 'workAvatar', uriForSaveWork);
                        this.eventServ.publish('avaTasksCounter', { name: 'work', data: uriForSaveWork });
                    }
                    else {
                        this.logger.info('[Deputy|dlConvertMeWorkAvas] - ERROR: uriForSaveWork===null');
                    }
                }
                catch (workDLErr) {
                    doWorkErr(workDLErr);
                }
            });
            this.eventServ.subscribe('avaTasksCounter', taskData => {
                if (taskData.name === 'me') {
                    this.logger.info('[DAS|dlConvertMeWorkAvas] - Converting [workAvatar]...');
                    meAvaStr = taskData.data;
                    getWorkAva();
                }
                else if (taskData.name === 'work') {
                    this.eventServ.destroy('avaTasksCounter');
                    this.logger.info('[DAS|dlConvertMeWorkAvas] - Conversion Attempts Finished.');
                    workAvaStr = taskData.data;
                    if (meRes && workRes) {
                        this.eventServ.publish('dlConvAvasFinished', { result: true, data: { me: meAvaStr, work: workAvaStr } });
                    }
                    else {
                        this.eventServ.publish('dlConvAvasFinished', { result: false, data: null });
                    }
                }
            });
            this.logger.info('[DAS|dlConvertMeWorkAvas] - Converting [meAvatar]...');
            getMeAva();
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    frFastStart() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const sT = new Date();
            this.dlConvertMeWorkAvas();
            const allEPs = ['colleague', 'roster', 'timesheet', 'task', 'memo', 'contactaddress/all', 'notifications', 'leave', 'unavail'];
            const ucEPs = ['roster', 'timesheet', 'task', 'memo', 'leave'];
            for (let i = 0; i < allEPs.length; i++) {
                const { data } = yield this.getMy(allEPs[i]);
                // If This MyEP is Core 
                if (ucEPs.includes(allEPs[i])) {
                    this.storeServ.setObject('fr-' + (allEPs[i].charAt(0).toUpperCase() + allEPs[i].slice(1)), data);
                }
                else {
                    if (allEPs[i] === 'colleague') {
                        this.storeServ.setObject(this.uUK + 'MyColleagues', data);
                        this.storeServ.setObject(this.uUK + 'fr-colleague', data);
                    }
                    else if (allEPs[i] === 'leave') {
                        this.storeServ.setObject('fr-EmployeeAvailability', data);
                    }
                    else {
                        this.storeServ.setObject('fr-' + allEPs[i], data);
                    }
                }
            }
            return Promise.resolve(sT);
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getMeMyData() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[' + this.mod + '|getMeMyData] ()...');
            const doErr = (err) => { this.eventServ.publish('getMeMyDataDone', { result: false, data: err }); };
            const doSuccess = (meO, myO) => { this.eventServ.publish('getMeMyDataDone', { result: true, data: { me: meO, my: myO } }); };
            try {
                const meAPIRes = yield this.shttp.sendRequest(this.Client.apiUrl + 'me', { method: 'get', responseType: 'json' });
                if (meAPIRes.status === 200) {
                    this.storeServ.setObject(this.uUK + 'MeData', meAPIRes.data);
                }
                ;
                const myAPIRes = yield this.shttp.sendRequest(this.Client.apiUrl + 'my/setup', { method: 'get', responseType: 'json' });
                if (myAPIRes.status === 200) {
                    this.storeServ.setObject(this.uUK + 'MySetupData', myAPIRes.data);
                }
                ;
                if (meAPIRes.status === 200 && myAPIRes.status === 200) {
                    doSuccess(meAPIRes.data, myAPIRes.data);
                }
                else {
                    let errStr;
                    if (meAPIRes.hasOwnProperty('error')) {
                        errStr = JSON.stringify(meAPIRes.error);
                    }
                    ;
                    if (myAPIRes.hasOwnProperty('error')) {
                        errStr = errStr + ' | ' + JSON.stringify(myAPIRes.error);
                    }
                    ;
                    doErr(errStr);
                }
            }
            catch (gMMErr) {
                this.logger.info('[Deputy|getMeMyData] (ERROR):');
                this.logger.info(gMMErr);
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getMe() {
        this.logger.info('[DeputyApiService|getMe] ()...');
        return this.shttp.sendRequest(this.Client.apiUrl + 'me', { method: 'get', responseType: 'json' });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getMy(mySub) {
        this.logger.info('[DeputyApiService|getMy] ()...');
        return this.shttp.sendRequest(this.Client.apiUrl + 'my/' + mySub, { method: 'get', responseType: 'json' });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getThis(fullPath) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DeputyApiService|getThis] (' + fullPath + ')...');
            const { data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + fullPath, { method: 'get', responseType: 'json' });
            if (!error) {
                return Promise.resolve({ r: true, d: data });
            }
            else {
                return ({ r: false, d: error });
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    postThis(fullPath) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DeputyApiService|postThis] (' + fullPath + ')...');
            const { data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + fullPath, { method: 'post', responseType: 'json' });
            if (!error) {
                return Promise.resolve({ r: true, d: data });
            }
            else {
                return ({ r: false, d: error });
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getDetailMe() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DeputyApiService|getDetailMe] ()...');
            try {
                const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'me', { method: 'get', responseType: 'json' });
                if (status === 200) {
                    return Promise.resolve({ result: true, data: data });
                }
                else {
                    return Promise.resolve({ result: false, data: error });
                }
            }
            catch (gDMErr) {
                return Promise.resolve({ result: false, data: gDMErr });
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getDetailMy() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DeputyApiService|getDetailMy] ()...');
            try {
                const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'my/setup', { method: 'get', responseType: 'json' });
                if (status === 200) {
                    return Promise.resolve({ result: true, data: data });
                }
                else {
                    return Promise.resolve({ result: false, data: error });
                }
            }
            catch (gDMErr) {
                return Promise.resolve({ result: false, data: gDMErr });
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getDetailPpl() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DeputyApiService|getDetailPpl] ()...');
            try {
                const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'my/colleagues', { method: 'get', responseType: 'json' });
                if (status === 200) {
                    return Promise.resolve({ result: true, data: data });
                }
                else {
                    return Promise.resolve({ result: false, data: error });
                }
            }
            catch (gDMErr) {
                return Promise.resolve({ result: false, data: gDMErr });
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getMyWorkAva() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DeputyApiService|getMyWorkAva] ()...');
            const { status, data } = yield this.shttp.sendRequest(this.Client.apiUrl + 'my/setup', { method: 'get', responseType: 'json' });
            let wA;
            if (status === 200) {
                wA = data.PortfolioLogoUrl;
            }
            else {
                wA = 'error';
            }
            ;
            return wA;
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getMyOwnAva() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DeputyApiService|getMyOwnAva] ()...');
            const { status, data } = yield this.shttp.sendRequest(this.Client.apiUrl + 'me', { method: 'get', responseType: 'json' });
            let mA;
            if (status === 200) {
                mA = data.UserObjectForAPI.Photo;
            }
            else {
                mA = 'error';
            }
            ;
            return mA;
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getResource(resSub) {
        this.logger.info('[DeputyApiService|getResource] ()...');
        return this.shttp.sendRequest(this.Client.apiUrl + 'resource/' + resSub, { method: 'get', responseType: 'json' });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    syncDBCount(dbEP, epType) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            let infoEP;
            let isRes;
            if (epType === 'res') {
                isRes = true;
                infoEP = '/INFO';
            }
            else {
                isRes = false;
                infoEP = '';
            }
            const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + dbEP + infoEP, { method: 'get', responseType: 'json' });
            if (status) {
                if (isRes) {
                    return Promise.resolve({ result: true, data: data.count });
                }
                else {
                    return Promise.resolve({ result: true, data: data });
                }
            }
            else {
                return Promise.resolve({ result: false, data: data.status + ': ' + error });
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getMemo(memoId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            let memoQBody;
            memoId === null ? memoQBody = { 'search': { 's1': { 'field': 'Id', 'type': 'ge', 'data': 1 } }, 'sort': { 'Id': 'desc' } } : memoQBody = { 'search': { 's1': { 'field': 'Id', 'type': 'eq', 'data': memoId } }, 'sort': { 'Id': 'desc' } };
            const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'resource/Memo/QUERY', { method: 'post', data: memoQBody, responseType: 'json' });
            if (status === 200) {
                return Promise.resolve(data);
            }
            else {
                return Promise.resolve(error);
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getWeekTSheets() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const startWeek = this.dT.sOW(new Date());
            const endWeek = this.dT.eOW(new Date());
            const gWTSBody = { 'search': { 's1': { 'field': 'Date', 'type': 'ge', 'data': startWeek }, 's2': { 'field': 'Date', 'type': 'le', 'data': endWeek } }, 'sort': { 'Date': 'asc' } };
            const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'resource/Timesheet/QUERY', { method: 'post', data: gWTSBody, responseType: 'json' });
            if (!error) {
                return Promise.resolve(data);
            }
            else {
                return Promise.resolve(error);
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getSyncItems(dbEP, apiCount) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const batchBodyObj = { start: (apiCount - 100), max: 500 };
            const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + dbEP + '/QUERY', { method: 'post', data: batchBodyObj, responseType: 'json' });
            if (status === 200) {
                return Promise.resolve({ result: true, data: data });
            }
            else {
                return Promise.resolve({ result: false, data: error });
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    crawlAPI() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const sT = new Date();
            const allResEP = Object.entries(_baseDB__WEBPACK_IMPORTED_MODULE_7__.Resources);
            const allLen = allResEP.length;
            let allC = 0;
            let allTables = [];
            let failedTables = [];
            const pk = ' PRIMARY KEY NOT NULL';
            const rn = 'resource_name';
            const gT = (n, t) => { let fStr; let fT = (_baseDB__WEBPACK_IMPORTED_MODULE_7__.TypeMap[t.toLowerCase()]); fT ? fT = fT.toUpperCase() : fT = 'TEXT'; n === 'Id' ? fStr = fT + pk : fStr = fT; return fStr; };
            let joinsTable = { name: 'joins', schema: [{ column: rn, value: 'TEXT' + pk }, { column: 'joins', value: 'TEXT' }], values: [] };
            let assocsTable = { name: 'assocs', schema: [{ column: rn, value: 'TEXT' + pk }, { column: 'assocs', value: 'TEXT' }], values: [] };
            let countTable = { name: 'count', schema: [{ column: rn, value: 'TEXT' + pk }, { column: 'count', value: 'INTEGER' }], values: [] };
            for (const [key, value] of allResEP) {
                allC++;
                let fieldsSchema = [];
                const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'resource/' + key + '/INFO', { method: 'get', responseType: 'json' });
                if (status !== 200) {
                    failedTables.push({ name: key, status: status, error: error });
                }
                else {
                    const tblFields = Object.entries(data.fields);
                    for (let i = 0; i < tblFields.length; i++) {
                        fieldsSchema.push({ column: tblFields[i][0], value: gT(tblFields[i][0], tblFields[i][1]) });
                    }
                    allTables.push({ name: value, schema: fieldsSchema, indexes: [{ name: 'IndexIdModifiedDesc', value: 'Id DESC, Modified, DESC' }] });
                    joinsTable.values.push([value, (data.joins), JSON.stringify(data.joins)]);
                    assocsTable.values.push([value, JSON.stringify(data.assocs)]);
                    countTable.values.push([value, data.count]);
                }
            }
            allTables.push(joinsTable);
            allTables.push(assocsTable);
            allTables.push(countTable);
            console.log('SUCCESS: ' + allTables.length + ' | FAILED: ' + failedTables.length + ' - Total Time: ' + (this.eventServ.getDur(sT) / 1000) + 's');
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    firstRunRecordsCheck() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Deputy|firstRunResCheck] (STARTED)...');
            let frRecordsCatArr = [];
            let isOK = 0;
            let isER = 0; //frCheckResArr
            for (let i = 0; i < _baseDB__WEBPACK_IMPORTED_MODULE_7__.resEndPointArr.length; i++) {
                const recCat = _baseDB__WEBPACK_IMPORTED_MODULE_7__.resEndPointArr[i];
                try {
                    const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'resource/' + recCat + '/INFO', { method: 'get', responseType: 'json' });
                    if (status === 200) {
                        isOK++;
                        frRecordsCatArr.push({ name: recCat, access: true, fields: data.fields, count: data.count });
                    }
                    else {
                        isER++;
                        frRecordsCatArr.push({ name: recCat, access: false, error: error, count: 0 });
                    }
                }
                catch (frRCErr) {
                    isER++;
                    frRecordsCatArr.push({ name: recCat, access: false, error: frRCErr, count: 0 });
                }
            }
            ;
            this.logger.info('[DeputyApiService|firstRunResCheck] (COMPLETED): ' + isOK + ' GOOD + ' + isER + ' BAD - Saving/Publishing frRecordsCatObj...');
            return Promise.resolve(frRecordsCatArr);
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getNo(tR) {
        let oTyp;
        let oLen;
        const isA = (tR) => { if (Array.isArray(tR)) {
            return true;
        }
        else {
            return false;
        } };
        const isO = (tR) => { if (tR === Object(tR) && !Array.isArray(tR)) {
            return true;
        }
        else {
            return false;
        } };
        if (isA(tR)) {
            oTyp = 'array';
            oLen = tR.length;
        }
        ;
        if (isO(tR)) {
            oTyp = 'object';
            oLen = Object.keys(tR).length;
        }
        ;
        if (!isA(tR) && !isO(tR)) {
            oTyp = 'nk';
            oLen = 0;
        }
        ;
        return Promise.resolve({ o: oTyp, l: oLen });
    }
    ;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    firstRunMyCheck() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Deputy|firstRunMyCheck] (STARTED)...');
            let frMyCatArr = [];
            let isOK = 0;
            let isER = 0;
            for (let i = 0; i < _baseDB__WEBPACK_IMPORTED_MODULE_7__.frCheckMyArr.length; i++) {
                let myCat = _baseDB__WEBPACK_IMPORTED_MODULE_7__.frCheckMyArr[i];
                try {
                    const { status, data } = yield this.shttp.sendRequest(this.Client.apiUrl + 'my/' + myCat, { method: 'get', responseType: 'json' });
                    if (status === 200) {
                        isOK++;
                        const dataInfo = yield this.getNo(data);
                        frMyCatArr.push({ name: myCat, error: false, type: dataInfo.o, count: dataInfo.l, data: data });
                    }
                    else {
                        isER++;
                        frMyCatArr.push({ name: myCat, error: true });
                    }
                }
                catch (frRCErr) {
                    isER++;
                    frMyCatArr.push({ name: myCat, error: true });
                }
            }
            ;
            this.logger.info('[Deputy|firstRunMyCheck] (COMPLETED): ' + isOK + ' GOOD + ' + isER + ' BAD - Saving/Publishing frMyCatObj...');
            return Promise.resolve(frMyCatArr);
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    frDLMyItems(myEP) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Deputy|frDLMyItems] (' + myEP + ')');
            const getSingleMyItems = (mEP) => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
                let fEP;
                mEP === 'location' || mEP === 'contactaddress' ? fEP = mEP + '/all' : fEP = mEP;
                const { status, data } = yield this.shttp.sendRequest(this.Client.apiUrl + 'my/' + fEP, { method: 'get', responseType: 'json' });
                if (status === 200) {
                    const dataInfo = yield this.getNo(data);
                    if (dataInfo.l > 0) {
                        this.eventServ.publish('frDLMyItems', { stage: 'update', getThisPBar: 1 });
                        return { error: false, count: dataInfo.l, result: data };
                    }
                    else {
                        this.eventServ.publish('frDLMyItems', { stage: 'update', getThisPBar: 1 });
                        return { error: false, count: 0, result: null };
                    }
                }
                else {
                    this.eventServ.publish('frDLMyItems', { stage: 'update', getThisPBar: 1 });
                    return { error: true, count: 0, result: null };
                }
            });
            (() => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
                this.logger.info('[Deputy|frDLMyItems] (' + myEP + ') - [START]');
                const finalSingleObj = yield getSingleMyItems(myEP);
                if (!finalSingleObj.error && finalSingleObj.count > 0) {
                    let finalMyArr = [];
                    let finalEP = 'fr-' + myEP;
                    if (myEP !== 'roster') {
                        finalMyArr = finalSingleObj.result;
                    }
                    else {
                        const resRos = yield this.storeServ.getObject('fr-Roster');
                        const mySet = new Set([...resRos, ...finalSingleObj.result]);
                        finalMyArr = Array.from(mySet);
                    }
                    this.logger.info('[Deputy|frDLMyItems] (' + myEP + ') - [FINISH] (Saved OK): ' + finalMyArr.length);
                    this.eventServ.publish('frDLMyItems', { stage: 'end', error: false, myEPName: myEP, records: finalMyArr.length, data: finalMyArr });
                }
                else {
                    if (finalSingleObj.error) {
                        this.logger.info('[DeputyApiService|frDLMyItems] (' + myEP + ') - [FINISH] (Request Error)');
                        this.eventServ.publish('frDLMyItems', { stage: 'end', error: true, records: null });
                    }
                    else {
                        this.logger.info('[DeputyApiService|frDLMyItems] (' + myEP + ') - [FINISH] (No Data) (0 length)');
                        this.eventServ.publish('frDLMyItems', { stage: 'end', error: false, records: null });
                    }
                }
            }))();
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    gotEPAccess(ep) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Deputy|gotEPAccess] (ep(s))...');
            let epRes = [];
            for (let i = 0; i < ep.length; i++) {
                try {
                    const { error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'resource/' + ep[i] + '/QUERY', { method: 'post', data: { max: 200 }, responseType: 'json' });
                    if (!error) {
                        epRes.push({ ep: ep[i], result: true });
                    }
                    else {
                        epRes.push({ ep: ep[i], result: false });
                    }
                }
                catch (err) {
                    epRes.push({ ep: ep[i], result: false });
                }
            }
            ;
            return Promise.resolve(epRes);
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    frDLResItems(recCount, recTotal, recEP, recMax, recValue) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Deputy|frDLResItems] (' + recCount + ',' + recTotal + ',' + recEP + ',' + recMax + ',' + recValue + ')');
            const getMultiResItems = (tMO) => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
                let myMultiArr = [];
                let totalBatches = Math.ceil(tMO.value / 500);
                let errCount = 0;
                let errArr = [];
                for (let batch = 0; batch < totalBatches; batch++) {
                    const batchBodyObj = { start: ((tMO.max - tMO.value) + (500 * batch)), max: 500, sort: { 'Id': 'desc' } };
                    try {
                        const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'resource/' + recEP + '/QUERY', { method: 'post', data: batchBodyObj, responseType: 'json' });
                        if (status === 200) {
                            const oldArr = myMultiArr;
                            const newArr = data;
                            myMultiArr = lodash__WEBPACK_IMPORTED_MODULE_8__.union(oldArr, newArr);
                            const calcThisPBar = (myMultiArr.length / recValue).toFixed(2);
                            this.eventServ.publish('frDLResItems', { stage: 'update', thisDataValue: myMultiArr.length, getThisPBar: Number(calcThisPBar) });
                            this.logger.info('[Deputy|frDLResItems] (' + recEP + ') - [BATCH] - ' + batch);
                        }
                        else {
                            errCount++;
                            errArr.push({ errCount: errCount, batchNo: batch, batchTotal: totalBatches, statusCode: error });
                            if (status === 401 || errCount > 1) {
                                break;
                            }
                            else {
                                continue;
                            }
                        }
                    }
                    catch (frDLResErr) {
                        if (frDLResErr.error.code.toString() === '403') {
                            return { error: false, result: [] };
                        }
                        ;
                    }
                }
                ;
                if (errCount > 0) {
                    return { error: true, result: errArr };
                }
                else {
                    return { error: false, result: myMultiArr };
                }
            });
            (() => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
                this.logger.info('[Deputy|frDLResItems] (' + recEP + ') - [START]...');
                const thisMultiObj = { ep: recEP, max: recMax, value: recValue };
                const finalMultiResObj = yield getMultiResItems(thisMultiObj);
                if (!finalMultiResObj.error) {
                    let allItemsArrForSave = [];
                    if (recEP === 'SystemUsageTracking') {
                        allItemsArrForSave = finalMultiResObj.result.reverse();
                    }
                    else {
                        allItemsArrForSave = finalMultiResObj.result;
                    }
                    ;
                    this.logger.info('[Deputy|frDLResItems] (' + recEP + ') - [FINISH] (Saved OK): ' + finalMultiResObj.result.length);
                    this.eventServ.publish('frDLResItems', { stage: 'end', recEPName: recEP, records: allItemsArrForSave.length, data: allItemsArrForSave });
                }
                else {
                    this.logger.info('[Deputy|frDLResItems] (' + recEP + ') - [FINISH] (Request Error): ' + finalMultiResObj.result[0].statusCode);
                    this.eventServ.publish('frDLResItems', { stage: 'error', recEPName: recEP, error: finalMultiResObj.result });
                }
            }))();
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getMyWebPhoto() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'my/photo', { method: 'get', responseType: 'json' });
                if (status === 200) {
                    return Promise.resolve({ result: true, data: data.DownloadLink.toString() });
                }
                else {
                    return Promise.resolve({ result: false, data: error });
                }
            }
            catch (err) {
                return Promise.resolve({ result: false, data: err });
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getRoster() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DeputyApiService|getRoster] ()...');
            return yield this.shttp.sendRequest(this.Client.apiUrl + 'supervise/roster/' + (0,date_fns__WEBPACK_IMPORTED_MODULE_11__.default)(new Date(), 'yyyy-MM-dd'), { method: 'get', responseType: 'json' });
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getRosterByDate(rosterDate) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DeputyApiService|getRosterByDate] ()...');
            const rosterDateStr = this.dT.format(rosterDate, 'yyyy-MM-dd');
            return yield this.shttp.sendRequest(this.Client.apiUrl + 'supervise/roster/' + rosterDateStr, { method: 'get', responseType: 'json' });
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getMissTSRoster(rosterDate) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DeputyApiService|getMissTSRoster] ()...');
            const rosterDateStr = this.dT.format(rosterDate, 'yyyy-MM-dd');
            try {
                const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'supervise/roster/' + rosterDateStr, { method: 'get', responseType: 'json' });
                if (status === 200) {
                    return Promise.resolve({ result: true, data: data });
                }
                else {
                    return Promise.resolve({ result: false, data: error });
                }
            }
            catch (gMTSRErr) {
                return Promise.resolve({ result: false, data: gMTSRErr });
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    findRosters(startDStr, endDStr) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DeputyApi|findRosters] ()...');
            const fnStartDRange = startDStr;
            const fnEndDRange = endDStr;
            const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
            const pDateStr = (dateStr) => { return (0,date_fns__WEBPACK_IMPORTED_MODULE_12__.default)(dateStr, 'yyyy-MM-dd', new Date()); };
            const startDRange = pDateStr(fnStartDRange);
            const endDRange = pDateStr(fnEndDRange);
            const rangeLen = (0,date_fns__WEBPACK_IMPORTED_MODULE_13__.default)(endDRange, startDRange);
            let startM = (0,date_fns__WEBPACK_IMPORTED_MODULE_14__.default)(startDRange);
            let startY = (0,date_fns__WEBPACK_IMPORTED_MODULE_15__.default)(startDRange);
            let foundRosDates = [];
            let foundRosData = [];
            const checkDate = (cDate) => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () { yield delay(100); const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'supervise/roster/' + cDate, { method: 'get', serializer: 'json', timeout: 20, responseType: 'json' }); if (status === 200) {
                if (data.length > 0) {
                    foundRosDates.push(cDate);
                    foundRosData.push(data);
                }
                else {
                    Promise.resolve(true);
                }
            }
            else {
                this.logger.info(error);
                return Promise.resolve(false);
            } });
            for (let startD = (0,date_fns__WEBPACK_IMPORTED_MODULE_16__.default)(startDRange); startD < rangeLen; startD++) {
                const newD = new Date(startY, startM, startD);
                const cDate = (0,date_fns__WEBPACK_IMPORTED_MODULE_17__.default)(newD, { representation: 'date' });
                yield checkDate(cDate);
                if ((0,date_fns__WEBPACK_IMPORTED_MODULE_18__.default)(newD)) {
                    startD = 1;
                    startM++;
                }
                if ((0,date_fns__WEBPACK_IMPORTED_MODULE_19__.default)(newD, (0,date_fns__WEBPACK_IMPORTED_MODULE_20__.default)(newD))) {
                    startD = 1;
                    startM = 0;
                    startY++;
                }
                if ((0,date_fns__WEBPACK_IMPORTED_MODULE_19__.default)(newD, endDRange)) {
                    break;
                }
            }
            this.storeServ.setObject('FindRosResults', { dates: foundRosDates, data: foundRosData });
            console.log('[DeputyApi|findRosters] (Finished) - Found: [' + foundRosDates.length + '] Rosters - ' + foundRosDates.join(','));
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    saveNativeImage(imgWebURL, fileName) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info(this.mod + '|saveNativeImage] ()...');
            const saveRes = yield this.fileServ.stat(this.fileServ.phoneFS, 'Sheriff/assets');
            const fileEntry = yield this.shttp.downloadFile(imgWebURL, null, this.Client.authhead, saveRes.data.uri + '/' + fileName);
            console.log(fileEntry);
            const convURI = (_capacitor_core__WEBPACK_IMPORTED_MODULE_1__.Capacitor.convertFileSrc(fileEntry.nativeURL));
            this.logger.info('[DAS|saveNativeImg] (DL/Save): Success: ' + convURI);
            return Promise.resolve(convURI);
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    diffMyWorkplace(currentWPArr) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[' + this.mod + '|diffMyWorkplace](currentWPArr)...');
            let oldWPArr = [];
            currentWPArr !== null ? oldWPArr = currentWPArr : oldWPArr = [];
            let newWPArr = [];
            try {
                const { status, data } = yield this.getMy('setup');
                if (status === 200) {
                    newWPArr = data['Workplace'];
                }
                else {
                    return Promise.resolve({ new: false });
                }
                ;
                if (oldWPArr.length < 1 || newWPArr.length < 1 || oldWPArr.length === newWPArr.length) {
                    return Promise.resolve({ new: false });
                }
                else {
                    return Promise.resolve({ new: true, newno: Math.abs(newWPArr.length - oldWPArr.length), data: data });
                }
            }
            catch (dMWPErr) {
                return Promise.resolve({ new: false });
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getResSyncCount(tableN) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DeputyApiService|getCount] (' + tableN + ')...');
            let resName;
            for (const [key, value] of Object.entries(_baseDB__WEBPACK_IMPORTED_MODULE_7__.Resources)) {
                if (tableN === value) {
                    resName = key.toString();
                }
            }
            ;
            const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'resource/' + resName + '/INFO', { method: 'get', responseType: 'json' });
            if (status === 200) {
                return Promise.resolve(data.count);
            }
            else {
                return Promise.reject(error);
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getTSheetSyncRange(range, start, end, staged) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[' + this.mod + '|getTSheetSyncRange]()...');
            if (!staged) {
                let TSSRBody;
                range ? TSSRBody = { 'search': { 's1': { 'field': 'Date', 'type': 'ge', 'data': this.dT.format(start, 'yyyy-MM-dd') }, 's2': { 'field': 'Date', 'type': 'le', 'data': this.dT.format(end, 'yyyy-MM-dd') }, 's3': { 'field': 'Modified', 'type': 'ge', 'data': this.dT.format(start, 'yyyy-MM-dd') }, 's4': { 'field': 'Modified', 'type': 'le', 'data': this.dT.format(end, 'yyyy-MM-dd') } }, 'sort': { 'Id': 'desc' } } : TSSRBody = { 'sort': { 'Id': 'desc' } };
                const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'resource/Timesheet/QUERY', { method: 'post', data: TSSRBody, responseType: 'json' });
                if (status === 200) {
                    console.log(status);
                    console.log(data);
                    console.log(error);
                    return Promise.resolve(data);
                }
                else {
                    return Promise.reject(error);
                }
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getAllTSheetsOrderById() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[' + this.mod + '|getAllTSheetsOrderById] ()...');
            try {
                const queryBody = { 'sort': { 'Id': 'desc' } };
                const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'resource/Timesheet/QUERY', { method: 'post', data: queryBody, responseType: 'json' });
                if (status === 200) {
                    return Promise.resolve({ result: true, data: data });
                }
                else {
                    return Promise.resolve({ result: false, data: error });
                }
            }
            catch (gATSOIdErr) {
                return Promise.resolve({ result: false, data: gATSOIdErr });
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getSingleTS(tsId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            let tsQBody = { 'search': { 's1': { 'field': 'Id', 'type': 'eq', 'data': tsId } } };
            const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'resource/Timesheet/QUERY', { method: 'post', data: tsQBody, responseType: 'json' });
            if (status === 200) {
                return Promise.resolve({ result: true, data: data });
            }
            else {
                return Promise.resolve({ result: false, data: error });
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getTodayShiftColleagues() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DeputyApi|getTodayShiftColleagues] ()...');
            const t = (0,date_fns__WEBPACK_IMPORTED_MODULE_11__.default)(new Date(), 'yyyy-MM-dd');
            const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'supervise/roster/' + t, { method: 'get', serializer: 'json', timeout: 20, responseType: 'json' });
            if (status === 200) {
                return Promise.resolve(data);
            }
            else {
                this.logger.info('[DeputyApi|getTodayShiftColleagues] (ERROR): ' + error);
                return Promise.reject(error);
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getThisShiftColleagues(d) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DeputyApi|getThisShiftColleagues] ()...');
            const t = (0,date_fns__WEBPACK_IMPORTED_MODULE_11__.default)(d, 'yyyy-MM-dd');
            const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'supervise/roster/' + t, { method: 'get', serializer: 'json', timeout: 20, responseType: 'json' });
            if (status === 200) {
                return Promise.resolve(data);
            }
            else {
                this.logger.info('[DeputyApi|getTodayShiftColleagues] (ERROR): ' + error);
                return Promise.reject(error);
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    ///// TASKS
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    updateTask(taskId, userEntry, assignTo, taskTitle, taskDueDate, taskDueTS, taskNotes) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DeputyApi|updateTask] ()...');
            const updateTaskObj = { 'intUserResponsible': assignTo, 'strQuestion': taskTitle, 'strComment': taskNotes, 'strDueDate': taskDueDate, 'intDueTimestamp': taskDueTS };
            const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'supervise/task/' + taskId, { method: 'put', data: updateTaskObj, serializer: 'json', timeout: 20, responseType: 'json' });
            if (status === 200) {
                return Promise.resolve(data);
            }
            else {
                this.logger.info('[DeputyApi|updateTask] (ERROR): ' + error);
                return Promise.reject(error);
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    createTask(myAss, userE, assignTo, taskTitle, taskSortOrder, taskDueDate, taskNotes) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DeputyApi|createTask] ()...');
            try {
                let createTaskObj = {
                    intTaskSetupId: 0, intOpUnitId: 0, intGroupId: 0,
                    strDate: null,
                    intDayTimestamp: null,
                    strDueDate: null,
                    intDueTimestamp: null,
                    intSortOrder: taskSortOrder,
                    strQuestion: taskTitle,
                    strComment: null,
                    intUserEntry: userE,
                    intUserResponsible: assignTo
                };
                const nowDateObj = new Date();
                createTaskObj.strDate = this.dT.Id(nowDateObj);
                createTaskObj.intDayTimestamp = this.dT.getUT(nowDateObj);
                if (taskDueDate === null) {
                    createTaskObj.strDueDate = '';
                    createTaskObj.intDueTimestamp = -1;
                }
                else {
                    createTaskObj.strDueDate = this.dT.Id(taskDueDate);
                    createTaskObj.intDueTimestamp = this.dT.getUT(taskDueDate);
                }
                ;
                taskNotes === null ? createTaskObj.strComment = '' : createTaskObj.strComment = taskNotes;
                this.logger.info(createTaskObj);
                const cTRes = yield this.shttp.sendRequest(this.Client.apiUrl + 'supervise/task', { method: 'put', data: createTaskObj, serializer: 'json', timeout: 20, responseType: 'json' });
                console.log(cTRes);
                const status = cTRes.status;
                const error = cTRes.error;
                const data = cTRes.data;
                if (status === 200) {
                    this.logger.info('[DeputyApi|createTask] (SUCCESS): ' + status + ' - Added Task Successfully');
                    return Promise.resolve({ result: true, data: data });
                }
                else {
                    this.logger.info('[DeputyApi|createTask] (ERROR): ' + error);
                    return Promise.resolve({ result: false, data: error });
                }
            }
            catch (cTErr) {
                this.logger.info(cTErr);
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    deleteTask(taskId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DeputyApi|deleteTask] (' + taskId + ')...');
            const delTOpts = { method: 'delete', serializer: 'json', timeout: 20, responseType: 'json' };
            try {
                const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'supervise/task/' + taskId, delTOpts);
                if (status === 200) {
                    return Promise.resolve({ result: true, data: data });
                }
                else {
                    return Promise.resolve({ result: false, data: error });
                }
            }
            catch (dTErr) {
                return Promise.resolve({ result: false, data: dTErr });
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    reorderTask(myEmpId, taskObj) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DeputyApi|reorderTask] (myTasksToDoObj)...');
            let roData = { 'intUserResponsible': myEmpId, 'strQuestion': taskObj.Question, 'intSortOrder': taskObj.SortOrder, 'strDate': taskObj.Date, 'intUserEntry': taskObj.UserEntry, 'intTsCompleted': -1 };
            if (taskObj.DueDate !== '' && taskObj.DueDate !== null && taskObj.DueDate !== undefined && taskObj.DueDate !== -1) {
                roData['strDueDate'] = taskObj.DueDate;
            }
            else {
                roData['strDueDate'] = '';
            }
            ;
            if (taskObj.Comment !== '' && taskObj.Comment !== null && taskObj.Comment !== undefined && taskObj.Comment !== -1) {
                roData['strComment'] = taskObj.Comment;
            }
            else {
                roData['strComment'] = '';
            }
            ;
            if (taskObj.DueTimestamp !== '' && taskObj.DueTimestamp !== null && taskObj.DueTimestamp !== undefined && taskObj.DueTimestamp !== -1) {
                roData['intDueTimestamp'] = taskObj.DueTimestamp;
            }
            else {
                roData['intDueTimestamp'] = -1;
            }
            ;
            const roTOpts = { method: 'put', data: roData, serializer: 'json', timeout: 20, responseType: 'json' };
            try {
                const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'supervise/task/' + taskObj.Id, roTOpts);
                if (status === 200) {
                    return Promise.resolve({ result: true, data: taskObj });
                }
                else {
                    return Promise.resolve({ result: false, data: error });
                }
            }
            catch (uoErr) {
                console.log(uoErr);
                return Promise.resolve({ result: false, data: uoErr });
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    doTask(taskId, assignedTo) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DeputyApi|doTask] (' + taskId + ')...');
            const myId = (yield this.storeServ.getObject(this.uUK + 'MeData')).EmployeeId;
            let mOrS;
            assignedTo === myId ? mOrS = 'my' : mOrS = 'supervise';
            const dTOpts = { method: 'post', data: { 'intUserPerformTaskId': myId }, serializer: 'json', timeout: 20, responseType: 'json' };
            try {
                const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + mOrS + '/task/' + taskId + '/do', dTOpts);
                if (status === 200) {
                    return Promise.resolve({ result: true, data: data });
                }
                else {
                    return Promise.resolve({ result: false, data: error });
                }
            }
            catch (dTErr) {
                return Promise.resolve({ result: false, data: dTErr });
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    undoTask(taskId, assignedTo) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DeputyApi|undoTask] (' + taskId + ')...');
            const myId = (yield this.storeServ.getObject(this.uUK + 'MeData')).EmployeeId;
            let mOrS;
            assignedTo === myId ? mOrS = 'my' : mOrS = 'supervise';
            const udTOpts = { method: 'post', data: { 'intUserPerformTaskId': myId }, serializer: 'json', timeout: 20, responseType: 'json' };
            try {
                const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + mOrS + '/task/' + taskId + '/undo', udTOpts);
                if (status === 200) {
                    return Promise.resolve({ result: true, data: data });
                }
                else {
                    return Promise.resolve({ result: false, data: error });
                }
            }
            catch (udTErr) {
                console.log(udTErr);
                return Promise.resolve({ result: false, data: udTErr });
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    ///// NEWS/MEMOS
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    postMemo(showFrom, active, showTill, title, content, fileId, url, reqConfirm) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            let pMObj = { ShowFrom: '', Active: true, ShowTill: '', Title: '', Content: content, Type: 1, File: -1, Url: '', ConfirmText: '' };
            showFrom !== null ? pMObj.ShowFrom = showFrom : pMObj.ShowFrom = new Date();
            active !== null ? pMObj.Active = active : pMObj.Active = true;
            showTill !== null ? pMObj.ShowTill = showTill : pMObj.ShowTill = '';
            title !== null ? pMObj.Title = title : pMObj.Title = '';
            fileId !== null ? pMObj.File = fileId : pMObj.File = -1;
            url !== null ? pMObj.Url = url : pMObj.Url = '';
            reqConfirm ? pMObj.ConfirmText = 'dpRequireConfirmation' : pMObj.ConfirmText = '';
            const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'supervise/memo', { method: 'put', data: pMObj, serializer: 'json', timeout: 20, responseType: 'json' });
            if (status === 200) {
                return Promise.resolve(data);
            }
            else {
                this.logger.info('[DeputyApi|postMemo] (ERROR): ' + error);
                return Promise.reject(error);
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    postComment(memoId, feed, ignorePerms, comment) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            let pCObj = { Orm: 'DeputecMemo', RecId: memoId, InFeed: feed, IgnorePermission: ignorePerms, Comment: comment };
            const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'supervise/comment', { method: 'put', data: pCObj, serializer: 'json', timeout: 20, responseType: 'json' });
            if (status === 200) {
                return Promise.resolve(data);
            }
            else {
                this.logger.info('[DeputyApi|postComment] (ERROR): ' + error);
                return Promise.reject(error);
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getDBBUTS() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[DeputyApi|getDBBUTS] ()...');
            const { status, data } = yield this.shttp.sendRequest('https://zer0ne.dev/sheriff/up/' + this.uUK + 'dbSQLite.txt', { method: 'get', timeout: 20, responseType: 'text' });
            const msTS = Number(data);
            const ts = Math.floor(msTS / 1000);
            const tsD = this.dT.Dut(ts);
            if (status === 200) {
                return Promise.resolve(tsD);
            }
            else {
                return Promise.resolve('error');
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    ///// PROFILE
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    upProfilePhoto(ulPhotoObj) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Deputy|upProfilePhoto] ()...');
            return Promise.resolve({ result: true });
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getCAProfileObs() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const { status, data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'my/contactaddress/all', { method: 'get', serializer: 'json', timeout: 20, responseType: 'json' });
                if (status === 200) {
                    const gPObsRes = data;
                    let foundObIds = {};
                    if (gPObsRes.hasOwnProperty('MainAddressObject')) {
                        foundObIds['address'] = { id: gPObsRes.MainAddressObject.Id };
                    }
                    else {
                        foundObIds['address'] = { id: 0 };
                    }
                    if (gPObsRes.hasOwnProperty('ContactObject')) {
                        foundObIds['contact'] = { id: gPObsRes.ContactObject.Id };
                    }
                    else {
                        foundObIds['contact'] = { id: 0 };
                    }
                    ;
                    if (gPObsRes.hasOwnProperty('EmergencyContactAddressObject')) {
                        foundObIds['emergency'] = { id: gPObsRes.EmergencyContactAddressObject.Id };
                    }
                    else {
                        foundObIds['emergency'] = { id: 0 };
                    }
                    ;
                    for (const [key] of Object.entries(foundObIds)) {
                        const oKey = key.toString();
                        const oId = Number(foundObIds[oKey]['id']);
                        if (oId > 0) {
                            let resEP;
                            if (oKey === 'address' || oKey === 'emergency') {
                                resEP = 'Address';
                            }
                            else {
                                resEP = 'Contact';
                            }
                            ;
                            try {
                                const CARec = yield this.shttp.sendRequest(this.Client.apiUrl + 'resource/' + resEP + '/' + oId.toString(), { method: 'get', serializer: 'json', timeout: 20, responseType: 'json' });
                                if (CARec.status === 200) {
                                    foundObIds[oKey]['data'] = CARec.data;
                                }
                                else {
                                    foundObIds[oKey]['data'] = null;
                                }
                            }
                            catch (gCARecErr) {
                                foundObIds[oKey]['data'] = null;
                            }
                        }
                        else {
                            foundObIds[oKey]['data'] = null;
                        }
                    }
                    ;
                    return Promise.resolve({ result: true, data: foundObIds });
                }
                else {
                    return Promise.resolve({ result: false, data: error });
                }
            }
            catch (gPOIdsErr) {
                return Promise.resolve({ result: false, data: gPOIdsErr });
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    updateCAProfileObs(newObs) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Deputy|updateCAProfileObs] ()...');
            const getChckPtyName = (obKeyName) => { if (obKeyName === 'address') {
                return 'MainAddressObject';
            }
            else if (obKeyName === 'contact') {
                return 'ContactObject';
            }
            else {
                return 'EmergencyContactAddressObject';
            } };
            let updatedObs = {};
            for (const [key, value] of Object.entries(newObs)) {
                const newKey = key.toString();
                const newId = value['Id'].toString();
                const newData = value;
                let resEP;
                if (newKey === 'address' || newKey === 'emergency') {
                    resEP = 'Address';
                }
                else {
                    resEP = 'Contact';
                }
                ;
                try {
                    const upCARec = yield this.shttp.sendRequest(this.Client.apiUrl + 'resource/' + resEP + '/' + newId, { method: 'put', data: newData, serializer: 'json', timeout: 20, responseType: 'json' });
                    if (upCARec.status === 200) {
                        const newCARecDataStr = JSON.stringify(upCARec.data);
                        try {
                            const chckMyCA = yield this.shttp.sendRequest(this.Client.apiUrl + 'my/contactaddress/all', { method: 'get', serializer: 'json', timeout: 20, responseType: 'json' });
                            if (chckMyCA.status === 200) {
                                const chckPtyName = getChckPtyName(newKey);
                                const newMyCAData = chckMyCA.data[chckPtyName];
                                const newMyCADataStr = JSON.stringify(newMyCAData);
                                if (newMyCADataStr === newCARecDataStr) {
                                    updatedObs[newKey] = { result: true, data: upCARec.data };
                                    return Promise.resolve(updatedObs);
                                }
                                else {
                                    updatedObs[newKey] = { result: false, data: 'my/contactaddress Object !== resource/Contact Object.' };
                                    return Promise.resolve(updatedObs);
                                }
                            }
                            else {
                                updatedObs[newKey] = { result: false, data: chckMyCA.error };
                                return Promise.resolve(updatedObs);
                            }
                        }
                        catch (chckMyCAErr) {
                            updatedObs[newKey] = { result: false, data: chckMyCAErr };
                            return Promise.resolve(updatedObs);
                        }
                    }
                    else {
                        updatedObs[newKey] = { result: false, data: upCARec.error };
                        return Promise.resolve(updatedObs);
                    }
                }
                catch (upCARecErr) {
                    console.log(upCARecErr);
                    console.log(JSON.stringify(upCARecErr));
                    updatedObs[newKey] = { result: false, data: upCARecErr };
                    return Promise.resolve(updatedObs);
                }
            }
            ;
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    ///// PAYMENT
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getPayPeriod() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Deputy|getPayPeriod] ()...');
            try {
                const { data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'resource/PayPeriod', { method: 'get', serializer: 'json', timeout: 20, responseType: 'json' });
                if (!error) {
                    return Promise.resolve({ result: true, data: data[0] });
                }
                else {
                    return Promise.resolve({ result: false, data: error });
                }
            }
            catch (gPPErr) {
                return Promise.resolve({ result: false, data: gPPErr });
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getEmpPayCycle() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[Deputy|getPayPeriod] ()...');
            const getObj = { "search": { "s1": { "field": "EmployeeId", "type": "eq", "data": "421" } }, "sort": { "Id": "desc" } };
            try {
                const { data, error } = yield this.shttp.sendRequest(this.Client.apiUrl + 'resource/EmployeePaycycle/QUERY', { method: 'post', data: getObj, serializer: 'json', timeout: 20, responseType: 'json' });
                if (!error) {
                    return Promise.resolve({ result: true, data: data });
                }
                else {
                    return Promise.resolve({ result: false, data: error });
                }
            }
            catch (gEPPCErr) {
                return Promise.resolve({ result: false, data: gEPPCErr });
            }
        });
    }
};
DeputyService.ctorParameters = () => [
    { type: _filesystem_service__WEBPACK_IMPORTED_MODULE_2__.FileSystemService },
    { type: _storage_service__WEBPACK_IMPORTED_MODULE_3__.StorageService },
    { type: _events_service__WEBPACK_IMPORTED_MODULE_4__.EventsService },
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_21__.NGXLogger },
    { type: _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_5__.HTTP },
    { type: _datetime_service__WEBPACK_IMPORTED_MODULE_0__.DateTimeService },
    { type: _ionic_native_file_transfer_ngx__WEBPACK_IMPORTED_MODULE_6__.FileTransfer },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_22__.Platform }
];
DeputyService = (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_23__.Injectable)({ providedIn: 'root' })
    ////////////////////////////////////////////////////////////////////////////////////////////////////
], DeputyService);



/***/ }),

/***/ 52153:
/*!********************************************!*\
  !*** ./src/app/services/detail.service.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DetailService": function() { return /* binding */ DetailService; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _deputy_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deputy.service */ 22092);
/* harmony import */ var _storage_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./storage.service */ 71188);
/* harmony import */ var _datetime_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./datetime.service */ 12826);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _events_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./events.service */ 80106);
/* harmony import */ var _capacitor_network__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @capacitor/network */ 63848);








const myls = localStorage;
///////////////////////////////////////////////////////////////////////////
let DetailService = class DetailService {
    ///////////////////////////////////////////////////////////////////////////
    constructor(logger, storeServ, deputy, evServ, dT) {
        this.logger = logger;
        this.storeServ = storeServ;
        this.deputy = deputy;
        this.evServ = evServ;
        this.dT = dT;
        ///////////////////////////////////////////////////////////////////////////
        //// DATABASES //////////////////////
        this.pS = '🔌';
        this.mySQLReady = false;
        // User DB ------------------------
        this.isUserConnOpen = false;
        this.uDBIsOpen = false;
        this.uDBSetupDone = null;
        this.uDBTables = [];
        this.uDBWasImported = null;
        // Auth DB ------------------------
        this.isAuthConnOpen = false;
        this.aDBIsOpen = false;
        this.aDBSetupDone = null;
        this.aDBTables = [];
        //// NAV/PAGES //////////////////////
        this.FRSetupDone = null;
        this.authLogout = false;
        this.shouldSave = { value: false, data: null };
        this.doneSessionProfile = false;
        this.doneInitProfile = false;
        //// APP GVARS ////////////////////
        this.hasNetConn = null;
        // ME Vars ------------------------
        this.meObj = null;
        this.meEmpId = null;
        this.workName = null;
        this.workCode = null;
        this.meName = null;
        this.meFName = null;
        this.meLName = null;
        this.meEmail = null;
        this.mePhone = null;
        this.inProgressTS = null;
        this.memosToConf = [];
        this.meDefaultOpUnit = null;
        this.mePermissions = [];
        // MY Vars ------------------------
        this.myObj = null;
        this.wpId = null;
        this.workAreas = null;
        this.workColor = null;
        this.incBright = null;
        this.pplArr = [];
        // AVAS ---------------------------
        this.meAva = null;
        this.workAva = null;
        //// APP SETTINGS ///////////////////
        this.appSettings = null;
    }
    ///////////////////////////////////////////////////////////////////////////
    ///// DATABASES
    ///////////////////////////////////////////////////////////////////////////
    setMySQLReady(tf) { this.mySQLReady = tf; this.logger.info(this.pS + ' [Detail|mySQLReady] (SET) to: ' + tf); }
    getMySQLReady() { return this.mySQLReady; }
    ;
    //-----------------------------------------------------------------------
    // User Database
    //-----------------------------------------------------------------------
    setUDBWasImported(tf) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            this.uDBWasImported = tf;
            this.storeServ.setItem(this.deputy.uUK + 'UDBWasImported', String(tf));
            this.logger.info(this.pS + ' [Detail|uDBWasImported] (SET) to: ' + tf);
            return Promise.resolve(true);
        });
    }
    ;
    getUDBWasImported() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            if (this.uDBWasImported !== null) {
                return Promise.resolve(this.uDBWasImported);
            }
            else {
                const storeRes = yield this.storeServ.getItem(this.deputy.uUK + 'UDBWasImported');
                if (storeRes) {
                    const storeVal = Boolean(JSON.parse(storeRes));
                    this.uDBWasImported = storeVal;
                    return Promise.resolve(storeVal);
                }
                else {
                    return Promise.resolve(false);
                }
            }
        });
    }
    ;
    //-----------------------------------------------------------------------
    setUDBSetupDone(tf) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            this.uDBSetupDone = tf;
            this.storeServ.setItem(this.deputy.uUK + 'UDBSetupDone', String(tf));
            this.logger.info(this.pS + ' [Detail|uDBSetupDone] (SET) to: ' + tf);
            return Promise.resolve(true);
        });
    }
    ;
    getUDBSetupDone() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            if (this.uDBSetupDone !== null) {
                return Promise.resolve(this.uDBSetupDone);
            }
            else {
                const storeStr = yield this.storeServ.getItem(this.deputy.uUK + 'UDBSetupDone');
                if (storeStr !== null && storeStr !== undefined && typeof storeStr === 'string') {
                    const storeVal = Boolean(JSON.parse(storeStr));
                    this.uDBSetupDone = storeVal;
                    return Promise.resolve(this.uDBSetupDone);
                }
                else {
                    return Promise.resolve(false);
                }
            }
        });
    }
    //-----------------------------------------------------------------------
    setUDBTables(udbTables) { this.uDBTables = udbTables; this.logger.info(this.pS + ' [DBDetail|userDBTables] (SET)'); }
    getUDBTables() { return this.uDBTables; }
    //-----------------------------------------------------------------------
    setIsUserConnOpen(tf) {
        this.isUserConnOpen = tf;
        this.logger.info(this.pS + ' [Detail|IsUserConnOpen] (SET) to: ' + tf);
        if (tf === false) {
            myls.setItem('lrConnClosed', 'true');
            this.logger.info('[+ADD] lrConnClosed (lS)');
            return Promise.resolve(true);
        }
        else {
            myls.removeItem('lrConnClosed');
            this.logger.info('[-] lrConnClosed (lS)');
        }
    }
    getIsUserConnOpen() { return this.isUserConnOpen; }
    ;
    //-----------------------------------------------------------------------
    setUDBIsOpen(tf) {
        this.uDBIsOpen = tf;
        this.logger.info(this.pS + ' [Detail|uDBIsOpen] (SET) to: ' + tf);
        if (tf === false) {
            myls.setItem('lrUDBClosed', 'true');
            this.logger.info('[+ADD] lrUDBClosed (lS)');
            return Promise.resolve(true);
        }
        else {
            myls.removeItem('lrUDBClosed');
            this.logger.info('[-REM] lrUDBClosed (lS)');
            return Promise.resolve(true);
        }
    }
    getUDBIsOpen() { return this.uDBIsOpen; }
    ;
    //-----------------------------------------------------------------------
    // Auth Database
    //-----------------------------------------------------------------------
    setADBSetupDone(tf) {
        this.aDBSetupDone = tf;
        this.storeServ.setItem(this.deputy.uUK + 'ADBSetupDone', String(tf));
        this.logger.info(this.pS + ' [Detail|aDBSetupDone] (SET) to: ' + tf);
        return Promise.resolve(true);
    }
    getADBSetupDone() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            if (this.aDBSetupDone !== null && typeof this.aDBSetupDone === 'boolean') {
                return Promise.resolve(this.aDBSetupDone);
            }
            else {
                const storeStr = yield this.storeServ.getItem(this.deputy.uUK + 'ADBSetupDone');
                if (storeStr !== null && storeStr !== undefined && typeof storeStr === 'string') {
                    const storeVal = Boolean(JSON.parse(storeStr));
                    this.aDBSetupDone = storeVal;
                    return Promise.resolve(this.aDBSetupDone);
                }
                else {
                    return Promise.resolve(false);
                }
            }
        });
    }
    //-----------------------------------------------------------------------
    setADBTables(adbTables) { this.aDBTables = adbTables; this.logger.info(this.pS + ' [DBDetail|authDBTables] (SET)'); }
    getADBTables() { return this.aDBTables; }
    //-----------------------------------------------------------------------
    setIsAuthConnOpen(tf) {
        this.isAuthConnOpen = tf;
        this.logger.info(this.pS + ' [Detail|IsAuthConnOpen] (SET) to: ' + tf);
        if (tf === false) {
            myls.setItem('lrAuthConnClosed', 'true');
            this.logger.info('[+ADD] lrAuthConnClosed (lS)');
            return Promise.resolve(true);
        }
        else {
            myls.removeItem('lrAuthConnClosed');
            this.logger.info('[-] lrConnAuthClosed (lS)');
            return Promise.resolve(true);
        }
    }
    getIsAuthConnOpen() { return this.isAuthConnOpen; }
    ;
    //-----------------------------------------------------------------------
    setADBIsOpen(tf) {
        this.aDBIsOpen = tf;
        this.logger.info(this.pS + ' [Detail|aDBIsOpen] (SET) to: ' + tf);
        if (tf === false) {
            myls.setItem('lrADBClosed', 'true');
            this.logger.info('[+ADD] lrADBClosed (lS)');
            return Promise.resolve(true);
        }
        else {
            myls.removeItem('lrADBClosed');
            this.logger.info('[-REM] lrADBClosed (lS)');
            return Promise.resolve(true);
        }
    }
    getADBIsOpen() { return this.aDBIsOpen; }
    ;
    //-----------------------------------------------------------------------
    // FIRE CUSTOM TOKEN
    //-----------------------------------------------------------------------
    ///////////////////////////////////////////////////////////////////////////
    ///// ME/MY/PPL/WORK
    ///////////////////////////////////////////////////////////////////////////
    setMe(meO) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            const setMeVars = (mO) => {
                this.meObj = mO;
                this.meEmpId = this.meObj.EmployeeId;
                this.workName = this.meObj.CompanyObject.CompanyName;
                this.workCode = this.meObj.CompanyObject.Code;
                this.meName = this.meObj.Name;
                this.meFName = this.meObj.FirstName;
                this.meLName = this.meObj.LastName;
                this.meEmail = this.meObj.PrimaryEmail;
                this.deputy.userEmail = this.meEmail;
                this.mePhone = this.meObj.PrimaryPhone;
                this.meObj.InProgressTS === null || !this.meObj.InProgressTS || this.meObj.InProgressTS < 1 ? this.inProgressTS = false : this.inProgressTS = true;
                this.memosToConf = this.meObj.MemosToConfirm;
                this.meObj.OPS.length > 0 ? this.meDefaultOpUnit = this.meObj.OPS[0] : this.meDefaultOpUnit = null;
                this.mePermissions = this.meObj.Permissions;
                this.storeServ.setObject(this.deputy.uUK + 'MeData', this.meObj);
                return Promise.resolve(true);
            };
            if (meO !== null) {
                yield setMeVars(meO);
                return Promise.resolve(true);
            }
            else {
                const gotMeO = yield this.getMe();
                if (gotMeO !== null) {
                    yield setMeVars(gotMeO);
                    return Promise.resolve(true);
                }
                else {
                    return Promise.resolve(false);
                }
            }
            ;
        });
    }
    ;
    getMe() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            if (this.meObj !== null) {
                return Promise.resolve(this.meObj);
            }
            else {
                const apiMeRes = yield this.deputy.getDetailMe();
                if (apiMeRes.result) {
                    yield this.setMe(apiMeRes.data);
                    return Promise.resolve(apiMeRes.data);
                }
                else {
                    const storeMeObj = yield this.storeServ.getObject(this.deputy.uUK + 'MeData');
                    if (storeMeObj !== null) {
                        yield this.setMe(storeMeObj);
                        return Promise.resolve(storeMeObj);
                    }
                    else {
                        return Promise.resolve(false);
                    }
                }
            }
        });
    }
    ;
    //-----------------------------------------------------------------------
    setMy(myO) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            const setMyVars = (mO) => {
                const checkWC = (color) => { return this.evServ.isConOK('#121212', color); };
                this.myObj = mO;
                this.workAreas = this.myObj.Department;
                if (this.myObj.ColorThemeCode.length > 0 && this.myObj.ColorThemeCode.includes('#')) {
                    this.workColor = this.myObj.ColorThemeCode;
                    checkWC(this.workColor) ? this.incBright = false : this.incBright = true;
                }
                else {
                    this.workColor = '#848484';
                }
                ;
                this.storeServ.setObject(this.deputy.uUK + 'MySetupData', this.myObj);
                return Promise.resolve(true);
            };
            if (myO !== null) {
                yield setMyVars(myO);
                return Promise.resolve(true);
            }
            else {
                const gotMyO = yield this.getMy();
                if (gotMyO !== null) {
                    yield setMyVars(gotMyO);
                    return Promise.resolve(true);
                }
                else {
                    return Promise.resolve(false);
                }
            }
            ;
        });
    }
    ;
    getMy() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            if (this.myObj !== null) {
                return Promise.resolve(this.myObj);
            }
            else {
                const apiMyRes = yield this.deputy.getDetailMy();
                if (apiMyRes.result) {
                    yield this.setMy(apiMyRes.data);
                    return Promise.resolve(apiMyRes.data);
                }
                else {
                    const storeMyObj = yield this.storeServ.getObject(this.deputy.uUK + 'MySetupData');
                    if (storeMyObj) {
                        yield this.setMy(storeMyObj);
                        return Promise.resolve(storeMyObj);
                    }
                    else {
                        return Promise.resolve(null);
                    }
                }
            }
        });
    }
    ;
    //-----------------------------------------------------------------------
    setPpl(pplArr) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            const setPplVars = (pA) => { this.pplArr = pA; this.storeServ.setObject(this.deputy.uUK + 'MyColleagues', this.pplArr); return Promise.resolve(true); };
            if (pplArr !== null) {
                yield setPplVars(pplArr);
                return Promise.resolve(true);
            }
            else {
                const gotPplO = yield this.getPpl();
                if (gotPplO !== null) {
                    yield setPplVars(gotPplO);
                    return Promise.resolve(true);
                }
                else {
                    return Promise.resolve(false);
                }
            }
        });
    }
    ;
    getPpl() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            if (this.pplArr.length > 0) {
                return Promise.resolve(this.pplArr);
            }
            else {
                const apiPplRes = yield this.deputy.getDetailPpl();
                if (apiPplRes.result) {
                    yield this.setPpl(apiPplRes.data);
                    return Promise.resolve(apiPplRes.data);
                }
                else {
                    const storePpl = yield this.storeServ.getObject(this.deputy.uUK + 'MyColleagues');
                    if (storePpl !== null) {
                        yield this.setPpl(storePpl);
                        return Promise.resolve(storePpl);
                    }
                    else {
                        return Promise.resolve(null);
                    }
                }
            }
        });
    }
    //------------------------------------------------------------------------
    setAvas(avasO) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            const setAvasVars = (aO) => {
                this.meAva = aO.me;
                this.workAva = aO.work;
                this.storeServ.setItem(this.deputy.uUK + 'meAvatar', this.meAva);
                this.storeServ.setItem(this.deputy.uUK + 'workAvatar', this.workAva);
                return Promise.resolve(true);
            };
            if (avasO !== null) {
                yield setAvasVars(avasO);
                this.evServ.publish('avasDone', true);
            }
            else {
                const gotAvasO = yield this.getAvas();
                if (gotAvasO !== null) {
                    yield setAvasVars(gotAvasO);
                    this.evServ.publish('avasDone', true);
                }
                else {
                    this.evServ.publish('avasDone', false);
                }
            }
        });
    }
    ;
    getAvas() {
        if (this.meAva !== null && this.workAva !== null) {
            return Promise.resolve({ me: this.meAva, work: this.workAva });
        }
        else {
            const dsAvaSub = this.evServ.subscribe('dlConvAvasFinished', (avaRes) => (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
                if (avaRes.result) {
                    yield this.setAvas(avaRes.data);
                    dsAvaSub.unsubscribe();
                    return Promise.resolve(avaRes.data);
                }
                else {
                    let storeAvas = { me: './../../assets/img/sheriff-tsheet-detail-unknown-sv-ico.png', work: './../../assets/img/icon.png' };
                    const storeMeAva = yield this.storeServ.getItem(this.deputy.uUK + 'meAvatar');
                    if (storeMeAva) {
                        storeAvas.me = storeMeAva;
                    }
                    ;
                    const storeWorkAva = yield this.storeServ.getItem(this.deputy.uUK + 'workAvatar');
                    if (storeWorkAva) {
                        storeAvas.work = storeWorkAva;
                    }
                    ;
                    yield this.setAvas(storeAvas);
                    dsAvaSub.unsubscribe();
                    return Promise.resolve(storeAvas);
                }
            }));
            this.deputy.dlConvertMeWorkAvas();
        }
    }
    //------------------------------------------------------------------------
    setProfileLastSync() { const nowUTS = this.dT.gUT(); const utsStr = nowUTS.toString(); this.storeServ.setItem(this.deputy.uUK + 'ProfileSync', utsStr); }
    getProfileLastSync() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () { const plsRes = yield this.storeServ.getItem(this.deputy.uUK + 'ProfileSync'); if (plsRes !== null) {
            return Promise.resolve(Number(plsRes));
        }
        else {
            return Promise.resolve(0);
        } });
    }
    ///////////////////////////////////////////////////////////////////////////
    ///// SETTINGS
    ///////////////////////////////////////////////////////////////////////////
    setSettings(settingsObj) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            this.appSettings = settingsObj;
            this.storeServ.setObject(this.deputy.uUK + 'AppSettings', settingsObj);
            return Promise.resolve(true);
        });
    }
    ;
    getSettings() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            if (this.appSettings !== null) {
                return Promise.resolve(this.appSettings);
            }
            else {
                const storeSettRes = yield this.storeServ.getObject(this.deputy.uUK + 'AppSettings');
                if (storeSettRes) {
                    this.appSettings = storeSettRes;
                    return Promise.resolve(this.appSettings);
                }
                else {
                    return Promise.resolve(null);
                }
            }
        });
    }
    ///////////////////////////////////////////////////////////////////////////
    ///// NAV/PAGES/CONNECTION
    ///////////////////////////////////////////////////////////////////////////
    setHasNetConn(tf) { this.hasNetConn = tf; let tfI; tf ? tfI = '🟢' : tfI = '🔴'; this.logger.info('[Detail|setHasNetConn] (SET) to: 🔌' + tfI + ' - ' + tf); }
    ;
    getHasNetConn() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            if (this.hasNetConn === null) {
                const tf = (yield _capacitor_network__WEBPACK_IMPORTED_MODULE_4__.Network.getStatus()).connected;
                this.hasNetConn = tf;
                _capacitor_network__WEBPACK_IMPORTED_MODULE_4__.Network.removeAllListeners();
                _capacitor_network__WEBPACK_IMPORTED_MODULE_4__.Network.addListener('networkStatusChange', newStatus => { this.hasNetConn = newStatus.connected; this.evServ.publish('globalHasNetConn', this.hasNetConn); });
                return Promise.resolve(this.hasNetConn);
            }
            else {
                return Promise.resolve(this.hasNetConn);
            }
        });
    }
    ;
    //-----------------------------------------------------------------------
    setAuthLogout(tf) { this.authLogout = tf; this.logger.info('[Detail|authLogout] (SET) to: ' + tf); }
    getAuthLogout() { return this.authLogout; }
    //-----------------------------------------------------------------------
    setFRSetupDone(tf) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            this.FRSetupDone = tf;
            this.storeServ.setItem(this.deputy.uUK + 'FRSetupDone', String(tf));
            this.logger.info('[Detail|uFRSetupDone] (SET) to: ' + tf);
            return Promise.resolve(true);
        });
    }
    ;
    getFRSetupDone() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            if (this.FRSetupDone !== null) {
                return Promise.resolve(this.FRSetupDone);
            }
            else {
                const storeStr = yield this.storeServ.getItem(this.deputy.uUK + 'FRSetupDone');
                if (storeStr) {
                    const storeVal = Boolean(JSON.parse(storeStr));
                    this.FRSetupDone = storeVal;
                    return Promise.resolve(this.FRSetupDone);
                }
                else {
                    return Promise.resolve(false);
                }
            }
        });
    }
    //-----------------------------------------------------------------------
    setWpId(wpId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            this.wpId = wpId;
            this.storeServ.setItem(this.deputy.uUK + 'WPId', String(wpId));
            this.logger.info('[Detail|wpId] (SET) to: ' + wpId);
            return Promise.resolve(true);
        });
    }
    ;
    getWpId() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            if (this.wpId !== null) {
                return Promise.resolve(this.wpId);
            }
            else {
                const storeStr = yield this.storeServ.getItem(this.deputy.uUK + 'WPId');
                if (storeStr) {
                    const storeVal = Number(storeStr);
                    this.wpId = storeVal;
                    return Promise.resolve(this.wpId);
                }
                else {
                    return Promise.resolve(1);
                }
            }
        });
    }
    //-----------------------------------------------------------------------
    setShouldSave(tf, d) { this.shouldSave = { value: tf, data: d }; this.logger.info('[Detail|setShouldSave] (SET) to: ' + tf + ' with data property: ' + d); }
    getShouldSave() { return this.shouldSave; }
};
DetailService.ctorParameters = () => [
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_6__.NGXLogger },
    { type: _storage_service__WEBPACK_IMPORTED_MODULE_1__.StorageService },
    { type: _deputy_service__WEBPACK_IMPORTED_MODULE_0__.DeputyService },
    { type: _events_service__WEBPACK_IMPORTED_MODULE_3__.EventsService },
    { type: _datetime_service__WEBPACK_IMPORTED_MODULE_2__.DateTimeService }
];
DetailService = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.Injectable)()
    ///////////////////////////////////////////////////////////////////////////
], DetailService);



/***/ }),

/***/ 80106:
/*!********************************************!*\
  !*** ./src/app/services/events.service.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventsService": function() { return /* binding */ EventsService; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ 79765);
/* harmony import */ var _capacitor_toast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @capacitor/toast */ 40074);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! date-fns */ 61801);





///////////////////////////////////////////////////////////////
let EventsService = class EventsService {
    constructor() {
        ///////////////////////////////////////////////////////////////
        this.cPage = { url: null, lName: null, cName: null };
        this.channels = {};
        ///////////////////////////////////////////////////////////////
        this.isValidJSON = (jsonStr) => { try {
            JSON.parse(jsonStr);
        }
        catch (e) {
            return false;
        } return true; };
        ///////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////
    }
    ///////////////////////////////////////////////////////////////
    subscribe(topic, observer) { if (!this.channels[topic]) {
        this.channels[topic] = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
    } ; return this.channels[topic].subscribe(observer); }
    ///////////////////////////////////////////////////////////////
    publish(topic, data) { const subject = this.channels[topic]; if (!subject) {
        return;
    } ; subject.next(data); }
    ///////////////////////////////////////////////////////////////
    check(topic) { const subject = this.channels[topic]; if (!subject) {
        return Promise.resolve(false);
    }
    else {
        return Promise.resolve(true);
    } }
    ///////////////////////////////////////////////////////////////
    destroy(topic) { const subject = this.channels[topic]; if (!subject) {
        return;
    } ; subject.complete(); delete this.channels[topic]; }
    ///////////////////////////////////////////////////////////////
    currentPageName(cPageObj) { this.cPage = cPageObj; this.publish('newPage', cPageObj.lName); }
    ///////////////////////////////////////////////////////////////
    getDur(start) { return (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.default)(new Date(), start); }
    ///////////////////////////////////////////////////////////////
    showToast(tIco, tText) {
        const icoObj = { general: '\uD83D\uDEE1\uFE0F', success: '\uD83D\uDFE2', error: '\uD83D\uDD34', warning: '\uD83D\uDFE0', check: '\u2714\uFE0F', cross: '\u274C', refresh: '\u267B\uFE0F', smiley: '🙃', locked: '\uD83D\uDD10', fire: '\uD83D\uDD25', email: '\uD83D\uDCEB', msg: '\uD83D\uDCAC' };
        (() => (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () { yield _capacitor_toast__WEBPACK_IMPORTED_MODULE_0__.Toast.show({ text: icoObj[tIco] + ' ' + tText, duration: 'short', position: 'bottom' }); }))();
    }
    //////////////////////////////////////////////////////////////
    showPushToast(ico, title, body, dur, pos) {
        let spIco, spTxt, spDur, spPos;
        ico !== null ? spIco = ico : spIco = '🛡️';
        title !== null ? spTxt = spIco + ' ' + title + ': ' + body : spTxt = spIco + ' ' + body;
        dur !== null ? spDur = dur : spDur = 'long';
        pos !== null ? spPos = pos : spPos = 'bottom';
        (() => (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () { yield _capacitor_toast__WEBPACK_IMPORTED_MODULE_0__.Toast.show({ text: spTxt, duration: spDur, position: spPos }); }))();
    }
    //////////////////////////////////////////////////////////////
    isConOK(color1, color2) {
        const hexToRgb = (hex) => { let shRX = /^#?([a-f\d])([a-f\d])([a-f\d])$/i; hex = hex.replace(shRX, (m, r, g, b) => { return r + r + g + g + b + b; }); let rs = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex); return rs ? { r: parseInt(rs[1], 16), g: parseInt(rs[2], 16), b: parseInt(rs[3], 16) } : null; };
        const lum = (r, g, b) => { let a = [r, g, b].map((v) => { v /= 255; return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4); }); return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722; };
        const calcR = () => { const c1rgb = hexToRgb(color1); const c2rgb = hexToRgb(color2); const c1lum = lum(c1rgb.r, c1rgb.g, c1rgb.b); const c2lum = lum(c2rgb.r, c2rgb.g, c2rgb.b); const ratio = c1lum > c2lum ? ((c2lum + 0.05) / (c1lum + 0.05)) : ((c1lum + 0.05) / (c2lum + 0.05)); return ratio; };
        const ratio = calcR();
        if (ratio < 1 / 4.5) {
            return true;
        }
        else {
            return false;
        }
    }
    ///////////////////////////////////////////////////////////////
    incBright(color, percent) { let hex = color.replace(/^\s*#|\s*$/g, ''); if (hex.length == 3) {
        hex = hex.replace(/(.)/g, '$1$1');
    } ; let r = parseInt(hex.substr(0, 2), 16), g = parseInt(hex.substr(2, 2), 16), b = parseInt(hex.substr(4, 2), 16); return '#' + ((0 | (1 << 8) + r + (256 - r) * percent / 100).toString(16)).substr(1) + ((0 | (1 << 8) + g + (256 - g) * percent / 100).toString(16)).substr(1) + ((0 | (1 << 8) + b + (256 - b) * percent / 100).toString(16)).substr(1); }
};
EventsService = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable)({ providedIn: 'root' })
    ///////////////////////////////////////////////////////////////
], EventsService);



/***/ }),

/***/ 93405:
/*!**********************************************!*\
  !*** ./src/app/services/fairwork.service.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FairworkService": function() { return /* binding */ FairworkService; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _datetime_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./datetime.service */ 12826);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var _services_fairworkVars__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/fairworkVars */ 93081);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! date-fns */ 76175);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! date-fns */ 62094);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! date-fns */ 43257);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! date-fns */ 12297);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! date-fns */ 45255);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! date-fns */ 87482);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! date-fns */ 50752);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! date-fns */ 4547);






////////////////////////////////////////////////////////////////////////////////////////////////////
let FairworkService = class FairworkService {
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    constructor(logger, dT) {
        this.logger = logger;
        this.dT = dT;
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        this.mPR = { base: { 0: 38.36, 1: 27.40, 2: 27.40, 3: 27.40, 4: 27.40, 5: 27.40, 6: 32.88 }, penalty: { hrs: { night: { start: { h: 0, m: 0, s: 0 }, end: { h: 5, m: 59, s: 59 } }, eve: { start: { h: 22, m: 0, s: 0 }, end: { h: 23, m: 59, s: 59 } } }, 0: { night: 0, eve: 0 }, 1: { night: 3.40, eve: 2.27 }, 2: { night: 3.40, eve: 2.27 }, 3: { night: 3.40, eve: 2.27 }, 4: { night: 3.40, eve: 2.27 }, 5: { night: 3.40, eve: 2.27 }, 6: { n: 0, e: 0 } }, ph: 54.80 };
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    r2d(no) { const rN = Math.round((no + Number.EPSILON) * 100) / 100; const rS = rN.toFixed(2); const nN = +rS; return nN; }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    getShiftPay(shiftObj) {
        const sO = shiftObj;
        let shiftCalcArr = [];
        //let hasPH:boolean;this.inclPublicHoliday(sO).s.res||this.inclPublicHoliday(sO).e.res?hasPH=true:hasPH=false;if(hasPH){console.log('Includes Public Holiday - Skipping.');return};
        const sTDate = this.dT.Dut(sO.StartTime);
        const eTDate = this.dT.Dut(sO.EndTime);
        const sTDay = this.dT.gD(sTDate);
        const eTDay = this.dT.gD(eTDate);
        const getNoSplitDur = () => { let gNSDRes = [{ day: sTDay, start: sTDate, end: eTDate, dur: {} }]; gNSDRes[0].dur = (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.default)({ start: sTDate, end: eTDate }); return gNSDRes; };
        const getSplitDur = () => { let gSDRes = [{ day: sTDay, start: null, end: null, dur: {} }, { day: eTDay, start: null, end: null, dur: {} }]; gSDRes[0].start = sTDate; gSDRes[0].end = (0,date_fns__WEBPACK_IMPORTED_MODULE_3__.default)(sTDate); gSDRes[0].dur = (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.default)({ start: sTDate, end: ((0,date_fns__WEBPACK_IMPORTED_MODULE_3__.default)(sTDate)) }); gSDRes[1].start = (0,date_fns__WEBPACK_IMPORTED_MODULE_4__.default)(eTDate); gSDRes[1].end = eTDate; gSDRes[1].dur = (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.default)({ start: ((0,date_fns__WEBPACK_IMPORTED_MODULE_4__.default)(eTDate)), end: eTDate }); return gSDRes; };
        let isSplit;
        if ((0,date_fns__WEBPACK_IMPORTED_MODULE_5__.default)(sTDate, eTDate)) {
            isSplit = false;
        }
        else {
            isSplit = true;
        }
        ;
        isSplit ? shiftCalcArr = getSplitDur() : shiftCalcArr = getNoSplitDur();
        ///////////////////////////////////////////////////////////////
        let basePay = 0;
        let penaltyPay = 0;
        let payTotal = 0;
        for (let sSec = 0; sSec < shiftCalcArr.length; sSec++) {
            const tSSec = shiftCalcArr[sSec];
            // Base Pay
            const secBRate = this.mPR.base[tSSec.day];
            const secBRateHrs = tSSec.dur.hours + (this.r2d(tSSec.dur.minutes / 60));
            const secBPay = this.r2d((secBRateHrs * secBRate));
            basePay += secBPay;
            // Penalty Pay
            if (tSSec.day >= 1 && tSSec.day <= 5) {
                const ePSA = [((0,date_fns__WEBPACK_IMPORTED_MODULE_6__.default)(tSSec.start)), ((0,date_fns__WEBPACK_IMPORTED_MODULE_7__.default)(tSSec.start)), ((0,date_fns__WEBPACK_IMPORTED_MODULE_8__.default)(tSSec.start)), this.mPR.penalty.hrs.eve.start.h, this.mPR.penalty.hrs.eve.start.m, this.mPR.penalty.hrs.eve.start.s];
                const ePSD = new Date(ePSA[0], ePSA[1], ePSA[2], ePSA[3], ePSA[4], ePSA[5]);
                const ePSU = this.dT.getUT(ePSD);
                const ePEA = [((0,date_fns__WEBPACK_IMPORTED_MODULE_6__.default)(tSSec.start)), ((0,date_fns__WEBPACK_IMPORTED_MODULE_7__.default)(tSSec.start)), ((0,date_fns__WEBPACK_IMPORTED_MODULE_8__.default)(tSSec.start)), this.mPR.penalty.hrs.eve.end.h, this.mPR.penalty.hrs.eve.end.m, this.mPR.penalty.hrs.eve.end.s];
                const ePED = new Date(ePEA[0], ePEA[1], ePEA[2], ePEA[3], ePEA[4], ePEA[5]);
                const ePEU = this.dT.getUT(ePED);
                const isEveP = (tT) => { if (tT >= ePSU && tT <= ePEU) {
                    return true;
                }
                else {
                    return false;
                } };
                const nPSA = [((0,date_fns__WEBPACK_IMPORTED_MODULE_6__.default)(tSSec.start)), ((0,date_fns__WEBPACK_IMPORTED_MODULE_7__.default)(tSSec.start)), ((0,date_fns__WEBPACK_IMPORTED_MODULE_8__.default)(tSSec.start)), this.mPR.penalty.hrs.night.start.h, this.mPR.penalty.hrs.night.start.m, this.mPR.penalty.hrs.night.start.s];
                const nPSD = new Date(nPSA[0], nPSA[1], nPSA[2], nPSA[3], nPSA[4], nPSA[5]);
                const nPSU = this.dT.getUT(nPSD);
                const nPEA = [((0,date_fns__WEBPACK_IMPORTED_MODULE_6__.default)(tSSec.start)), ((0,date_fns__WEBPACK_IMPORTED_MODULE_7__.default)(tSSec.start)), ((0,date_fns__WEBPACK_IMPORTED_MODULE_8__.default)(tSSec.start)), this.mPR.penalty.hrs.night.end.h, this.mPR.penalty.hrs.night.end.m, this.mPR.penalty.hrs.night.end.s];
                const nPED = new Date(nPEA[0], nPEA[1], nPEA[2], nPEA[3], nPEA[4], nPEA[5]);
                const nPEU = this.dT.getUT(nPED);
                const isNightP = (tT) => { if (tT >= nPSU && tT <= nPEU) {
                    return true;
                }
                else {
                    return false;
                } };
                const tSecStartUT = this.dT.getUT(tSSec.start);
                const tSecEndUT = this.dT.getUT(tSSec.end);
                const isShiftSec = (tT) => { if (tT >= tSecStartUT && tT <= tSecEndUT) {
                    return true;
                }
                else {
                    return false;
                } };
                // Evening Penalty
                if (isShiftSec(ePSU) || isShiftSec(ePEU)) {
                    const secPEveRate = this.mPR.penalty[tSSec.day].eve;
                    let secPEveDur = { hours: 0, minutes: 0 };
                    let secAllEveMinsCount = 0;
                    const secAllEveMins = tSSec.dur.minutes + (tSSec.dur.hours * 60);
                    for (let secMs = 0; secMs < secAllEveMins; secMs++) {
                        const etTUnixMin = this.dT.getUT(((0,date_fns__WEBPACK_IMPORTED_MODULE_9__.default)(tSSec.start, secMs)));
                        if (isEveP(etTUnixMin)) {
                            secPEveDur.minutes++;
                        }
                    }
                    ;
                    if (secAllEveMinsCount > 0) {
                        secPEveDur.hours = Math.floor(secAllEveMins / 60);
                        secPEveDur.minutes = secAllEveMins - (secPEveDur.hours * 60);
                    }
                    ;
                    const secPEveRateHrs = secPEveDur.hours + (this.r2d(secPEveDur.minutes / 60));
                    const secPEvePay = this.r2d((secPEveRateHrs * secPEveRate));
                    penaltyPay += secPEvePay;
                }
                // Night Penalty
                if (isShiftSec(nPSU) || isShiftSec(nPEU)) {
                    const secPNightRate = this.mPR.penalty[tSSec.day].night;
                    let secPNightDur = { hours: 0, minutes: 0 };
                    let secAllNightMinsCount = 0;
                    const secAllNightMins = tSSec.dur.minutes + (tSSec.dur.hours * 60);
                    for (let secMs = 0; secMs < secAllNightMins; secMs++) {
                        const ntTUnixMin = this.dT.getUT(((0,date_fns__WEBPACK_IMPORTED_MODULE_9__.default)(tSSec.start, secMs)));
                        if (isNightP(ntTUnixMin)) {
                            secPNightDur.minutes++;
                        }
                    }
                    ;
                    if (secAllNightMinsCount > 0) {
                        secPNightDur.hours = Math.floor(secAllNightMins / 60);
                        secPNightDur.minutes = secAllNightMins - (secPNightDur.hours * 60);
                    }
                    ;
                    const secPNightRateHrs = secPNightDur.hours + (this.r2d(secPNightDur.minutes / 60));
                    const secPNightPay = this.r2d((secPNightRateHrs * secPNightRate));
                    penaltyPay += secPNightPay;
                }
            }
        }
        ///////////////////////////////////////////////////////////////
        this.r2d(basePay);
        this.r2d(penaltyPay);
        payTotal = basePay + penaltyPay;
        this.r2d(payTotal);
        return Promise.resolve({ b: basePay, p: penaltyPay, t: payTotal });
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    inclPublicHoliday(sO) {
        const sDate = this.dT.Dut(sO.StartTime);
        const eDate = this.dT.Dut(sO.EndTime);
        const sSY = this.dT.gY(sDate);
        const sEY = this.dT.gY(eDate);
        let pHolsYrs = [];
        let pHolsDates = [];
        sSY === sEY ? pHolsYrs = [sSY] : pHolsYrs = [sSY, sEY];
        for (let y = 0; y < pHolsYrs.length; y++) {
            const tYHols = _services_fairworkVars__WEBPACK_IMPORTED_MODULE_1__.myPublicHolidays[pHolsYrs[y]];
            for (let h = 0; h < tYHols.length; h++) {
                const tHolDate = this.dT.parseStr(tYHols[h], 'dd/MM/yyyy');
                pHolsDates.push(tHolDate);
            }
        }
        ;
        let sOnPH = { res: false, ph: null };
        let eOnPH = { res: false, ph: null };
        const sMatch = pHolsDates.filter(pH => this.dT.isSD(sDate, pH));
        if (sMatch.length > 0) {
            sOnPH.res = true;
            sOnPH.ph = sMatch[0];
        }
        ;
        const eMatch = pHolsDates.filter(pH => this.dT.isSD(eDate, pH));
        if (eMatch.length > 0) {
            eOnPH.res = true;
            eOnPH.ph = eMatch[0];
        }
        ;
        return { s: sOnPH, e: eOnPH };
    }
};
FairworkService.ctorParameters = () => [
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_10__.NGXLogger },
    { type: _datetime_service__WEBPACK_IMPORTED_MODULE_0__.DateTimeService }
];
FairworkService = (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_12__.Injectable)({ providedIn: 'root' })
    ////////////////////////////////////////////////////////////////////////////////////////////////////
], FairworkService);



/***/ }),

/***/ 93081:
/*!******************************************!*\
  !*** ./src/app/services/fairworkVars.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "myPayRates": function() { return /* binding */ myPayRates; },
/* harmony export */   "myPublicHolidays": function() { return /* binding */ myPublicHolidays; },
/* harmony export */   "testObj": function() { return /* binding */ testObj; }
/* harmony export */ });
///////////////////////////////////////////////////////////////////////////
const myPayRates = {
    base: {
        0: 38.36,
        1: 27.40,
        2: 27.40,
        3: 27.40,
        4: 27.40,
        5: 27.40,
        6: 32.88
    },
    penalty: {
        0: { n: 0, e: 0 },
        1: { n: 3.41, e: 2.27 },
        2: { n: 3.41, e: 2.27 },
        3: { n: 3.41, e: 2.27 },
        4: { n: 3.41, e: 2.27 },
        5: { n: 3.41, e: 2.27 },
        6: { n: 0, e: 0 }
    },
    ph: 54.80
};
///////////////////////////////////////////////////////////////////////////
const myPublicHolidays = {
    2021: ['01/01/2021', '26/01/2021', '01/03/2021', '02/04/2021', '03/04/2021', '05/04/2021', '25/04/2021', '07/06/2021', '14/06/2021', '27/09/2021', '25/12/2021', '26/12/2021', '27/12/2021', '28/12/2021'],
    2022: ['01/01/2022', '03,01,2022', '26/01/2022', '07/03/2022', '15/04/2022', '18/04/2022', '25/04/2022', '06/06/2022', '26/09/2022', '25/12/2022', '26/12/2022', '27/12/2022'],
    2023: ['01/01/2023', '02,01,2023', '26/01/2023', '06/03/2023', '07/04/2023', '10/04/2023', '25/04/2023', '05/06/2023', '25/09/2023', '25/12/2022', '26/12/2022']
};
const testObj = {
    Date: "2021-06-26T00:00:00+08:00",
    EndTime: 1624725300,
    StartTime: 1624699500,
    TotalTime: 7.170000076293945,
    TotalTimeInv: 6
};
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////


/***/ }),

/***/ 22904:
/*!************************************************!*\
  !*** ./src/app/services/filesystem.service.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FileSystemService": function() { return /* binding */ FileSystemService; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var src_app_services_datetime_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! src/app/services/datetime.service */ 12826);
/* harmony import */ var _ionic_native_file_transfer_ngx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ionic-native/file-transfer/ngx */ 97905);
/* harmony import */ var _ionic_native_file_ngx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ionic-native/file/ngx */ 20138);
/* harmony import */ var _ionic_native_file_path_ngx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ionic-native/file-path/ngx */ 59865);
/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @capacitor/core */ 68384);
/* harmony import */ var _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ionic-native/http/ngx */ 68589);
/* harmony import */ var _storage_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./storage.service */ 71188);
/* harmony import */ var _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @capacitor/filesystem */ 61977);
/* harmony import */ var _events_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./events.service */ 80106);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _ionic_native_file_chooser_ngx__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ionic-native/file-chooser/ngx */ 81953);
/* harmony import */ var _capacitor_dialog__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @capacitor/dialog */ 63540);
/* harmony import */ var _capacitor_app__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @capacitor/app */ 42138);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/common/http */ 91841);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @ionic/angular */ 80476);

















///////////////////////////////////////////////////////
let FileSystemService = class FileSystemService {
    //////////////////////////////////////////////////////
    constructor(fileChooser, evServ, shttp, logger, storeServ, transfer, file, fileP, httpClient, dT, plt) {
        this.fileChooser = fileChooser;
        this.evServ = evServ;
        this.shttp = shttp;
        this.logger = logger;
        this.storeServ = storeServ;
        this.transfer = transfer;
        this.file = file;
        this.fileP = fileP;
        this.httpClient = httpClient;
        this.dT = dT;
        this.plt = plt;
        //////////////////////////////////////////////////////
        this.fsIsReady = null;
        this.fsReadyTime = null;
        this.permDenyCount = 0;
        this.phoneFS = _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Directory.External;
        this.appFS = _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Directory.External;
        this.buDir = 'Sheriff/backups/';
        // --------------------------------------------------
        this.appDocs = _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Directory.Documents;
        this.appData = _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Directory.Data;
        this.appCache = _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Directory.Cache;
        this.appExt = _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Directory.External;
        //////////////////////////////////////////////////////
        this.extFileCodes = ['PAD', 'NOT_FOUND_ERR', 'SECURITY_ERR', 'ABORT_ERR', 'NOT_READABLE_ERR', 'ENCODING_ERR', 'NO_MODIFICATION_ALLOWED_ERR', 'INVALID_STATE_ERR', 'SYNTAX_ERR', 'INVALID_MODIFICATION_ERR', 'QUOTA_EXCEEDED_ERR', 'TYPE_MISMATCH_ERR', 'PATH_EXISTS_ERR'];
        this.plt.ready().then(() => { this.fileTransfer = this.transfer.create(); });
    }
    /////////////////////////////////////////////////////
    reInitFS(uUK) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            const fsPermErrOpts = { title: 'Permission Required', message: 'Without access to your device\'s filesysem, Sheriff cannot save/backup your Deputy records/data. Please ALLOW ACCESS when prompted again to continue, otherwise Sheriff will exit.', okButtonTitle: 'Prompt Again', cancelButtonTitle: 'Exit App' };
            this.evServ.subscribe('doReInitFS', doReInit => {
                if (doReInit) {
                    this.evServ.destroy('doReInitFS');
                    this.initFS(uUK);
                }
                else {
                    this.permDenyCount++;
                    if (this.permDenyCount < 2) {
                        _capacitor_dialog__WEBPACK_IMPORTED_MODULE_10__.Dialog.confirm(fsPermErrOpts).then(didConfirm => { if (didConfirm) {
                            this.evServ.destroy('doReInitFS');
                            this.initFS(uUK);
                        }
                        else {
                            this.evServ.destroy('doReInitFS');
                            _capacitor_app__WEBPACK_IMPORTED_MODULE_11__.App.exitApp();
                        } });
                    }
                    else {
                        this.evServ.destroy('doReInitFS');
                        _capacitor_app__WEBPACK_IMPORTED_MODULE_11__.App.exitApp();
                    }
                }
            });
        });
    }
    /////////////////////////////////////////////////////
    initFS(uUK) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[FileService|initFS] ()...');
            const userPermStatus = yield _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.checkPermissions();
            if (userPermStatus.publicStorage === 'granted') {
                this.fsIsReady = true;
                this.evServ.publish('fsPermsGranted', true);
                this.logger.info('[FilesystemService|initFS] (PermCheck) Result: \uD83D\uDFE9[' + userPermStatus.publicStorage.toUpperCase() + ']');
                this.storeServ.setItem(uUK + 'fsPerm', 'true').then(() => {
                    this.logger.info('[FilesystemService|initFS] (PermCheck -> Storage) \uD83D\uDD11 User\'s fsPerm Key Set to [TRUE].');
                }).catch(() => { this.logger.info('[FilesystemService|initFS] (PermCheck -> Storage) \uD83D\uDD11 ERROR: \uD83D\uDFE5 Failed to Set User\'s fsPerm Key.'); });
            }
            else {
                this.logger.info('[FilesystemService|initFS] (PermCheck) Result: \uD83D\uDFE5[' + userPermStatus.publicStorage.toUpperCase() + ']');
                this.reInitFS(uUK);
                _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.requestPermissions().then(permStat => {
                    if (permStat.publicStorage === 'granted') {
                        this.evServ.publish('doReInitFS', true);
                    }
                    else {
                        this.evServ.publish('doReInitFS', false);
                    }
                }).catch(() => { this.evServ.publish('doReInitFS', false); });
            }
        });
    }
    /////////////////////////////////////////////////////
    fileWrite(baseFS, pathToFile, fileData) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const fWRes = yield _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.writeFile({ path: pathToFile, data: fileData, directory: baseFS, encoding: _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Encoding.UTF8, recursive: true });
                return Promise.resolve({ result: true, data: fWRes.uri });
            }
            catch (fWErr) {
                return Promise.resolve({ result: false, data: fWErr.message });
            }
        });
    }
    /////////////////////////////////////////////////////
    fileRead(baseFS, pathToFile) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const fRRes = yield _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.readFile({ path: pathToFile, directory: baseFS, encoding: _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Encoding.UTF8 });
                return Promise.resolve({ result: true, data: fRRes.data });
            }
            catch (fRErr) {
                return Promise.resolve({ result: false, data: fRErr.message });
            }
        });
    }
    /////////////////////////////////////////////////////
    fileAppend(baseFS, pathToFile, appendData) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            try {
                yield _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.appendFile({ path: pathToFile, data: appendData, directory: baseFS, encoding: _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Encoding.UTF8 });
                return Promise.resolve({ result: true, data: 'success' });
            }
            catch (fAErr) {
                return Promise.resolve({ result: false, data: fAErr.message });
            }
        });
    }
    /////////////////////////////////////////////////////
    fileDelete(baseFS, pathToFile) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            try {
                yield _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.deleteFile({ path: pathToFile, directory: baseFS });
                return Promise.resolve({ result: true, data: 'success' });
            }
            catch (fDErr) {
                return Promise.resolve({ result: false, data: fDErr.message });
            }
        });
    }
    /////////////////////////////////////////////////////
    mkdir(baseFS, pathToDir) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            try {
                yield _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.mkdir({ path: pathToDir, directory: baseFS, recursive: true });
                return Promise.resolve({ result: true, data: 'success' });
            }
            catch (mkdirErr) {
                return Promise.resolve({ result: false, data: mkdirErr.message });
            }
        });
    }
    /////////////////////////////////////////////////////
    rmdir(baseFS, pathToDir) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            try {
                yield _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.rmdir({ path: pathToDir, directory: baseFS });
                return Promise.resolve({ result: true, data: 'success' });
            }
            catch (rmdirErr) {
                return Promise.resolve({ result: false, data: rmdirErr.message });
            }
        });
    }
    /////////////////////////////////////////////////////
    readdir(baseFS, pathToDir) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const readdirRes = yield _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.readdir({ path: pathToDir, directory: baseFS });
                return Promise.resolve({ result: true, data: readdirRes });
            }
            catch (readDirErr) {
                return Promise.resolve({ result: false, data: readDirErr.message });
            }
        });
    }
    /////////////////////////////////////////////////////
    stat(baseFS, pathToFile) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const statRes = yield _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.stat({ path: pathToFile, directory: baseFS });
                if (statRes) {
                    return Promise.resolve({ result: true, data: statRes });
                }
            }
            catch (statErr) {
                return Promise.resolve({ result: false, data: null });
            }
        });
    }
    /////////////////////////////////////////////////////
    copy(fromBaseFS, toBaseFS, fromFilePath, toFilePath) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            try {
                yield _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.copy({ from: fromFilePath, to: toFilePath, directory: fromBaseFS, toDirectory: toBaseFS });
                return Promise.resolve({ result: true, data: 'success' });
            }
            catch (copyErr) {
                return Promise.resolve({ result: false, data: copyErr.message });
            }
        });
    }
    /////////////////////////////////////////////////////
    copyByPath(fromFilePath, toFilePath) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            try {
                yield _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.copy({ from: fromFilePath, to: toFilePath });
                return Promise.resolve({ result: true, data: 'success' });
            }
            catch (copyErr) {
                return Promise.resolve({ result: false, data: copyErr.message });
            }
        });
    }
    //////////////////////////////////////////////////////
    pickOpen() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () { return yield this.fileChooser.open(); });
    }
    //////////////////////////////////////////////////////
    pickPhoto() { return this.fileChooser.open(); }
    //////////////////////////////////////////////////////
    dlFile(url, fileNExt) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[fileServ|dlFile] (' + url + ')...');
            try {
                const { isFile, nativeURL } = yield this.shttp.downloadFile(url, null, null, 'file:///storage/emulated/0/Android/data/dev.zer0ne.sheriff/files/Sheriff/assets/' + fileNExt);
                if (isFile) {
                    const convFileUri = _capacitor_core__WEBPACK_IMPORTED_MODULE_4__.Capacitor.convertFileSrc(nativeURL);
                    if (convFileUri !== null && convFileUri !== undefined && convFileUri.length > 0) {
                        return Promise.resolve(convFileUri);
                    }
                    else {
                        return Promise.resolve(null);
                    }
                }
            }
            catch (dlErr) {
                return Promise.resolve(null);
            }
        });
    }
    //////////////////////////////////////////////////////
    replaceMeAva(webUrl) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[fileServ|replaceMeAva] ()...');
            try {
                const { isFile } = yield this.shttp.downloadFile(webUrl, null, null, 'file:///storage/emulated/0/Android/data/dev.zer0ne.sheriff/files/Sheriff/assets/meAvatarMeTemp');
                if (isFile) {
                    _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.deleteFile({ path: 'file:///storage/emulated/0/Android/data/dev.zer0ne.sheriff/files/Sheriff/assets/meAvatar' });
                    _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.rename({
                        from: 'file:///storage/emulated/0/Android/data/dev.zer0ne.sheriff/files/Sheriff/assets/meAvatarMeTemp',
                        to: 'file:///storage/emulated/0/Android/data/dev.zer0ne.sheriff/files/Sheriff/assets/meAvatar'
                    });
                    return Promise.resolve(true);
                }
                else {
                    return Promise.resolve(false);
                }
            }
            catch (_a) {
                return Promise.resolve(false);
            }
        });
    }
    //////////////////////////////////////////////////////
    replaceWorkAva(webUrl) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[fileServ|replaceWorkAva] ()...');
            try {
                const { isFile } = yield this.shttp.downloadFile(webUrl, null, null, 'file:///storage/emulated/0/Android/data/dev.zer0ne.sheriff/files/Sheriff/assets/workAvatarWorkTemp');
                if (isFile) {
                    _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.deleteFile({ path: 'file:///storage/emulated/0/Android/data/dev.zer0ne.sheriff/files/Sheriff/assets/workAvatar' });
                    _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.rename({
                        from: 'file:///storage/emulated/0/Android/data/dev.zer0ne.sheriff/files/Sheriff/assets/workAvatarWorkTemp',
                        to: 'file:///storage/emulated/0/Android/data/dev.zer0ne.sheriff/files/Sheriff/assets/workAvatar'
                    });
                    return Promise.resolve(true);
                }
                else {
                    return Promise.resolve(false);
                }
            }
            catch (_a) {
                return Promise.resolve(false);
            }
        });
    }
    //////////////////////////////////////////////////////
    compareReplaceAva(avaName, newAvaWebUrl, currentAvaSize) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[fileServ|compareReplaceAvas] (' + avaName + ',' + newAvaWebUrl + ',' + currentAvaSize + ')');
            try {
                const { isFile } = yield this.shttp.downloadFile(newAvaWebUrl, null, null, 'file:///storage/emulated/0/Android/data/dev.zer0ne.sheriff/files/Sheriff/assets/' + avaName + 'AvatarTemp');
                if (isFile) {
                    const tempStat = yield _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.stat({ path: 'file:///storage/emulated/0/Android/data/dev.zer0ne.sheriff/files/Sheriff/assets/' + avaName + 'AvatarTemp' });
                    if (tempStat) {
                        if (tempStat.size === currentAvaSize) {
                            _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.deleteFile({ path: 'file:///storage/emulated/0/Android/data/dev.zer0ne.sheriff/files/Sheriff/assets/' + avaName + 'AvatarTemp' });
                            return Promise.resolve(false);
                        }
                        else {
                            _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.deleteFile({ path: 'file:///storage/emulated/0/Android/data/dev.zer0ne.sheriff/files/Sheriff/assets/' + avaName + 'Avatar' });
                            _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.rename({ from: 'file:///storage/emulated/0/Android/data/dev.zer0ne.sheriff/files/Sheriff/assets/' + avaName + 'AvatarTemp', to: 'file:///storage/emulated/0/Android/data/dev.zer0ne.sheriff/files/Sheriff/assets/' + avaName + 'Avatar' });
                            return Promise.resolve(true);
                        }
                    }
                }
                else {
                    return Promise.resolve(false);
                }
            }
            catch (_a) {
                return Promise.resolve(false);
            }
        });
    }
    //////////////////////////////////////////////////////
    niceBytes(bytes, decimals = 2) {
        if (bytes === 0)
            return 'empty';
        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['Bytes', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }
    //////////////////////////////////////////////////////
    getDBBUTS(uUK) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[fileServ|getDBBUTS] ()...');
            const { status, data } = yield this.shttp.sendRequest('https://zer0ne.dev/sheriff/up/' + uUK + 'dbSQLite.txt', { method: 'get', timeout: 20, responseType: 'text' });
            const msTS = Number(data);
            const ts = Math.floor(msTS / 1000);
            const tsD = this.dT.Dut(ts);
            if (status === 200) {
                return Promise.resolve(tsD);
            }
            else {
                return Promise.resolve('error');
            }
        });
    }
    //////////////////////////////////////////////////////
    renameExistBU(rnOpts) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            try {
                yield _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.rename(rnOpts);
                return Promise.resolve({ result: true, data: 'success' });
            }
            catch (rnErr) {
                return Promise.resolve({ result: false, data: rnErr.message });
            }
        });
    }
    //////////////////////////////////////////////////////
    dbbuUpload(uUK) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[fileServ|uploadFile] (' + uUK + ')...');
            const ulSuccess = () => { this.evServ.publish('dbbuUploadDone', true); };
            const ulFail = () => { this.evServ.publish('dbbuUploadDone', false); };
            yield this.fileDelete(this.phoneFS, 'Sheriff/temp-' + uUK + '.db');
            const tempBUDirRes = yield this.stat(this.phoneFS, 'Sheriff');
            const tempBUDirPath = tempBUDirRes.data.uri;
            const tempBULocalPath = tempBUDirPath + '/temp-' + uUK + '.db';
            let sT = new Date();
            this.evServ.subscribe('cpDone', (mt) => (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
                this.evServ.destroy('cpDone');
                const dur = this.evServ.getDur(sT);
                this.logger.info('[fileServ|dbbuUpload|copyTemp] (Copy Time): ' + dur + 'ms');
                sT = new Date();
                try {
                    const dbbuOpts = { fileKey: 'file', fileName: uUK + 'dbSQLite.db', httpMethod: 'post', mimeType: 'application/x-sqlite3' };
                    const dbbuServer = encodeURI('http://zer0ne.dev:6969/upload');
                    const dbbuLocalFileData = yield this.stat(this.appFS, '/Sheriff/temp-' + uUK + '.db');
                    console.log(dbbuLocalFileData);
                    const dbbuLocalFileUri = dbbuLocalFileData.data.uri;
                    console.log(dbbuLocalFileUri);
                    const dbbuFilePath = _capacitor_core__WEBPACK_IMPORTED_MODULE_4__.Capacitor.convertFileSrc(dbbuLocalFileUri);
                    console.log(dbbuFilePath);
                    const buRes = yield this.fileTransfer.upload('file:///sdcard/Android/data/dev.zer0ne.sheriff/files/Sheriff/temp-' + uUK + '.db', dbbuServer, dbbuOpts, true);
                    console.log(buRes);
                    if (buRes.responseCode === 200) {
                        const buResObj = JSON.parse(buRes.response);
                        const dur2 = this.evServ.getDur(sT);
                        this.logger.info('[fileServ|dbbuUpload] Sheriff FS Replied: (' + buRes.responseCode + ') - success: ' + buResObj.success + ', message: ' + buResObj.message + ' - ' + dur2 + 'ms');
                        ulSuccess();
                    }
                    else {
                        ulFail();
                    }
                }
                catch (buErr) {
                    ulFail();
                    console.log(buErr);
                }
            }));
            const cpCheck = setInterval(() => (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () { const tfData = (yield this.stat(this.appFS, 'Sheriff/temp-' + uUK + '.db')).data; if (tfData !== null) {
                clearInterval(cpCheck);
                const tfMTime = this.dT.format((this.dT.tD(tfData.mtime)), 'hh:mm:ss:SS');
                this.evServ.publish('cpDone', tfMTime);
            } }), 100);
            this.copyByPath('/data/data/dev.zer0ne.sheriff/databases/' + uUK + 'dbSQLite.db', tempBULocalPath);
        });
    }
    //////////////////////////////////////////////////////
    getCurrentDBStat(uUK) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[fileServ|getCurrentDBStats] ()...');
            try {
                const dbStatRes = yield _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.stat({ path: '/data/data/dev.zer0ne.sheriff/databases/' + uUK + 'dbSQLite.db' });
                if (dbStatRes) {
                    return Promise.resolve({ result: true, data: dbStatRes });
                }
                else {
                    return Promise.resolve({ result: false });
                }
            }
            catch (_a) {
                return Promise.resolve({ result: false });
            }
        });
    }
    //////////////////////////////////////////////////////
    listDBFiles() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[fileServ|listDBFiles] ()...');
            try {
                const dbDirRes = yield _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.readdir({ path: '/data/data/dev.zer0ne.sheriff/databases' });
                if (dbDirRes && dbDirRes.files.length > 0) {
                    return Promise.resolve({ result: true, data: dbDirRes.files });
                }
                else {
                    return Promise.resolve({ result: false });
                }
            }
            catch (lDBFErr) {
                this.logger.info('[fileServ|listDBFiles] (Error): ' + JSON.stringify(lDBFErr));
            }
        });
    }
    //////////////////////////////////////////////////////
    getFireDBBUFile(uUK) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[fileServ|getFireDBBUFile] ()...');
            const fbDBUri = () => (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
                try {
                    const statRes = yield _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.stat({ path: 'Sheriff/fireDBBU.db', directory: this.phoneFS });
                    if (statRes) {
                        return statRes.uri;
                    }
                    else {
                        return null;
                    }
                }
                catch (_a) {
                    return null;
                }
            });
            const doDel = (delUri) => (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () { const slp = () => { return new Promise(resolve => setTimeout(resolve, 500)); }; _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.deleteFile({ path: delUri }); yield slp(); return Promise.resolve(true); });
            const doCopy = () => {
                const cpCheckLoop = setInterval(() => (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
                    let fU = yield fbDBUri();
                    if (fU !== null) {
                        clearInterval(cpCheckLoop);
                        const ulfType = 'application/x-sqlite3';
                        const ulfDataSrc = _capacitor_core__WEBPACK_IMPORTED_MODULE_4__.Capacitor.convertFileSrc(fU);
                        const rawBlob = yield fetch(ulfDataSrc).then((res) => res.blob());
                        const ulfBlob = rawBlob.slice(0, rawBlob.size, ulfType);
                        this.evServ.publish('dbbuBlob', ulfBlob);
                    }
                }), 100);
                this.copyByPath('/data/data/dev.zer0ne.sheriff/databases/' + uUK + 'dbSQLite.db', 'file:///sdcard/Android/data/dev.zer0ne.sheriff/files/Sheriff/fireDBBU.db');
            };
            const preEx = yield fbDBUri();
            if (preEx !== null) {
                yield doDel(preEx.toString());
                doCopy();
            }
            else {
                doCopy();
            }
        });
    }
    //////////////////////////////////////////////////////
    dlFireBUForInstall(dlURL) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[fileServ|dlFireBUForInstall] ()...');
            const buInstallUri = 'file:///sdcard/Android/data/dev.zer0ne.sheriff/files/Sheriff/backups/fireBUInstall.db';
            try {
                const dlRes = yield this.shttp.downloadFile(dlURL, null, null, buInstallUri);
                if (dlRes.isFile) {
                    const dlBUStatRes = yield _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.stat({ path: buInstallUri });
                    if (dlBUStatRes) {
                        return Promise.resolve(true);
                    }
                    else {
                        return Promise.resolve(false);
                    }
                }
                else {
                    return Promise.resolve(false);
                }
            }
            catch (dlErr) {
                this.logger.info('[fileServ|dlFireDBBU] (Error): ' + JSON.stringify(dlErr));
                return Promise.resolve(false);
            }
        });
    }
    //////////////////////////////////////////////////////
    dlImage4SQLite(dlURL, saveNameWExt) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[fileServ|dlImage4SQLite] (' + dlURL + ')...');
            const sUri = 'file:///sdcard/Android/data/dev.zer0ne.sheriff/files/Sheriff/assets/' + saveNameWExt;
            try {
                const dlRes = yield this.shttp.downloadFile(dlURL, null, null, sUri);
                if (dlRes.isFile) {
                    const dlImgStatRes = yield _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.stat({ path: sUri });
                    if (dlImgStatRes) {
                        const lcUri = _capacitor_core__WEBPACK_IMPORTED_MODULE_4__.Capacitor.convertFileSrc(dlImgStatRes.uri);
                        return Promise.resolve({ result: true, uri: lcUri, size: dlImgStatRes.size, mtime: dlImgStatRes.mtime });
                    }
                    else {
                        return Promise.resolve({ result: false });
                    }
                }
                else {
                    return Promise.resolve({ result: false });
                }
            }
            catch (dlErr) {
                this.logger.info('[fileServ|dlImage4SQLite] (Error): ' + JSON.stringify(dlErr));
                return Promise.resolve({ result: false });
            }
        });
    }
    //////////////////////////////////////////////////////
    dlFireDBBU(dlURL) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[fileServ|dlFireDBBU] (' + dlURL + ')...');
            const sUri = 'file:///sdcard/Android/data/dev.zer0ne.sheriff/files/Sheriff/backups/fireDBBU.db';
            try {
                const dlRes = yield this.shttp.downloadFile(dlURL, null, null, sUri);
                if (dlRes.isFile) {
                    const dlBUStatRes = yield _capacitor_filesystem__WEBPACK_IMPORTED_MODULE_7__.Filesystem.stat({ path: sUri });
                    if (dlBUStatRes) {
                        return Promise.resolve({ result: true, uri: dlBUStatRes.uri });
                    }
                    else {
                        return Promise.resolve({ result: false });
                    }
                }
                else {
                    return Promise.resolve({ result: false });
                }
            }
            catch (dlErr) {
                this.logger.info('[fileServ|dlFireDBBU] (Error): ' + JSON.stringify(dlErr));
                return Promise.resolve({ result: false });
            }
        });
    }
    //////////////////////////////////////////////////////
    dbbuDelete(uUK) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[fileServ|budbDelete] (' + uUK + ')');
            const delSuccess = () => { this.evServ.publish('dbbuDeleteDone', true); };
            const delFail = () => { this.evServ.publish('dbbuDeleteDone', false); };
            // Delete Server DBBU
            const delServerBU = () => (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
                try {
                    const { status, data, error } = yield this.shttp.sendRequest('http://zer0ne.dev:6969/delete', { method: 'post', data: { uuk: uUK }, headers: { uuk: uUK } });
                    if (status === 200) {
                        const resObj = JSON.parse(data);
                        this.logger.info('[fileServ|dbbuDelete|ServerBU] (RESULT): [' + status.toString() + '] - success: ' + resObj.success + ', message: ' + resObj.message);
                        delSuccess();
                    }
                    else {
                        this.logger.info('[fileServ|dbbuDelete|ServerBU] (RESULT): [' + status.toString() + '] - error: ' + error);
                        delFail();
                    }
                }
                catch (err) {
                    this.logger.info('[fileServ|dbbuDelete|ServerBU] (RESULT): [' + status.toString() + '] - error: ' + JSON.stringify(err));
                    delFail();
                }
            });
            // Delete Local DBBUs
            const buLocals = ['Sheriff/backups/' + uUK + 'dbSQLite.db', 'Sheriff/db/' + uUK + 'dbSQLite.db', 'Sheriff/temp-' + uUK + '.db'];
            for (let i = 0; i < buLocals.length; i++) {
                const oldDBPath = buLocals[i];
                const oldStat = (yield this.stat(this.appFS, oldDBPath)).data;
                if (oldStat !== null) {
                    this.logger.info('[fileServ|dbbuDelete|OldLocalDBs] (Found): Old DB @ ' + oldStat.uri);
                    const delOldRes = yield this.fileDelete(this.phoneFS, oldDBPath);
                    if (delOldRes.result) {
                        this.logger.info('[fileServ|dbbuDelete|OldLocalDBs] (Delete): SUCCESS.');
                    }
                    else {
                        this.logger.info('[fileServ|dbbuDelete|OldLocalDBs] (Delete): FAIL.');
                    }
                }
                else {
                    this.logger.info('[fileServ|dbbuDelete|OldLocalDBs] (Not Found): Old DB @ ' + oldDBPath);
                }
            }
            setTimeout(() => { delServerBU(); }, 500);
        });
    }
    //////////////////////////////////////////////////////
    dbbuDownload(uUK) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[fileServ|dbbuDownload] (' + uUK + ')...');
            const doRename = () => (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () { const rNOpts = { from: 'Sheriff/backups/' + uUK + 'dbSQLite.db', to: 'Sheriff/backups/OLD' + uUK + 'dbSQLite.db', directory: this.phoneFS, toDirectory: this.phoneFS }; const rNRes = yield this.renameExistBU(rNOpts); if (rNRes.result) {
                this.logger.info('[fileServ|dbbuDownload|RenameOldBU] (SUCCESS) - Renamed Existing BU to OLD...');
                return Promise.resolve(true);
            }
            else {
                this.logger.info('[fileServ|dbbuDownload|RenameOldBU] (ERROR) - Error Renaming Existing BU to OLD.');
                return Promise.resolve(false);
            } });
            const undoRename = () => (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () { const rNOpts = { from: 'Sheriff/backups/OLD' + uUK + 'dbSQLite.db', to: 'Sheriff/backups/' + uUK + 'dbSQLite.db', directory: this.phoneFS, toDirectory: this.phoneFS }; const rNRes = yield this.renameExistBU(rNOpts); if (rNRes.result) {
                this.logger.info('[fileServ|dbbuDownload|UndoRenameOldBU] (SUCCESS) - Renamed Existing BU [REMOVED OLD].');
                return Promise.resolve(true);
            }
            else {
                this.logger.info('[fileServ|dbbuDownload|UndoRenameOldBU] (ERROR) - Error Removing OLD from Existing BU Filename.');
                return Promise.resolve(false);
            } });
            // Check for Existing BU 
            let existBU = false;
            const statExistBU = yield this.stat(this.phoneFS, this.buDir + uUK + 'dbSQLite.db');
            statExistBU.result ? existBU = true : existBU = false;
            // Rename Existing BU (OLD) if Exists
            if (existBU) {
                yield doRename();
            }
            ;
            // Attempt Server BU Download
            const sUri = 'file:///sdcard/Android/data/dev.zer0ne.sheriff/files/Sheriff/backups/' + uUK + 'dbSQLite.db';
            try {
                const dlRes = yield this.shttp.downloadFile('https://zer0ne.dev/sheriff/up/uploads/' + uUK + 'dbSQLite.db', null, null, sUri);
                // If DL Successful, get Stats/Timestamp & Delete OLD BU
                if (dlRes.isFile) {
                    const newBUStatRes = yield this.stat(this.appFS, 'Sheriff/backups/' + uUK + 'dbSQLite.db');
                    let newBUObj = { rname: uUK + 'dbSQLite.db', nname: 'dbSQLite.db', uri: newBUStatRes.data.uri, rsize: newBUStatRes.data.size, nsize: null, rdate: null, ndate: null, ago: null, store: 'both' };
                    newBUObj.nsize = this.niceBytes(newBUStatRes.data.size);
                    let buDate;
                    const serverBUDate = yield this.getDBBUTS(uUK);
                    if (serverBUDate !== 'error') {
                        buDate = serverBUDate;
                    }
                    else {
                        buDate = this.dT.tD(newBUStatRes.data.mtime);
                    }
                    ;
                    newBUObj.rdate = buDate;
                    newBUObj.ndate = this.dT.format(buDate, 'd MMM yyyy h:mma');
                    newBUObj.ago = this.dT.fDtN(buDate);
                    // Delete OLD BU
                    const delOLD = yield this.fileDelete(this.phoneFS, 'Sheriff/backups/OLD' + uUK + 'dbSQLite.db');
                    if (delOLD.result) {
                        this.logger.info('[fileServ|quickDBDownload|deleteOLD] (SUCCESS) Deleted Old BU');
                    }
                    else {
                        this.logger.info('[fileServ|quickDBDownload|deleteOLD] (FAIL) Failed to Delete Old BU');
                    }
                    ;
                    // Return New BU File Info
                    return Promise.resolve({ result: true, data: newBUObj });
                    // If DL Not Exist or Fail Undo Rename OLD BU & Return Fail
                }
                else {
                    // If ExistBU TRUE - Undo Rename, get Stats/TS & Return Local BU File Info
                    if (existBU) {
                        const rNUDRes = yield undoRename();
                        if (rNUDRes) {
                            this.logger.info('[fileRes|dbbuDownload|UndoRename) (SUCCESS): OLD Local BU Renamed - OK - Using/Returning That...');
                            const oldBUStatRes = yield this.stat(this.appFS, 'Sheriff/backups/' + uUK + 'dbSQLite.db');
                            let oldBUObj = { rname: uUK + 'dbSQLite.db', nname: 'dbSQLite.db', uri: oldBUStatRes.data.uri, rsize: oldBUStatRes.data.size, nsize: null, rdate: null, ndate: null, ago: null, store: 'local' };
                            oldBUObj.nsize = this.niceBytes(oldBUStatRes.data.size);
                            oldBUObj.rdate = this.dT.tD(oldBUStatRes.data.mtime);
                            oldBUObj.ndate = this.dT.format(oldBUObj.rdate, 'd MMM yyyy h:mma');
                            oldBUObj.ago = this.dT.fDtN(oldBUObj.rdate);
                            return Promise.resolve({ result: true, data: oldBUObj });
                        }
                        else {
                            this.logger.info('[fileRes|dbbuDownload|UndoRename) (FAILED): Failed to Undo Rename of OLD Local BU - Returning No BU.');
                            return Promise.resolve({ result: false, data: 404 });
                        }
                        // ELSE Return Fail - NK Reason
                    }
                    else {
                        this.logger.info('[fileRes|dbbuDownload) Cloud DL 404 & No OLD Local BU Found - Returning No BU.');
                        return Promise.resolve({ result: false, data: 404 });
                    }
                }
            }
            catch (err) {
                if (existBU) {
                    const rNUDRes = yield undoRename();
                    if (rNUDRes) {
                        this.logger.info('[fileRes|dbbuDownload|UndoRename) (SUCCESS): OLD Local BU Renamed - OK - Using/Returning That...');
                        const oldBUStatRes = yield this.stat(this.appFS, 'Sheriff/backups/' + uUK + 'dbSQLite.db');
                        let oldBUObj = { rname: uUK + 'dbSQLite.db', nname: 'dbSQLite.db', uri: oldBUStatRes.data.uri, rsize: oldBUStatRes.data.size, nsize: null, rdate: null, ndate: null, ago: null, store: 'local' };
                        oldBUObj.nsize = this.niceBytes(oldBUStatRes.data.size);
                        oldBUObj.rdate = this.dT.tD(oldBUStatRes.data.mtime);
                        oldBUObj.ndate = this.dT.format(oldBUObj.rdate, 'd MMM yyyy h:mma');
                        oldBUObj.ago = this.dT.fDtN(oldBUObj.rdate);
                        return Promise.resolve({ result: true, data: oldBUObj });
                    }
                    else {
                        this.logger.info('[fileRes|dbbuDownload|UndoRename) (FAILED): Failed to Undo Rename of OLD Local BU - Returning No BU.');
                        return Promise.resolve({ result: false, data: err });
                    }
                    // ELSE Return Fail - NK Reason
                }
                else {
                    this.logger.info('[fileRes|dbbuDownload) Cloud DL 404 & No OLD Local BU Found - Returning No BU.');
                    return Promise.resolve({ result: false, data: err });
                }
            }
        });
    }
};
FileSystemService.ctorParameters = () => [
    { type: _ionic_native_file_chooser_ngx__WEBPACK_IMPORTED_MODULE_9__.FileChooser },
    { type: _events_service__WEBPACK_IMPORTED_MODULE_8__.EventsService },
    { type: _ionic_native_http_ngx__WEBPACK_IMPORTED_MODULE_5__.HTTP },
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_13__.NGXLogger },
    { type: _storage_service__WEBPACK_IMPORTED_MODULE_6__.StorageService },
    { type: _ionic_native_file_transfer_ngx__WEBPACK_IMPORTED_MODULE_1__.FileTransfer },
    { type: _ionic_native_file_ngx__WEBPACK_IMPORTED_MODULE_2__.File },
    { type: _ionic_native_file_path_ngx__WEBPACK_IMPORTED_MODULE_3__.FilePath },
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_14__.HttpClient },
    { type: src_app_services_datetime_service__WEBPACK_IMPORTED_MODULE_0__.DateTimeService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_15__.Platform }
];
FileSystemService = (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_16__.Injectable)({ providedIn: 'root' })
    //////////////////////////////////////////////////////
], FileSystemService);



/***/ }),

/***/ 19446:
/*!**********************************************!*\
  !*** ./src/app/services/firebase.service.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FirebaseService": function() { return /* binding */ FirebaseService; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var src_app_services_detail_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! src/app/services/detail.service */ 52153);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var _datetime_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./datetime.service */ 12826);
/* harmony import */ var _storage_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./storage.service */ 71188);
/* harmony import */ var _angular_fire_compat_auth__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/fire/compat/auth */ 1325);
/* harmony import */ var _angular_fire_compat_firestore__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/fire/compat/firestore */ 52182);
/* harmony import */ var _angular_fire_compat_storage__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/fire/compat/storage */ 43893);
/* harmony import */ var firebase_compat_app__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! firebase/compat/app */ 37841);
/* harmony import */ var _deputy_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./deputy.service */ 22092);
/* harmony import */ var _events_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./events.service */ 80106);
/* harmony import */ var _sqlite_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sqlite.service */ 90636);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs/operators */ 68939);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs/operators */ 68307);
/* harmony import */ var _filesystem_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./filesystem.service */ 22904);
/* harmony import */ var _profileData__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./profileData */ 92472);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash */ 23815);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_9__);

















;
/////////////////////////////////////////////////////
let FirebaseService = class FirebaseService {
    /////////////////////////////////////////////////////
    constructor(logger, fireStore, fireStorage, fireAuth, dT, storeServ, deputy, evServ, dS, sqlServ, fileServ) {
        this.logger = logger;
        this.fireStore = fireStore;
        this.fireStorage = fireStorage;
        this.fireAuth = fireAuth;
        this.dT = dT;
        this.storeServ = storeServ;
        this.deputy = deputy;
        this.evServ = evServ;
        this.dS = dS;
        this.sqlServ = sqlServ;
        this.fileServ = fileServ;
        /////////////////////////////////////////////////////
        /////////////////////////////////////////////////////
        // FB User Vars
        this.fbUser = null;
        this.fbLoggedIn = false;
        this.fbUId = null;
        this.fbMsgToken = null;
        this.fbToken = null;
        this.fbProfileUpdating = false;
        this.tLoopIsActive = false;
        /////////////////////////////////////////////////////
        this.fixLoopCount = 0;
        // FB Storage Vars
        this.settingsDocId = null;
        this.appSettingsObj = null;
        this.fileUploads = [];
        this.fbStoreDirs = { db: 'dbBackups/', image: 'imageFiles/', other: 'otherFiles/' };
        this.fileLists = { db: [], image: [], other: [] };
        this.gFFLInProg = false;
        this.tempUPO = null;
        this.loginMethodKey = 'notsignedin';
        this.isFileULing = false;
        this.isFileULed = false;
        this.dbCollection = fireStore.collection('dbCollection');
        this.imageCollection = fireStore.collection('imageCollection');
        this.otherCollection = fireStore.collection('otherCollection');
        this.myFiles = this.dbCollection.valueChanges();
        fireAuth.onAuthStateChanged((oacFBUser) => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('🔥 [fireServ|authState] \uD83D\uDD25\uD83D\uDE92\uD83E\uDDEF (EVENT) AuthState Changed:');
            let uJ;
            oacFBUser !== null ? uJ = oacFBUser.toJSON() : uJ = null;
            if (uJ && uJ.uid) {
                if (!this.fbLoggedIn) {
                    this.fbLoggedIn = true;
                }
                ;
                this.fbUser = oacFBUser;
                this.fbUId = uJ.uid;
                this.fbToken = (yield oacFBUser.getIdToken(false));
                this.logger.info('🔥 [fireServ|authState] 🟢 isLoggedIn: ' + this.fbLoggedIn + ', liMethodKey: ' + this.loginMethodKey);
                if (this.loginMethodKey === 'fctokenfet' || this.loginMethodKey === 'fctokendpt') {
                    this.tempUPO = null;
                }
                ;
                this.evServ.publish('fbUserAccount', { isLoggedIn: this.fbLoggedIn, liMethodKey: this.loginMethodKey });
                this.checkFireUserDoc();
                //this.checkProfile();
                //this.checkRefreshLoop();
            }
            else {
                this.logger.info('(onAuthStateChanged) - Signed Out || No User Data');
                if (this.fbLoggedIn) {
                    this.fbLoggedIn = false;
                }
                ;
                this.evServ.publish('fbUserAccount', { isLoggedIn: this.fbLoggedIn, liMethodKey: this.loginMethodKey });
            }
        }));
    }
    /////////////////////////////////////////////////////
    ///// AUTHENTICATION
    /////////////////////////////////////////////////////
    registerUser(upObj) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('🔥 [fireServ|registerUser] ()...');
            if (!this.fbLoggedIn) {
                try {
                    this.loginMethodKey = 'upregister';
                    yield this.fireAuth.createUserWithEmailAndPassword(upObj.u, upObj.p);
                    this.logger.info('🔥 [fireServ|registerUser] (Success) Registered OK!');
                    return Promise.resolve(true);
                }
                catch (rUErr) {
                    this.loginMethodKey = 'notsignedin';
                    if (rUErr.code === 'auth/email-already-in-use') {
                        const liURes = yield this.loginUserEmail(upObj);
                        if (liURes) {
                            return Promise.resolve(true);
                        }
                        else {
                            return Promise.resolve(false);
                        }
                    }
                    else {
                        this.logger.info('🔥 [fireServ|registerUser] (Error) Registration Failed: ' + rUErr.code);
                        return Promise.resolve(false);
                    }
                }
            }
            else {
                if (!this.fireAuth.currentUser) {
                    const rUTryAgainRes = yield this.registerUser(upObj);
                    if (rUTryAgainRes) {
                        return Promise.resolve(true);
                    }
                    else {
                        return Promise.resolve(false);
                    }
                    ;
                }
                else {
                    this.logger.info('🔥 [fireServ|registerUser] (Warning) fireUser (' + this.fbUser.email + ') already logged-in');
                    return Promise.resolve(true);
                }
            }
        });
    }
    /////////////////////////////////////////////////////
    loginUserEmail(upObj) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('🔥 [fireServ|loginUserEmail] ()...');
            if (!this.fbLoggedIn) {
                try {
                    this.loginMethodKey = 'uplogin';
                    yield this.fireAuth.signInWithEmailAndPassword(upObj.u, upObj.p);
                    this.logger.info('🔥 [fireServ|loginUserEmail] (Success) LoginUserEmail OK!');
                    return Promise.resolve(true);
                }
                catch (liUErr) {
                    this.loginMethodKey = 'notsignedin';
                    if (liUErr.code === 'auth/user-not-found') {
                        const rURes = yield this.registerUser(upObj);
                        if (rURes) {
                            return Promise.resolve(true);
                        }
                        else {
                            return Promise.resolve(false);
                        }
                    }
                    else {
                        this.logger.info('🔥 [fireServ|loginUserEmail] (Error) Login Failed: ' + liUErr.code);
                        return Promise.resolve(false);
                    }
                }
            }
            else {
                if (!this.fireAuth.currentUser) {
                    this.fbLoggedIn = false;
                    const luTryAgainRes = yield this.loginUserEmail(upObj);
                    if (luTryAgainRes) {
                        return Promise.resolve(true);
                    }
                    else {
                        return Promise.resolve(false);
                    }
                    ;
                }
                else {
                    this.logger.info('🔥 [fireServ|loginUserEmail] (Warning) fireUser (' + this.fbUser.email + ') already logged-in');
                    return Promise.resolve(true);
                }
            }
        });
    }
    /////////////////////////////////////////////////////
    getAuthItem(item) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const storeO = () => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
                if (this.deputy.uUK !== null) {
                    const sO = yield this.storeServ.getObject(this.deputy.uUK + 'DPAuth');
                    if (sO) {
                        return Promise.resolve({ result: true, data: sO });
                    }
                    else {
                        return Promise.resolve({ result: false });
                    }
                }
                else {
                    return Promise.resolve({ result: false });
                }
            });
            const dbO = () => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
                if (this.deputy.uUK !== null && (yield this.dS.getADBSetupDone())) {
                    let doClose = false;
                    if (!this.dS.getADBIsOpen()) {
                        yield this.sqlServ.openAuth();
                        doClose = true;
                    }
                    ;
                    const getUAItemRes = yield this.sqlServ.getADBItem(null);
                    if (doClose) {
                        yield this.sqlServ.closeAuth();
                    }
                    ;
                    if (getUAItemRes.result) {
                        return Promise.resolve({ result: true, data: getUAItemRes.data });
                    }
                    else {
                        return Promise.resolve({ result: false });
                    }
                }
                else {
                    return Promise.resolve({ result: false });
                }
            });
            if (item === 'dptoken') {
                if (this.deputy.Client.auth.access_token !== null) {
                    return Promise.resolve({ result: true, data: this.deputy.Client.auth.access_token });
                }
                else {
                    const storeRes = yield storeO();
                    if (storeRes.result) {
                        return Promise.resolve({ result: true, data: storeRes.data.access_token });
                    }
                    else {
                        const dbRes = yield dbO();
                        if (dbRes.result) {
                            return Promise.resolve({ result: true, data: dbRes.data.dp_token });
                        }
                        else {
                            return Promise.resolve({ result: false });
                        }
                    }
                }
            }
            else if (item === 'up') {
                if (this.tempUPO !== null) {
                    return Promise.resolve({ result: true, data: this.tempUPO });
                }
                else {
                    const dbRes = yield dbO();
                    if (dbRes.result) {
                        return Promise.resolve({ result: true, data: { u: dbRes.data.dp_username, p: dbRes.data.dp_password } });
                    }
                    else {
                        return Promise.resolve({ result: false });
                    }
                }
            }
        });
    }
    /////////////////////////////////////////////////////
    setFEToken(msObj, feT) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            if (msObj.l) {
                this.deputy.SServer.FCT.fe_token = feT;
            }
            ;
            if (msObj.s) {
                this.storeServ.setItem('currentFEToken', feT);
            }
            ;
            if (msObj.d) {
                if ((yield this.dS.getUDBSetupDone()) && this.dS.getUDBIsOpen()) {
                    yield this.sqlServ.setFEToken(feT);
                }
            }
            ;
            return Promise.resolve(true);
        });
    }
    /////////////////////////////////////////////////////
    getFEToken() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            let feTs = [], feT, mustSet = { l: false, s: false, d: false };
            const localRes = this.deputy.SServer.FCT.fe_token;
            if (localRes) {
                feTs.push(localRes);
            }
            else {
                mustSet.l = true;
            }
            ;
            const storeRes = yield this.storeServ.getItem('currentFEToken');
            if (storeRes) {
                feTs.push(storeRes);
            }
            else {
                mustSet.s = true;
            }
            ;
            if ((yield this.dS.getUDBSetupDone()) && this.dS.getUDBIsOpen()) {
                const dbRes = yield this.sqlServ.getFEToken();
                if (dbRes.result && dbRes.data && dbRes.data.length === 16) {
                    feTs.push(dbRes.data);
                }
                else {
                    mustSet.d = true;
                }
            }
            ;
            if (feTs.length > 0) {
                let allS = true;
                for (let i = 0; i < feTs.length; i++) {
                    if (!feTs.every(id => id === feTs[i])) {
                        allS = false;
                    }
                }
                ;
                if (!allS) {
                    mustSet.l = true;
                    mustSet.s = true;
                    mustSet.d = true;
                    feT = String(lodash__WEBPACK_IMPORTED_MODULE_9__.head(lodash__WEBPACK_IMPORTED_MODULE_9__(feTs).countBy().entries().maxBy(lodash__WEBPACK_IMPORTED_MODULE_9__.last)));
                }
                else {
                    feT = feTs[0];
                }
                ;
                if (mustSet.l || mustSet.s || mustSet.d) {
                    yield this.setFEToken(mustSet, feT);
                }
                ;
                return Promise.resolve({ result: true, data: feT });
            }
            else {
                return Promise.resolve({ result: false });
            }
        });
    }
    /////////////////////////////////////////////////////
    loginCustomToken() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[fireServ|loginCustToken] ()...');
            if (!this.fbLoggedIn) {
                let FET = null, FCT = null;
                const gFETokenRes = yield this.getFEToken();
                if (gFETokenRes.result) {
                    FET = gFETokenRes.data;
                }
                else {
                    const getDPTokenRes = yield this.getAuthItem('dptoken');
                    if (getDPTokenRes.result) {
                        FET = getDPTokenRes.data;
                        this.loginMethodKey = 'fctokendpt';
                    }
                    else {
                        FET = null;
                    }
                }
                ;
                if (FET !== null) {
                    const getFCTRes = yield this.deputy.getFCT(FET);
                    if (getFCTRes.result) {
                        FCT = getFCTRes.data.custom_token;
                        if (this.loginMethodKey === 'ctokendpt') {
                            yield this.getFEToken();
                        }
                    }
                    else {
                        FCT = null;
                    }
                    ;
                    if (FCT !== null) {
                        try {
                            this.loginMethodKey = 'fctokenfet';
                            yield this.fireAuth.signInWithCustomToken(FCT);
                            this.logger.info('[fireServ|loginCustomToken] 🔥🟢🎟️ (LOGIN SUCCESS): Method = Custom Token');
                            return Promise.resolve(true);
                        }
                        catch (liCTErr) {
                            this.loginMethodKey = 'notsignedin';
                            this.logger.info('[fireServ|loginCustomToken] 🔥🟠🎟️ (LOGIN WARNING): CUSTOM TOKEN FAILED: ' + JSON.stringify(liCTErr));
                            return Promise.resolve(false);
                        }
                    }
                    else {
                        this.loginMethodKey = 'notsignedin';
                        this.logger.info('[fireServ|loginCustomToken] 🔥🟠🎟️ (LOGIN WARNING): CUSTOM TOKEN FAILED - getFCT(token) returned result:false');
                        return Promise.resolve(false);
                    }
                }
                else {
                    this.loginMethodKey = 'notsignedin';
                    this.logger.info('[fireServ|loginCustomToken] 🔥🟠🎟️ (LOGIN WARNING): CUSTOM TOKEN FAILED - No Saved FET||DPT');
                    return Promise.resolve(false);
                }
            }
            else {
                if (!this.fireAuth.currentUser) {
                    this.fbLoggedIn = false;
                    const lctTryAgainRes = yield this.loginCustomToken();
                    if (lctTryAgainRes) {
                        return Promise.resolve(true);
                    }
                    else {
                        return Promise.resolve(false);
                    }
                    ;
                }
                else {
                    this.logger.info('🔥 [fireServ|loginCustomToken] (Warning) fireUser (' + this.fbUser.email + ') already logged-in');
                    return Promise.resolve(true);
                }
            }
        });
    }
    /////////////////////////////////////////////////////
    logoutUser() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('🔥 [fireServ|logoutUser] ()...');
            let oldlMK = this.loginMethodKey;
            if (this.fbLoggedIn) {
                try {
                    this.loginMethodKey = 'notsignedin';
                    yield this.fireAuth.signOut();
                    this.logger.info('🔥 [fireServ|logoutUser] (Success) Logged out OK!');
                    return Promise.resolve(true);
                }
                catch (loUErr) {
                    this.loginMethodKey = oldlMK;
                    this.logger.info('🔥 [fireServ|logoutUser] (Error) Failed to Logout: ' + JSON.stringify(loUErr));
                    return Promise.resolve(false);
                }
            }
            else {
                if (this.fireAuth.currentUser) {
                    this.fbLoggedIn = true;
                    const loTryAgainRes = yield this.logoutUser();
                    if (loTryAgainRes) {
                        return Promise.resolve(true);
                    }
                    else {
                        return Promise.resolve(false);
                    }
                    ;
                }
                else {
                    this.logger.info('🔥 [fireServ|registerUser] (Warning) User is NOT logged-in');
                    this.fbLoggedIn = false;
                    Promise.resolve(true);
                }
            }
        });
    }
    /////////////////////////////////////////////////////
    getUser() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('🔥 [fireServ|getUser] ()...');
            this.fbUser = (yield this.fireAuth.currentUser);
            return Promise.resolve(this.fbUser);
        });
    }
    /////////////////////////////////////////////////////
    refreshToken() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('🔥 [fireServ|refreshToken] ()...');
            (yield this.fireAuth.currentUser).getIdToken(true);
        });
    }
    /////////////////////////////////////////////////////
    checkRefreshLoop() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('🔥 [fireServ|checkRefreshLoop] (Started)...');
            let tokenCheckLoop;
            const doCheck = () => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
                const fU = yield this.fireAuth.currentUser;
                const fUTokenRes = yield fU.getIdTokenResult(false);
                const expUTS = this.fbUser.multiFactor.user.stsTokenManager.expirationTime / 1000;
                const expDate = this.dT.Dut(expUTS);
                const nowDate = new Date();
                const nowUTS = this.dT.getUT(nowDate);
                const expInStr = this.dT.DifDurStr(expDate, nowDate);
                this.logger.info('🔥 [fireServ|checkTokenFresh] (Expires In): ' + expInStr);
                if ((expUTS - nowUTS) < 600) {
                    this.logger.info('🔥 [fireServ|checkTokenFresh] !!! REFRESHING FireBase Token...');
                    this.refreshToken();
                }
                else {
                    this.logger.info('🔥 [fireServ|checkTokenFresh] Token Fresh - Skipping Refresh.');
                }
            });
            if (!this.tLoopIsActive) {
                if (this.fbLoggedIn && this.fireAuth.currentUser !== null) {
                    this.tLoopIsActive = true;
                    tokenCheckLoop = setInterval(() => { doCheck(); }, 600000);
                }
                else {
                    clearInterval(tokenCheckLoop);
                }
                ;
            }
            ;
        });
    }
    /////////////////////////////////////////////////////
    checkProfile() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('🔥 [fireServ|checkProfile] ()...');
            if (!this.fbProfileUpdating) {
                let doneCount = 0;
                this.fbProfileUpdating = true;
                this.evServ.subscribe('allFBUPDone', () => {
                    doneCount++;
                    if (doneCount === 2) {
                        this.logger.info('🔥 [fireServ|checkProfile] Check Finished 2/2 - Unlocking...');
                        this.fbProfileUpdating = false;
                        this.evServ.destroy('allFBUPDone');
                    }
                    else {
                        this.logger.info('🔥 [fireServ|checkProfile] STAGE #' + doneCount + ' - Waiting...');
                    }
                });
                const verifyURLSub = this.evServ.subscribe('myAppUrlOpen', urlOEvent => {
                    let uO = urlOEvent;
                    this.logger.info('🔥 [fireServ|checkProfile] UrlOpenRes - [url]: ' + uO.url);
                });
                const verifyRestoreSub = this.evServ.subscribe('myAppRestoredResult', restResEvent => {
                    let rR = restResEvent;
                    for (const [key, value] of Object.entries(rR)) {
                        if (value && value !== null) {
                            this.logger.info('🔥 [fireServ|checkProfile] RestoredRes - [' + key + ']: ' + value);
                        }
                    }
                });
                //------------------------------
                const fb2DBArr = [{ fb: 'displayName', db: 'dname' }, { fb: 'email', db: 'email' }, { fb: 'phoneNumber', db: 'phone' }, { fb: 'photoURL', db: null }];
                let webPic;
                const wPRes = yield this.deputy.getMyWebPhoto();
                if (wPRes.result) {
                    webPic = wPRes.data;
                }
                ;
                let defaultP = { dname: this.dS.meName, email: this.dS.meEmail, phone: this.dS.mePhone, photo: webPic };
                const fbU = (yield this.fireAuth.currentUser);
                let myP = null;
                let telPref = null;
                let didChange = false;
                let newPO = {};
                if ((yield this.sqlServ.hasProfile())) {
                    myP = (yield this.sqlServ.getProfile()).data;
                }
                else {
                    myP = defaultP;
                }
                ;
                if (myP.hasOwnProperty('phone') && myP.hasOwnProperty('country') && myP.phone.charAt(0) !== '+') {
                    const cORes = yield this.sqlServ.getSingleCountry(myP['country']);
                    if (cORes.result) {
                        const cN = cORes.data['Country'];
                        for (const [key, value] of Object.entries(_profileData__WEBPACK_IMPORTED_MODULE_8__.c2DCObj)) {
                            const cK = key.toString();
                            if (cK === cN) {
                                telPref = value.toString();
                            }
                        }
                    }
                }
                ;
                if (telPref !== null) {
                    const cPrefNoP = telPref.replace('+', '');
                    let nowPhoneStr = myP['phone'].replace(' ', '').replace('(', '').replace(')', '').trim();
                    let finalPStr;
                    if (nowPhoneStr.substring(0, 2) === cPrefNoP) {
                        finalPStr = '+' + nowPhoneStr;
                    }
                    else {
                        finalPStr = telPref + nowPhoneStr;
                    }
                    ;
                    myP['phone'] = finalPStr;
                }
                ;
                if (myP !== null && fbU !== null && fbU.providerData.length > 0) {
                    const myPO = myP;
                    const fbPO = fbU.providerData[0];
                    for (let i = 0; i < fb2DBArr.length; i++) {
                        const myK = fb2DBArr[i]['db'];
                        const myV = myPO[myK];
                        const fbK = fb2DBArr[i]['fb'];
                        const fbV = fbPO[fbK];
                        if (fbK !== 'photoURL') {
                            if (fbV !== myV) {
                                newPO[fbK] = myV;
                                didChange = true;
                            }
                            else {
                                newPO[fbK] = fbV;
                            }
                        }
                        else {
                            if (fbK !== webPic) {
                                newPO[fbK] = webPic;
                                didChange = true;
                            }
                            else {
                                newPO[fbK] = fbV;
                            }
                        }
                    }
                    ;
                    if (didChange) {
                        fbU.updateProfile(newPO)
                            .then(() => { this.logger.info('🔥 [fireServ|checkProfile] (Profile Updated) - SUCCESS!'); this.evServ.publish('allFBUPDone', 'updateP'); })
                            .catch(() => { this.logger.info('🔥 [fireServ|checkProfile] (Error) Updating Profile Failed'); this.evServ.publish('allFBUPDone', 'updateP'); });
                    }
                    else {
                        this.logger.info('🔥 [fireServ|checkProfile] (Unchanged) Skipping...');
                    }
                }
                else {
                    this.logger.info('🔥 [fireServ|checkProfile] (Error) Failed to Retrieve FB/SQL Profile(s)');
                    this.evServ.publish('allFBUPDone', 'updateP');
                }
                ;
                //------------------------------
                if (!fbU.emailVerified && !this.loginMethodKey.includes('fctoken')) {
                    const verifyActiveSub = this.evServ.subscribe('myAppStateActive', tf => {
                        if (tf) {
                            setTimeout(() => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
                                const newCUser = (yield this.fireAuth.currentUser);
                                newCUser.reload().then(() => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
                                    this.evServ.showToast('success', 'Email Successfully Verified');
                                    yield this.logoutUser();
                                    setTimeout(() => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
                                        this.evServ.publish('allFBUPDone', 'emailV');
                                        yield this.loginCustomToken();
                                        verifyActiveSub.unsubscribe();
                                    }), 1000);
                                }));
                            }), 1000);
                        }
                    });
                    yield fbU.sendEmailVerification()
                        .then(() => { this.evServ.showToast('email', 'Verification Sent: ' + this.dS.meEmail); })
                        .catch(() => { this.evServ.showToast('error', 'Error Verifying Email'); this.evServ.publish('allFBUPDone', 'emailV'); });
                }
                else {
                    verifyURLSub.unsubscribe();
                    verifyRestoreSub.unsubscribe();
                    this.evServ.publish('allFBUPDone', 'emailV');
                }
            }
            else {
                this.logger.info('🔥 [fireServ|checkProfile] Already Checking - No Doubles - Ignoring Duplicate Request.');
            }
        });
    }
    /////////////////////////////////////////////////////
    ///// STORAGE
    /////////////////////////////////////////////////////
    gMData(filePath) { const sRef = firebase_compat_app__WEBPACK_IMPORTED_MODULE_3__.default.storage().ref(); let fRef = sRef.child(filePath); fRef.getMetadata().then(metaD => { return metaD; }).catch(() => { return null; }); }
    cloudErr(code) { const errMsg = { 'storage/unknown': 'Unknown Error', 'storage/object-not-found': 'No Object Exists', 'storage/bucket-not-found': 'No Bucket Configured', 'storage/project-not-found': 'No Project Configured', 'storage/quota-exceeded': 'Quota Exceeded', 'storage/unauthenticated': 'User Unauthenticated', 'storage/unauthorized': 'User Unauthorized', 'storage/retry-limit-exceeded': 'Operation Timeout', 'storage/invalid-checksum': 'Checksum Mismatch', 'storage/canceled': 'Canceled Operation', 'storage/invalid-event-name': 'Invalid Event Name', 'storage/invalid-url': '	Invalid URL provided', 'storage/invalid-argument': 'Invalid Upload Argument', 'storage/no-default-bucket': 'No Bucket Setup', 'storage/cannot-slice-blob': 'Local File Changed', 'storage/server-file-wrong-size': 'Client/Server Filesize Mismatch' }; return errMsg[code]; }
    /////////////////////////////////////////////////////
    getFSFilesList(cat) {
        if (!this.gFFLInProg) {
            this.logger.info('🔥 [fireServ|getFirestoreFilesList] (' + cat + ')...');
            this.gFFLInProg = true;
            this.fileLists[cat] = [];
            let storeDirRef = this.fireStorage.storage.ref(this.fbStoreDirs[cat]);
            storeDirRef.listAll().then(result => {
                result.items.forEach((fFile) => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
                    const fFMD = yield fFile.getMetadata();
                    const fFListObj = { fileRef: fFile, fileCat: cat, fileName: fFile.name, filePath: fFile.fullPath, fileType: fFMD.contentType, fileSize: fFMD.size, fileDate: fFMD.updated };
                    this.fileLists[cat].push(fFListObj);
                }));
                this.evServ.publish('fireServGetList', { listCat: cat, listResult: true, listData: this.fileLists[cat] });
            }).catch(() => { this.evServ.publish('fireServGetList', { listCat: cat, listResult: false }); });
        }
        else {
            this.logger.info('🔥 [fireServ|getFSFilesList] (Skipping) Already In Progress.');
        }
    }
    /////////////////////////////////////////////////////
    checkFSDBBU() {
        this.logger.info('🔥 [fireServ|getFSDBBU] ()...');
        const userDBBURef = this.fireStorage.storage.ref().child('dbBackups/' + this.deputy.userEmail + '.db');
        userDBBURef.getMetadata().then((meta) => {
            const buMeta = meta;
            userDBBURef.getDownloadURL().then((dlurl) => {
                const buURL = dlurl;
                this.evServ.publish('checkFSDBBU', { result: true, data: { meta: buMeta, dlurl: buURL } });
            }).catch((error) => { this.evServ.publish('checkFSDBBU', { result: false, data: error.code }); });
        }).catch((error) => { this.evServ.publish('checkFSDBBU', { result: false, data: error.code }); });
    }
    /////////////////////////////////////////////////////
    storeFilesFirebase(cat, ulFile) {
        const fileId = this.fireStore.createId();
        let fCollectionPty;
        if (cat === 'db') {
            fCollectionPty = 'dbCollection';
        }
        else if (cat === 'image') {
            fCollectionPty = 'imageCollection';
        }
        else {
            fCollectionPty = 'otherCollection';
        }
        ;
        this[fCollectionPty].doc(fileId).set(ulFile)
            .then(sffRes => { this.logger.info('[fireStore|storeFilesFirebase] (Success): ' + sffRes); })
            .catch(sffErr => { this.logger.info('[fireStore|storeFilesFirebase] (Error): ' + sffErr); });
    }
    /////////////////////////////////////////////////////
    uploadFile(cat, event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('🔥 [fireServ|uploadFile] (' + cat + ',event)...');
            const file = event.item(0);
            // File Validation /////
            const sufBL = ['java-archive', 'javascript', 'zip', 'gzip', 'vnd-rar', '7z', 'vnd.ms-excel', 'vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'x-tar', 'x-shockwave', 'x-sh'];
            const preL = ['image', 'text', 'audio', 'video'];
            const sufL = ['x-sqlite3', 'vnd-sqlite3', 'json', 'ld+json', 'pdf'];
            let tPre = file.type.split('/')[0];
            let tSuf = file.type.split('/')[1];
            if ((!preL.includes(tPre) && !sufL.includes(tSuf)) || sufBL.includes(tSuf)) {
                this.evServ.showToast('error', 'Unsupported File Type');
                return;
            }
            ;
            this.isFileULing = true;
            this.isFileULed = false;
            // Storage Path /////
            const getSDir = (cat) => { return this.fbStoreDirs[cat]; };
            let catN;
            let storePath;
            if (tSuf === sufL[0] || tSuf === sufL[1]) {
                catN = 'db';
            }
            else if (tPre === 'image') {
                catN = 'image';
            }
            else {
                catN = 'other';
            }
            ;
            storePath = getSDir(catN);
            // File Name /////
            const genFileName = (cat) => {
                const fbUIDStr = this.fbUId;
                const dateTStr = this.dT.format(new Date(), 'ddMyyHHmmssSS');
                let catSuffix;
                if (cat === 'db') {
                    catSuffix = 'dBBackup';
                }
                else if (cat === 'image') {
                    catSuffix = 'Image';
                }
                else {
                    catSuffix = 'File';
                }
                ;
                return dateTStr + '-' + catSuffix + '-' + fbUIDStr;
            };
            const getFExt = file.name.split('.').pop();
            const getFName = genFileName(catN);
            const fileName = getFName + '.' + getFExt;
            // File Ref /////
            const filePathNameExt = storePath + fileName;
            const fileRef = this.fireStorage.ref(filePathNameExt);
            // Upload Task /////
            this.ulTask = this.fireStorage.upload(filePathNameExt, file);
            // Show Progress /////
            this.ulPercVal = this.ulTask.percentageChanges();
            this.evServ.publish('ulPV', this.ulPercVal);
            this.ulTrackSnapshot = this.ulTask.snapshotChanges().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.finalize)(() => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
                // Retrieve Uploaded File Storage Path
                const ulFileMeta = yield fileRef.getMetaData();
                this.ulFileURL = fileRef.getDownloadURL();
                this.ulFileURL.subscribe(ufsPath => {
                    this.storeFilesFirebase(cat, { fileRef: fileRef, fileCat: cat, fileName: fileName, filePath: ufsPath, fileType: ulFileMeta.contentType, fileSize: ulFileMeta.size, fileDate: ulFileMeta.updated });
                    this.isFileULing = false;
                    this.isFileULed = true;
                }, ufsErr => { this.logger.info('🔥 [fireServ|uploadFile] (Error): ' + ufsErr); });
            })), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.tap)(snap => {
                this.specFSize = snap.totalBytes;
                this.evServ.publish('snap', snap.totalBytes);
            }));
        });
    }
    /////////////////////////////////////////////////////
    uploadFSDBBU(fileData) {
        this.logger.info('🔥 [fireServ|getFSDBBU] ()...');
        const ulProgEv = (evState, evData) => { this.evServ.publish('dbbuULProg', { event: evState, data: evData }); };
        const dbbuFileData = fileData;
        const dbbuMeta = { contentType: 'application/x-sqlite3' };
        const dbbuStoreRef = this.fireStorage.storage.ref().child('dbBackups/' + this.deputy.userEmail + '.db');
        let dbbuUploadTask = dbbuStoreRef.put(dbbuFileData, dbbuMeta);
        dbbuUploadTask.on(firebase_compat_app__WEBPACK_IMPORTED_MODULE_3__.default.storage.TaskEvent.STATE_CHANGED, (snapshot) => {
            let t = snapshot.task;
            let md = snapshot.metadata;
            switch (snapshot.state) {
                case firebase_compat_app__WEBPACK_IMPORTED_MODULE_3__.default.storage.TaskState.RUNNING:
                    let ulP = (snapshot.bytesTransferred / snapshot.totalBytes);
                    ulProgEv('running', { task: t, meta: md, perc: ulP });
                    break;
                case firebase_compat_app__WEBPACK_IMPORTED_MODULE_3__.default.storage.TaskState.PAUSED:
                    ulProgEv('paused', { task: t, meta: md, perc: ulP });
                    break;
                case firebase_compat_app__WEBPACK_IMPORTED_MODULE_3__.default.storage.TaskState.SUCCESS:
                    ulProgEv('success', null);
                    break;
                case firebase_compat_app__WEBPACK_IMPORTED_MODULE_3__.default.storage.TaskState.ERROR:
                    ulProgEv('error', null);
                    break;
            }
        }, (error) => { const errMsg = this.cloudErr(error.code); this.logger.info('🔥 [fireServ|uploadFSDBBU] (Error): ' + errMsg); ulProgEv('errorData', errMsg); }, () => { (() => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () { let sDObj = { meta: null, dlurl: null }; sDObj.meta = yield dbbuUploadTask.snapshot.ref.getMetadata(); sDObj.dlurl = yield dbbuUploadTask.snapshot.ref.getDownloadURL(); ulProgEv('successData', sDObj); }))(); });
    }
    /////////////////////////////////////////////////////
    downloadFSDBBU(dlURL) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('🔥 [fireServ|getFSDBBU] ()...');
            const dlDBBURes = yield this.fileServ.dlFireDBBU(dlURL);
            this.evServ.publish('dlFSDBBU', dlDBBURes);
        });
    }
    /////////////////////////////////////////////////////
    deleteFSDBBU() {
        this.logger.info('🔥 [fireServ|deleteFSDBBU] ()...');
        const dbBUFileRef = this.fireStorage.storage.ref().child('dbBackups/' + this.deputy.userEmail + '.db');
        dbBUFileRef.delete()
            .then(() => { this.evServ.publish('delFSDBBU', true); })
            .catch((error) => {
            this.logger.info('🔥 [fireServ|deleteFSDBBU] (Error): ' + this.cloudErr(error.code));
            this.evServ.publish('delFSDBBU', false);
        });
    }
    /////////////////////////////////////////////////////
    ///// FIRESTORE
    /////////////////////////////////////////////////////
    setFireUserDoc(userEmail, dpAuthObj) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('🔥 [fireServ|setFireAuthDoc] (userEmail,DPAuthObj)...');
            if (this.fbLoggedIn) {
                let fireDoc = { dp_token: String(dpAuthObj.access_token), dp_refresh: String(dpAuthObj.refresh_token), dp_expires: String(dpAuthObj.expires_at), dp_domain: String(dpAuthObj.endpoint) };
                const consM = (r, uc, x) => { let xT; x !== null ? xT = ' ' + JSON.stringify(x) : xT = ''; const m = '🔥 [fireServ|setUpdateFireAuthDoc] (' + r + ') UserDoc ' + uc + ' for ' + userEmail + xT; return this.logger.info(m); };
                try {
                    yield this.fireStore.collection('users').doc(userEmail).update(fireDoc);
                    consM('SUCCESS', 'UPDATED', null);
                    return Promise.resolve(true);
                }
                catch (e) {
                    consM('ERROR', 'FAILED', e);
                    fireDoc['fcm_token'] = String('');
                    this.fireStore.collection('users').doc(String(userEmail)).set(fireDoc)
                        .then(() => { consM('SUCCESS', 'CREATED', null); return Promise.resolve(true); })
                        .catch(e => { consM('ERROR', 'FAILED', e); return Promise.resolve(false); });
                }
            }
            else {
                return Promise.resolve(false);
            }
        });
    }
    /////////////////////////////////////////////////////
    hasFireUserDoc() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            if (this.fbLoggedIn) {
                const userDocRef = this.fireStore.collection('users').doc(this.deputy.userEmail).ref;
                try {
                    const udSnap = yield userDocRef.get();
                    if (udSnap.exists) {
                        return Promise.resolve(true);
                    }
                    else {
                        return Promise.resolve(false);
                    }
                }
                catch (e) {
                    return Promise.resolve(false);
                }
            }
            else {
                return Promise.resolve(false);
            }
        });
    }
    /////////////////////////////////////////////////////
    checkFireUserDoc() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('🔥 [fireServ|checkFireUserDoc] ()...');
            if (this.fbLoggedIn) {
                const localAuth = () => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () { if (this.deputy.Client.auth.access_token !== null) {
                    return Promise.resolve({ r: true, d: this.deputy.Client.auth });
                }
                else {
                    return Promise.resolve({ r: false });
                } });
                const storeAuth = () => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () { if (this.deputy.uUK !== null) {
                    const sO = yield this.storeServ.getObject(this.deputy.uUK + 'DPAuth');
                    if (sO) {
                        return Promise.resolve({ r: true, d: sO });
                    }
                    else {
                        return Promise.resolve({ r: false });
                    }
                }
                else {
                    return Promise.resolve({ r: false });
                } });
                const dbAuth = () => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () { if (this.deputy.uUK !== null && (yield this.dS.getADBSetupDone())) {
                    let doClose = false;
                    if (!this.dS.getADBIsOpen()) {
                        yield this.sqlServ.openAuth();
                        doClose = true;
                    }
                    ;
                    const { result, data } = yield this.sqlServ.getADBItem('auth');
                    if (result) {
                        if (doClose) {
                            yield this.sqlServ.closeAuth();
                        }
                        ;
                        return Promise.resolve({ r: true, d: data });
                    }
                    else {
                        if (doClose) {
                            yield this.sqlServ.closeAuth();
                        }
                        ;
                        return Promise.resolve({ r: false });
                    }
                }
                else {
                    return Promise.resolve({ r: false });
                } });
                const localFCM = () => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () { if (this.fbMsgToken !== null) {
                    return Promise.resolve({ r: true, d: this.fbMsgToken });
                }
                else {
                    return Promise.resolve({ r: false });
                } });
                const storeFCM = () => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () { const sF = yield this.storeServ.getItem('fireMsgToken'); if (sF) {
                    return Promise.resolve({ r: true, d: sF });
                }
                else {
                    return Promise.resolve({ r: false });
                } });
                const dbFCM = () => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
                    if ((yield this.dS.getUDBSetupDone()) && this.dS.getUDBIsOpen()) {
                        const dbF = yield this.sqlServ.getFCMToken();
                        if (dbF.result && dbF.data !== null) {
                            return Promise.resolve({ r: true, d: dbF.data });
                        }
                        else {
                            return Promise.resolve({ r: false });
                        }
                    }
                    else {
                        return Promise.resolve({ r: false });
                    }
                });
                // ----------------------------------------------
                const dO = { dp_token: '', dp_refresh: '', dp_expires: '', dp_domain: '', fcm_token: '' };
                let aO = null;
                const lAR = yield localAuth();
                if (lAR.r) {
                    aO = lAR.d;
                }
                else {
                    const sAR = yield storeAuth();
                    if (sAR.r) {
                        aO = sAR.d;
                    }
                    else {
                        const dAR = yield dbAuth();
                        if (dAR.r) {
                            aO = dAR.d;
                        }
                        else {
                            aO = null;
                        }
                    }
                }
                ;
                let fS = null;
                const lFR = yield localFCM();
                if (lFR.r) {
                    fS = lFR.d;
                }
                else {
                    const sFR = yield storeFCM();
                    if (sFR.r) {
                        fS = sFR.d;
                    }
                    else {
                        const dFR = yield dbFCM();
                        if (dFR.r) {
                            fS = dFR.d;
                        }
                        else {
                            fS = null;
                        }
                    }
                }
                ;
                if (aO !== null) {
                    dO.dp_token = String(aO.access_token);
                    dO.dp_refresh = String(aO.refresh_token);
                    dO.dp_expires = String(aO.expires_at);
                    dO.dp_domain = String(aO.endpoint);
                }
                ;
                if (fS !== null) {
                    dO.fcm_token = fS;
                }
                ;
                // ----------------------------------------------
                const uDocExists = yield this.hasFireUserDoc();
                if (uDocExists) {
                    this.logger.info('[fireServ|checkFireUserDoc] 🟢🔥🟢 FireUserDoc Already Exists - Not Creating Default.');
                    return Promise.resolve(true);
                }
                else {
                    this.fireStore.collection('users').doc(this.deputy.userEmail).set(dO)
                        .then(() => { this.logger.info('[fireServ|checkFireUserDoc] 🔴🔥🟢 No FireUserDoc >>> Default=SUCCESS.'); return Promise.resolve(true); })
                        .catch(e => { this.logger.info('[fireServ|checkFireUserDoc] 🔴🔥🔴 No FireUserDoc + Default=FAIL: ' + JSON.stringify(e)); return Promise.resolve(false); });
                }
            }
            else {
                return Promise.resolve(false);
            }
        });
    }
    /////////////////////////////////////////////////////
    getFireUserDoc() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('🔥 [fireServ|getFireUserDoc] ()...');
            if (this.fbLoggedIn) {
                const userDocRef = this.fireStore.collection('users').doc(this.deputy.userEmail).ref;
                return userDocRef.get().then((doc) => {
                    if (doc.exists) {
                        return Promise.resolve({ result: true, data: doc.data() });
                    }
                    else {
                        this.logger.info('🔥 [fireServ|getFireUserDoc] (Warning): Doc !==EXIST');
                        return Promise.resolve({ result: false });
                    }
                }).catch(gSVErr => { this.logger.info('🔥 [fireServ|getFireUserDoc] (Error): ' + JSON.stringify(gSVErr)); return Promise.resolve({ result: false }); });
            }
            else {
                return Promise.resolve({ result: false });
            }
        });
    }
    /////////////////////////////////////////////////////
    getFireUserAuth() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('🔥 [fireServ|getFireUserAuth] ()...');
            if (!this.fbLoggedIn) {
                if (this.tempUPO !== null) {
                    yield this.loginUserEmail(this.tempUPO);
                }
                else {
                    const fireLoginTokenRes = yield this.loginCustomToken();
                    if (!fireLoginTokenRes) {
                        if ((yield this.dS.getADBSetupDone())) {
                            let doClose = null;
                            if (!this.dS.getADBIsOpen()) {
                                yield this.sqlServ.openAuth();
                                doClose = true;
                            }
                            ;
                            const upRes = yield this.sqlServ.getADBItem('up');
                            if (upRes.result) {
                                yield this.loginUserEmail(upRes.data);
                            }
                            ;
                            if (doClose !== null && doClose === true) {
                                yield this.sqlServ.closeAuth();
                            }
                            ;
                        }
                    }
                    ;
                }
            }
            ;
            if (this.fbLoggedIn) {
                const userDocRef = this.fireStore.collection('users').doc(this.deputy.userEmail).ref;
                try {
                    const udSnap = yield userDocRef.get();
                    if (udSnap.exists) {
                        const fD = udSnap.data();
                        const fAuthObj = { access_token: String(fD.dp_token), expires_in: '86400', expires_at: String(fD.dp_expires), scope: 'longlife_refresh_token', endpoint: String(fD.dp_domain), refresh_token: String(fD.dp_refresh) };
                        return Promise.resolve({ result: true, data: fAuthObj });
                    }
                    else {
                        this.logger.info('🔥 [fireServ|getFireUserAuth] (Warning): Doc !==EXIST');
                        return Promise.resolve({ result: false });
                    }
                }
                catch (gFUAErr) {
                    this.logger.info('🔥 [fireServ|getFireUserAuth] (Error): ' + JSON.stringify(gFUAErr));
                    return Promise.resolve({ result: false });
                }
            }
            else {
                return Promise.resolve({ result: false });
            }
        });
    }
    /////////////////////////////////////////////////////
    getFCMTokenValue() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('🔥 [fireServ|getFCMTokenValue] ()...');
            const userDocRef = this.fireStore.collection('users').doc(this.deputy.userEmail).ref;
            return userDocRef.get()
                .then((doc) => {
                if (doc.exists) {
                    const fcmTokenVal = doc.get('fcm_token');
                    if (fcmTokenVal === null || fcmTokenVal === undefined || fcmTokenVal === '') {
                        return Promise.resolve({ result: true, data: null });
                    }
                    else {
                        return Promise.resolve({ result: true, data: fcmTokenVal });
                    }
                }
                else {
                    this.logger.info('🔥 [fireServ|getFCMTokenValue] (Warning): Doc !==EXIST');
                    return Promise.resolve({ result: false });
                }
            }).catch(gFTVErr => { this.logger.info('🔥 [fireServ|getFCMTokenValue] (Error): ' + JSON.stringify(gFTVErr)); return Promise.resolve({ result: false }); });
        });
    }
    /////////////////////////////////////////////////////
    onFCMTokenChange(pushModToken) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('🔥 [fireServ|onFCMTokenChange] >>> 👂🏼 LISTENING 👂🏼 ...');
            const cM = (n) => { let nT; n === 'db' ? nT = '[SQLite]' : nT = '[Fire UserDoc]'; const m = '🔥 [fireServ|onFCMTokenChange] 🎫⚠️ ' + nT + ' Token Mismatch - Fixing...'; return this.logger.info(m); };
            let pm = pushModToken;
            let db;
            let ud;
            if ((yield this.dS.getUDBSetupDone()) && this.dS.getUDBIsOpen) {
                const dbR = (yield this.sqlServ.getFCMToken());
                dbR.result ? db = dbR.data : db = null;
            }
            else {
                db = null;
            }
            ;
            const udR = (yield this.getFCMTokenValue());
            udR.result ? ud = udR.data : ud = null;
            if (db === pm && ud === pm) {
                this.logger.info('🔥 [fireServ|onFCMTokenChange] 🎫✅ ALL FCM Tokens Match');
            }
            else {
                if ((yield this.dS.getUDBSetupDone()) && this.dS.getUDBIsOpen) {
                    if (db !== pm) {
                        cM('db');
                        yield this.sqlServ.setFCMToken(pm);
                    }
                }
                ;
                if (ud !== pm) {
                    cM('ud');
                    yield this.setFCMTokenValue(pm);
                }
                ;
            }
            ;
        });
    }
    /////////////////////////////////////////////////////
    setFCMTokenValue(token) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('🔥 [fireServ|setFCMTokenValue] (' + token.substring(0, 10) + ')...');
            this.fbMsgToken = token;
            const userDocRef = this.fireStore.collection('users').doc(this.deputy.userEmail).ref;
            return userDocRef.update({ fcm_token: token })
                .then(() => { this.logger.info('🔥 [fireServ|setFCMTokenValue] (SUCCESS) 🎫✔️ [Fire UserDoc] - Token Updated/Fixed.'); return Promise.resolve(true); })
                .catch(sFTVErr => { this.logger.info('🔥 [fireServ|setFCMTokenValue] (ERROR) 🎫❌ [Fire UserDoc] - Token NOT Updated/Fixed: ' + JSON.stringify(sFTVErr)); return Promise.resolve(false); });
        });
    }
    /////////////////////////////////////////////////////
    setFireSettingsDoc(userEmail, settObj) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('🔥 [fireServ|setFireSettingsDoc] (userEmail,settObj)...');
            let uEmail = '';
            if (userEmail === null) {
                uEmail = this.deputy.userEmail;
            }
            else {
                uEmail = userEmail;
            }
            ;
            const consM = (r, uc, x) => { let xT; x !== null ? xT = ' ' + JSON.stringify(x) : xT = ''; const m = '🔥 [fireServ|setFireSettingsDoc] (' + r + ') SettDoc ' + uc + ' for ' + uEmail + xT; return this.logger.info(m); };
            try {
                yield this.fireStore.collection('settings').doc(uEmail).update(settObj);
                consM('SUCCESS', 'UPDATED', null);
                return Promise.resolve(true);
            }
            catch (e) {
                consM('ERROR', 'FAILED', e);
                this.fireStore.collection('settings').doc(String(uEmail)).set(settObj)
                    .then(() => { consM('SUCCESS', 'CREATED', null); return Promise.resolve(true); })
                    .catch(e => { consM('ERROR', 'FAILED', e); return Promise.resolve(false); });
            }
        });
    }
    /////////////////////////////////////////////////////
    updateSettingsObj(settObj) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('🔥 [fireServ|updateSettingsObj] ()...');
            const userSettRef = this.fireStore.collection('settings').doc(String(this.deputy.userEmail)).ref;
            return userSettRef.update(settObj)
                .then(() => { this.logger.info('🔥 [fireServ|updateSettingsObj] (SUCCESS) - Updated User Settings Obj'); return Promise.resolve(true); })
                .catch(uSOErr => { this.logger.info('🔥 [fireServ|updateSettingsObj] (Error): ' + JSON.stringify(uSOErr)); return Promise.resolve(false); });
        });
    }
    /////////////////////////////////////////////////////
    getSettingsValue(fieldPath) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('🔥 [fireServ|getSettingsValue] ()...');
            const userDocRef = this.fireStore.collection('settings').doc(this.deputy.userEmail).ref;
            return userDocRef.get()
                .then((doc) => {
                if (doc.exists) {
                    let fieldVal;
                    if (fieldPath === null) {
                        fieldVal = doc.data();
                    }
                    else {
                        fieldVal = doc.get(fieldPath);
                    }
                    ;
                    if (fieldVal === null || fieldVal === undefined || fieldVal === '') {
                        return Promise.resolve({ result: true, data: null });
                    }
                    else {
                        return Promise.resolve({ result: true, data: fieldVal });
                    }
                }
                else {
                    this.logger.info('🔥 [fireServ|getSettingsValue] (Warning): Doc !==EXIST');
                    return Promise.resolve({ result: false });
                }
            }).catch(gSVErr => {
                this.logger.info('🔥 [fireServ|getSettingsValue] (Error): ' + JSON.stringify(gSVErr));
                return Promise.resolve({ result: false });
            });
        });
    }
    /////////////////////////////////////////////////////
    setSettingsValue(keyVal) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('🔥 [fireServ|setSettingsValue] (' + keyVal + ')...');
            const userDocRef = this.fireStore.collection('settings').doc(this.deputy.userEmail).ref;
            return userDocRef.update(keyVal)
                .then(() => { this.logger.info('🔥 [fireServ|setSettingsValue] (SUCCESS) - Updated Settings Field'); return Promise.resolve(true); })
                .catch(sSVErr => { this.logger.info('🔥 [fireServ|setSettingsValue] (Error): ' + JSON.stringify(sSVErr)); return Promise.resolve(false); });
        });
    }
};
FirebaseService.ctorParameters = () => [
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_13__.NGXLogger },
    { type: _angular_fire_compat_firestore__WEBPACK_IMPORTED_MODULE_14__.AngularFirestore },
    { type: _angular_fire_compat_storage__WEBPACK_IMPORTED_MODULE_15__.AngularFireStorage },
    { type: _angular_fire_compat_auth__WEBPACK_IMPORTED_MODULE_16__.AngularFireAuth },
    { type: _datetime_service__WEBPACK_IMPORTED_MODULE_1__.DateTimeService },
    { type: _storage_service__WEBPACK_IMPORTED_MODULE_2__.StorageService },
    { type: _deputy_service__WEBPACK_IMPORTED_MODULE_4__.DeputyService },
    { type: _events_service__WEBPACK_IMPORTED_MODULE_5__.EventsService },
    { type: src_app_services_detail_service__WEBPACK_IMPORTED_MODULE_0__.DetailService },
    { type: _sqlite_service__WEBPACK_IMPORTED_MODULE_6__.SQLiteService },
    { type: _filesystem_service__WEBPACK_IMPORTED_MODULE_7__.FileSystemService }
];
FirebaseService = (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_17__.Injectable)({ providedIn: 'root' })
], FirebaseService);



/***/ }),

/***/ 79744:
/*!***************************************************!*\
  !*** ./src/app/services/notifications.service.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NotificationsService": function() { return /* binding */ NotificationsService; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var _capacitor_local_notifications__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @capacitor/local-notifications */ 12273);
/* harmony import */ var _datetime_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./datetime.service */ 12826);
/* harmony import */ var _sqlite_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sqlite.service */ 90636);
/* harmony import */ var _events_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./events.service */ 80106);
/* harmony import */ var _firebase_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./firebase.service */ 19446);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var _fairwork_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./fairwork.service */ 93405);
/* harmony import */ var _capacitor_action_sheet__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @capacitor/action-sheet */ 54025);
/* harmony import */ var _appTypes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./appTypes */ 38670);
/* harmony import */ var _detail_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./detail.service */ 52153);













////////////////////////////////////////////////////////////////
let NotificationsService = class NotificationsService {
    ////////////////////////////////////////////////////////////////
    constructor(logger, dT, sqlServ, evServ, loadCtrl, fwServ, dS, fireServ) {
        this.logger = logger;
        this.dT = dT;
        this.sqlServ = sqlServ;
        this.evServ = evServ;
        this.loadCtrl = loadCtrl;
        this.fwServ = fwServ;
        this.dS = dS;
        this.fireServ = fireServ;
        ////////////////////////////////////////////////////////////////
        this.userSettings = null;
        this.notesEnabled = false;
        this.eventsEnabled = { shift: false, task: false };
        this.beforeTimes = { shift: 0, task: 0 };
        this.showIncome = null;
        this.myObj = null;
        this.workAreas = null;
        this.workName = null;
        this.workCode = null;
        this.workPeople = [];
        this.hasMyChan = false;
        this.tasksInProg = false;
        this.shiftsInProg = false;
        this.isReschedule = false;
        this.schedEvs = { shift: [], task: [] };
        this.initDone = false;
    }
    ////////////////////////////////////////////////////////////////
    noteGetPerms() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('\uD83D\uDD14 [noteServ|noteGetPerms] ()...');
            try {
                const nCPRes = yield _capacitor_local_notifications__WEBPACK_IMPORTED_MODULE_0__.LocalNotifications.checkPermissions();
                if (nCPRes.display !== 'granted') {
                    const nRPRes = yield _capacitor_local_notifications__WEBPACK_IMPORTED_MODULE_0__.LocalNotifications.requestPermissions();
                    if (nRPRes.display === 'granted') {
                        return Promise.resolve({ result: true, data: nRPRes.display });
                    }
                    else {
                        return Promise.resolve({ result: false, data: nRPRes.display });
                    }
                }
                else {
                    return Promise.resolve({ result: true, data: nCPRes.display });
                }
            }
            catch (nCPErr) {
                this.logger.info('\uD83D\uDD14 [noteServ|noteCheckPerms] (Error): ' + nCPErr);
                return Promise.reject(nCPErr);
            }
        });
    }
    ////////////////////////////////////////////////////////////////
    permOK() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () { if ((yield _capacitor_local_notifications__WEBPACK_IMPORTED_MODULE_0__.LocalNotifications.checkPermissions()).display === 'granted') {
            return Promise.resolve(true);
        }
        else {
            return Promise.resolve(false);
        } });
    }
    ;
    reqP() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () { if ((yield _capacitor_local_notifications__WEBPACK_IMPORTED_MODULE_0__.LocalNotifications.requestPermissions()).display === 'granted') {
            return Promise.resolve(true);
        }
        else {
            return Promise.resolve(false);
        } });
    }
    ;
    ////////////////////////////////////////////////////////////////
    doNoteInit() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            this.evServ.subscribe('noteInit', (initD) => (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
                this.logger.info('\uD83D\uDD14 [noteServ|doNoteInit] (EVENT) [STAGE] = ' + initD.stage + ' ... ');
                if (initD.stage === 'notesenabled') {
                    this.initGVars();
                }
                else if (initD.stage === 'gvars') {
                    this.initMyChannel();
                }
                else if (initD.stage === 'chan') {
                    this.initActions();
                }
                else if (initD.stage === 'actions') {
                    this.evServ.publish('doPushNoteInit', true);
                    this.initListen();
                }
                else if (initD.stage === 'listen') {
                    this.initDone = true;
                    this.doScheduleNotes();
                }
            }));
            this.initRefreshNoteSettings();
        });
    }
    ////////////////////////////////////////////////////////////////
    doScheduleNotes() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            let schedTypeTtl = 0;
            let schedTypeCount = 0;
            let schedSTime = new Date();
            let cM;
            this.isReschedule ? cM = '♻️[RE]Scheduling' : cM = 'Init Scheduling';
            this.evServ.subscribe('noteSched', () => {
                schedTypeCount++;
                if (schedTypeCount === schedTypeTtl) {
                    const schedTT = (this.evServ.getDur(schedSTime) / 1000).toFixed(2) + 's';
                    const tShifts = this.schedEvs.shift.length;
                    const tTasks = this.schedEvs.task.length;
                    const tEvs = tShifts + tTasks;
                    this.logger.info('\uD83D\uDD14 - 🏁 FINISHED ' + cM + ': ' + tEvs + ' Total Phone Notes Added in ' + schedTT + 's:');
                    let sShiftsIds = [];
                    for (let i = 0; i < this.schedEvs.shift.length; i++) {
                        sShiftsIds.push(this.schedEvs.shift[i].dId + '|' + this.schedEvs.shift[i].nId);
                    }
                    ;
                    this.logger.info('\uD83D\uDD14 - 📑 Shifts: ' + sShiftsIds.join(', ') + ' (' + tShifts + ')');
                    let sTasksIds = [];
                    for (let i = 0; i < this.schedEvs.task.length; i++) {
                        sTasksIds.push(this.schedEvs.task[i].dId + '|' + this.schedEvs.task[i].nId);
                    }
                    ;
                    this.logger.info('\uD83D\uDD14 - 🤹🏼 Tasks: ' + sTasksIds.join(', ') + ' (' + tTasks + ')');
                    if (this.isReschedule) {
                        this.evServ.publish('reschedFinish', 'phone');
                        this.isReschedule = false;
                    }
                    ;
                    this.evServ.destroy('noteSched');
                }
            });
            yield this.deleteAllSched();
            this.evServ.publish('alertsStatus', true);
            if (this.notesEnabled) {
                this.logger.info('\uD83D\uDD14 {alertMethods.phone=TRUE}');
                for (const v of Object.values(this.eventsEnabled)) {
                    if (v) {
                        schedTypeTtl++;
                    }
                }
                ;
                if (schedTypeTtl > 0) {
                    if (this.eventsEnabled.shift) {
                        this.logger.info('\uD83D\uDD14 {alertEvents.shift=TRUE} - ' + cM + ' Shifts...');
                        this.checkShifts(null);
                    }
                    else {
                        this.logger.info('\uD83D\uDD14 {alertEvents.shift=FALSE} - !SKIPPING! ' + cM + ' Shifts...');
                    }
                    ;
                    if (this.eventsEnabled.task) {
                        this.logger.info('\uD83D\uDD14 {alertEvents.task=TRUE} - ' + cM + ' Tasks...');
                        this.checkTasks(null);
                    }
                    else {
                        this.logger.info('\uD83D\uDD14 {alertEvents.task=FALSE} - !SKIPPING! ' + cM + ' Tasks.');
                    }
                }
                else {
                    if (this.isReschedule) {
                        this.evServ.publish('reschedFinish', 'phone');
                        this.isReschedule = false;
                    }
                    ;
                    this.logger.info('\uD83D\uDD14 {alertEvents.shift=FALSE} && {alertEvents.task=FALSE} - !SKIPPING! Notification ' + cM);
                }
            }
            else {
                if (this.isReschedule) {
                    this.evServ.publish('reschedFinish', 'phone');
                    this.isReschedule = false;
                }
                ;
                this.logger.info('\uD83D\uDD14 {alertMethods.phone=FALSE} - !SKIPPING! Notification ' + cM);
            }
        });
    }
    ////////////////////////////////////////////////////////////////
    initRefreshNoteSettings() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            let savedUSettObj;
            const dsRes = yield this.dS.getSettings();
            if (dsRes !== null) {
                savedUSettObj = dsRes;
            }
            else {
                const dbRes = yield this.sqlServ.getSettings();
                if (dbRes.result) {
                    savedUSettObj = dbRes.data;
                }
                else {
                    const fireRes = yield this.fireServ.getSettingsValue(null);
                    if (fireRes.result) {
                        savedUSettObj = fireRes.data;
                    }
                    else {
                        savedUSettObj = (0,_appTypes__WEBPACK_IMPORTED_MODULE_7__.defaultAUSettings)();
                    }
                }
            }
            ;
            this.userSettings = savedUSettObj;
            this.uAlertOpts = this.userSettings.alerts.options;
            this.notesEnabled = Boolean(this.uAlertOpts.alertMethods.value.phone);
            this.eventsEnabled.shift = Boolean(this.uAlertOpts.alertEvents.value.shift);
            this.eventsEnabled.task = Boolean(this.uAlertOpts.alertEvents.value.task);
            this.beforeTimes.shift = Number(this.uAlertOpts.alertBefore.value.shift.mins);
            this.beforeTimes.task = Number(this.uAlertOpts.alertBefore.value.task.mins);
            this.showIncome = Boolean(this.userSettings.payrates.options.show.value);
            if (!this.initDone) {
                this.evServ.publish('noteInit', { stage: 'notesenabled', data: null });
            }
            ;
            return Promise.resolve(true);
        });
    }
    ////////////////////////////////////////////////////////////////
    updateNoteSetting() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[noteServ|updateNoteSettings] ()...');
            this.isReschedule = true;
            yield this.initRefreshNoteSettings();
            this.doScheduleNotes();
            return Promise.resolve(true);
        });
    }
    ////////////////////////////////////////////////////////////////
    initListen() {
        this.noteListenRemoveAll();
        this.noteListenAddGotNote();
        this.noteListenAddGotAction();
        this.evServ.publish('noteInit', { stage: 'listen', data: null });
    }
    ////////////////////////////////////////////////////////////////
    initActions() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            this.noteRegisterActions();
            setTimeout(() => { this.evServ.publish('noteInit', { stage: 'actions', data: null }); }, 250);
        });
    }
    ////////////////////////////////////////////////////////////////
    initMyChannel() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            yield this.noteDeleteChannel();
            const existChanList = yield this.noteListChannels();
            const cList = existChanList.data;
            const myChanArr = cList.filter(c => c.Id === 'sheriff-alerts');
            if (myChanArr.length > 0) {
                this.hasMyChan = true;
                this.evServ.publish('noteInit', { stage: 'chan', data: null });
            }
            else {
                const startChanRes = yield this.noteCreateChannel();
                if (startChanRes) {
                    this.hasMyChan = true;
                    this.evServ.publish('noteInit', { stage: 'chan', data: null });
                }
                else {
                    this.hasMyChan = false;
                    this.evServ.publish('noteInit', { stage: 'chan', data: null });
                }
            }
        });
    }
    ////////////////////////////////////////////////////////////////
    initGVars() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            this.myObj = yield this.dS.getMy();
            this.workAreas = this.dS.workAreas;
            this.workPeople = this.dS.pplArr;
            this.workName = this.dS.workName;
            this.workCode = this.dS.workCode;
            this.evServ.publish('noteInit', { stage: 'gvars', data: null });
        });
    }
    ////////////////////////////////////////////////////////////////
    capType(lowT) { return lowT.charAt(0).toUpperCase() + lowT.slice(1); }
    ////////////////////////////////////////////////////////////////
    triggerTime(evD, beforeT) { return this.dT.subMs(evD, beforeT); }
    ////////////////////////////////////////////////////////////////
    changeBeforeTime(event, mins) { this.beforeTimes[String(event)] = Number(mins); return Promise.resolve(true); }
    ////////////////////////////////////////////////////////////////
    deleteAllSched() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('\uD83D\uDD14 [noteServ|deleteAllSched] ()...');
            let canAllOpts = { notifications: [] };
            const { notifications } = yield _capacitor_local_notifications__WEBPACK_IMPORTED_MODULE_0__.LocalNotifications.getPending();
            if (notifications.length > 0) {
                for (let i = 0; i < notifications.length; i++) {
                    canAllOpts.notifications.push({ id: notifications[i].id });
                }
                ;
                _capacitor_local_notifications__WEBPACK_IMPORTED_MODULE_0__.LocalNotifications.cancel(canAllOpts);
                this.schedEvs.task = [];
                this.schedEvs.shift = [];
                return Promise.resolve(true);
            }
            else {
                this.schedEvs.task = [];
                this.schedEvs.shift = [];
                return Promise.resolve(true);
            }
        });
    }
    ////////////////////////////////////////////////////////////////
    getBeforeTime(event) { return this.beforeTimes[event]; }
    ;
    ////////////////////////////////////////////////////////////////
    getFName(empId) {
        const isE = (name) => { if (name === '' || name === ' ' || name === null || name === undefined) {
            return true;
        }
        else {
            return false;
        } };
        let fN;
        const pObArr = this.workPeople.filter(p => p.EmpId === empId);
        if (pObArr.length > 0) {
            const rawFN = pObArr[0].FirstName;
            const rawLN = pObArr[0].LastName;
            const rawDN = pObArr[0].DisplayName;
            if (!isE(rawFN) && !isE(rawLN)) {
                fN = this.capType(rawFN) + ' ' + this.capType(rawLN.charAt(0)) + '.';
            }
            else if (!isE(rawFN)) {
                fN = this.capType(rawFN);
            }
            else if (!isE(rawDN)) {
                const rDNArr = rawDN.split(' ');
                if (rDNArr.length > 1) {
                    fN = this.capType(rDNArr[0]);
                }
                else {
                    fN = this.capType(rawDN);
                }
            }
        }
        else {
            fN = 'NK';
        }
        ;
        return fN;
    }
    ;
    /////////////////////////////////////////////////////////////////
    getPay(rosterObj) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            const payRes = yield this.fwServ.getShiftPay(rosterObj);
            return Promise.resolve(payRes);
        });
    }
    /////////////////////////////////////////////////////////////////
    formatShift(rawNS) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            const wNames = (oUId) => { let oUArr = this.workAreas.filter(oU => (oU.Id === oUId)); return { cname: oUArr[0]['CompanyCode'], warea: oUArr[0]['OperationalUnitName'] }; };
            let niceNS = rawNS;
            const nN = wNames(rawNS.OperationalUnit);
            nN.warea ? niceNS['nOpUnit'] = nN.warea : niceNS['nOpUnit'] = '';
            nN.cname ? niceNS['nCompanyName'] = nN.cname : niceNS['nCompanyName'] = this.workName;
            niceNS['nDate'] = this.dT.format(new Date(rawNS.Date), 'EEEE, d MMMM yyyy');
            const nStartEndObj = this.dT.rosterSETimes(rawNS.StartTime, rawNS.EndTime);
            niceNS['nStart'] = nStartEndObj.s.trim();
            niceNS['nEnd'] = nStartEndObj.e.trim();
            const calcPay = yield this.getPay(rawNS);
            niceNS['nIncomeObj'] = calcPay;
            niceNS['nIncome'] = calcPay.t.toFixed(0);
            let tT = { hours: 0, minutes: 0 };
            if (rawNS.TotalTime.toString().includes('.')) {
                const ttArr = rawNS.TotalTime.toString().split('.');
                tT.hours = parseInt(ttArr[0]);
                tT.minutes = Math.round(Number('0.' + ttArr[1]) * 60);
            }
            else {
                tT.hours = rawNS.TotalTime;
            }
            ;
            niceNS['nTotalTime'] = tT;
            niceNS['nConfirmStatus'] = rawNS.ConfirmStatus;
            let lnConfirmBy;
            rawNS.ConfirmBy === 0 ? lnConfirmBy = false : lnConfirmBy = this.dT.Dut(rawNS.ConfirmBy);
            niceNS['nConfirmBy'] = lnConfirmBy;
            return Promise.resolve(niceNS);
        });
    }
    ////////////////////////////////////////////////////////////////
    noteSchedule(eventObj) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            let nSOpts = { notifications: [] };
            const aId = eventObj.Id;
            let aLCType;
            let aUCType;
            //------------------------------
            let evDate;
            let alertDate;
            let aTitle;
            let aBody;
            //------------------------------
            let aConfirmId = null;
            let aConfirmTitle = null;
            let aConfirmBody = null;
            let evConfirmDate = null;
            let alertConfirmDate = null;
            //------------------------------
            // Shifts/Rosters
            if (eventObj.hasOwnProperty('MatchedByTimesheet')) {
                const shiftO = eventObj;
                const niceBTime = (rawBT) => { if (rawBT <= 90) {
                    return rawBT.toString() + ' Minutes';
                }
                else if (rawBT > 90 && rawBT <= 720) {
                    const rawHs = rawBT / 60;
                    return rawHs.toString() + ' Hours';
                }
                else if (rawBT > 720 && rawBT <= 4320) {
                    const rawDs = ((rawBT / 24) / 60);
                    return rawDs.toString() + ' Days';
                }
                else {
                    return '1 Week';
                } };
                const b4T = this.getBeforeTime('shift');
                aLCType = 'shift';
                aUCType = this.capType(aLCType);
                const aNTimeStr = shiftO.nStart + '-' + shiftO.nEnd;
                const aNDur = shiftO.nTotalTime;
                let nDurStr;
                if (aNDur.hours > 0 && aNDur.minutes > 0) {
                    nDurStr = aNDur.hours + ':' + aNDur.minutes;
                }
                else {
                    if (aNDur.hours > 0) {
                        nDurStr = aNDur.hours + 'h';
                    }
                    else {
                        nDurStr = aNDur.minutes + 'm';
                    }
                }
                ;
                const aNIncome = shiftO.nIncome;
                // Add Confirm Note
                if (shiftO.ConfirmStatus === 1 && shiftO.nConfirmBy !== false) {
                    const confId = (evId) => { const cIdStr = evId.toString() + '000'; return Number(cIdStr); };
                    aConfirmId = confId(aId);
                    evConfirmDate = shiftO.nConfirmBy;
                    alertConfirmDate = this.triggerTime(evConfirmDate, b4T);
                    aConfirmTitle = 'Confirm Shift Deadline';
                    const aNDateStr = this.dT.format(new Date(shiftO.Date), 'EEE, d MMM');
                    let confIncomeStr;
                    this.showIncome ? confIncomeStr = '| $' + aNIncome + ')' : confIncomeStr = ')';
                    aConfirmBody = 'You must confirm Shift #' + aId + ' within ' + niceBTime(b4T) + '\n' + this.workCode + ' Shift on ' + this.dT.format(new Date(shiftO.Date), 'dd/MM/yy') + ' at ' + aNDateStr + ' - ' + aNTimeStr + ' (' + nDurStr + confIncomeStr;
                    let confNote = { id: aConfirmId, title: aConfirmTitle, body: aConfirmBody, largeBody: aConfirmBody, schedule: { repeats: false, allowWhileIdle: true, at: alertConfirmDate }, smallIcon: 'ic_stat_sheriffnote', iconColor: '#FF9800', sound: 'sheriffnote.wav', ongoing: false, autoCancel: false, actionTypeId: 'shift-atype', extra: { type: aLCType, uctype: aUCType, evdate: evConfirmDate, isTest: false } };
                    if (this.hasMyChan) {
                        confNote['channelId'] = 'sheriff-alerts';
                    }
                    ;
                    nSOpts.notifications.push(confNote);
                }
                ;
                // Standard Shift Note
                evDate = this.dT.Dut(eventObj.StartTime);
                alertDate = this.triggerTime(evDate, b4T);
                aTitle = 'Upcoming Shift Reminder';
                let shiftIncomeStr;
                this.showIncome ? shiftIncomeStr = ' | $' + aNIncome : shiftIncomeStr = '';
                let isToday;
                this.dT.isSD(new Date(), new Date(shiftO.Date)) ? isToday = true : isToday = false;
                let shiftWhen;
                isToday ? shiftWhen = 'Today' : shiftWhen = 'On ' + this.dT.format(new Date(shiftO.Date), 'EEE, d MMM');
                aBody = 'Your Shift @ ' + this.workCode + ' (' + shiftO.nOpUnit + ') starts in ' + niceBTime(b4T) + '\n' + shiftWhen + ' ' + aNTimeStr + ' (' + nDurStr + ')' + shiftIncomeStr;
                let shiftNote = { id: aId, title: aTitle, body: aBody, largeBody: aBody, schedule: { repeats: false, allowWhileIdle: true, at: alertDate }, smallIcon: 'ic_stat_sheriffnote', iconColor: '#FF9800', sound: 'sheriffnote.wav', ongoing: false, autoCancel: false, actionTypeId: 'shift-atype', extra: { type: aLCType, uctype: aUCType, evdate: evDate, isTest: false } };
                if (this.hasMyChan) {
                    shiftNote['channelId'] = 'sheriff-alerts';
                }
                ;
                nSOpts.notifications.push(shiftNote);
            }
            // Tasks
            else if (eventObj.hasOwnProperty('TaskSetupId')) {
                const taskO = eventObj;
                const b4T = this.getBeforeTime('task');
                const niceBTime = (rawBT) => { if (rawBT <= 90) {
                    return rawBT.toString() + ' Minutes';
                }
                else if (rawBT > 90 && rawBT <= 720) {
                    const rawHs = rawBT / 60;
                    return rawHs.toString() + ' Hours';
                }
                else if (rawBT > 720 && rawBT <= 4320) {
                    const rawDs = ((rawBT / 24) / 60);
                    return rawDs.toString() + ' Days';
                }
                else {
                    return '1 Week';
                } };
                const dDateNice = this.dT.format(new Date(taskO.DueDate), 'EEE, d MMM');
                const dTimeNice = this.dT.format(new Date(taskO.DueDate), 'h:mmaaa');
                aLCType = 'task';
                aUCType = this.capType(aLCType);
                evDate = new Date(taskO.DueDate);
                alertDate = this.triggerTime(evDate, b4T);
                aTitle = 'Pending Task Reminder';
                aBody = 'Task #' + taskO.Id + ' from ' + this.getFName(taskO.UserEntry) + ' @ ' + this.workCode + ' is due in ' + niceBTime(b4T) + '\nTask: ' + taskO.Question + ' | Due By: ' + dDateNice + ' at ' + dTimeNice;
                let taskNote = { id: aId, title: aTitle, body: aBody, largeBody: aBody, schedule: { repeats: false, allowWhileIdle: true, at: alertDate }, smallIcon: 'ic_stat_sheriffnote', iconColor: '#FF9800', sound: 'sheriffnote.wav', ongoing: false, autoCancel: false, actionTypeId: 'task-atype', extra: { type: aLCType, uctype: aUCType, evdate: evDate, isTest: false } };
                if (this.hasMyChan) {
                    taskNote['channelId'] = 'sheriff-alerts';
                }
                ;
                nSOpts.notifications.push(taskNote);
            }
            ;
            try {
                const nSRes = yield _capacitor_local_notifications__WEBPACK_IMPORTED_MODULE_0__.LocalNotifications.schedule(nSOpts);
                if (nSRes.notifications.length > 0) {
                    this.schedEvs[aLCType].push({ dId: aId, nId: nSRes.notifications[0].id });
                    return Promise.resolve({ result: true, data: nSRes.notifications });
                }
                else {
                    return Promise.resolve({ result: false, data: [] });
                }
            }
            catch (nSErr) {
                this.logger.info('\uD83D\uDD14 [noteServ|noteSchedule] (Error): ' + nSErr);
                return Promise.reject(nSErr);
            }
        });
    }
    ////////////////////////////////////////////////////////////////
    testNote(noteId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('\uD83D\uDD14 [noteServ|testNote] (' + noteId + ')...');
            let testSchedRes;
            const nListRes = yield this.notePending();
            if (nListRes.result) {
                const nListArr = nListRes.data;
                const nObjArr = nListArr.filter(n => n.id === noteId);
                if (nObjArr.length > 0) {
                    const nObj = nObjArr[0];
                    let tObj = nObj;
                    const tId = noteId.toString() + '000';
                    tObj.schedule.at = this.dT.addS(new Date(), 5);
                    tObj.id = Number(tId);
                    tObj.largeBody = nObj.body;
                    tObj.extra.isTest = true;
                    tObj.actionTypeId = nObj.extra.type + '-atype';
                    this.tNoteId = Number(tId);
                    this.evServ.subscribe('testNoteStage', tnsData => {
                        if (tnsData.stage === 'schedtest') {
                            testSchedRes = tnsData.data;
                            this.logger.info('Test Note Scheduled [SUCCESS] for Test Id #' + testSchedRes.id);
                            this.loadCtrl.dismiss();
                        }
                        else if (tnsData.stage === 'gottest') {
                            this.evServ.destroy('testNoteStage');
                            this.tNoteId = null;
                            this.evServ.publish('testRes', { stage: 'gottest', data: null });
                        }
                        else {
                            this.evServ.destroy('testNoteStage');
                            this.tNoteId = null;
                            this.evServ.publish('testRes', { stage: 'error', data: null });
                        }
                    });
                    this.loadCtrl.create({ spinner: 'dots', cssClass: 'sheriff-loader-class', message: 'Testing Alert #' + noteId, backdropDismiss: false, showBackdrop: true, }).then((loadRes) => {
                        loadRes.onDidDismiss().then(() => { this.evServ.publish('testRes', { stage: 'sched', data: testSchedRes }); });
                        document.addEventListener('ionLoadingDidPresent', () => (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
                            const testSchedR = yield _capacitor_local_notifications__WEBPACK_IMPORTED_MODULE_0__.LocalNotifications.schedule({ notifications: [tObj] });
                            if (testSchedR.notifications.length > 0) {
                                const tId = testSchedR.notifications[0].id;
                                const getS = yield this.notePending();
                                const tNObj = getS.data.filter(n => n.id === tId)[0];
                                this.evServ.publish('testNoteStage', { stage: 'schedtest', data: tNObj });
                            }
                            else {
                                this.evServ.publish('testNoteStage', { stage: 'error', data: null });
                            }
                        }));
                        setTimeout(() => {
                            loadRes.present();
                        }, 250);
                    });
                }
                else {
                    this.logger.info('\uD83D\uDD14 [noteServ|testNote] (Error): Note is Not Scheduled?');
                }
            }
            else {
                this.logger.info('\uD83D\uDD14 [noteServ|testNote] (Error): Note is Not Scheduled?');
            }
        });
    }
    ////////////////////////////////////////////////////////////////
    notePending() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('\uD83D\uDD14 [noteServ|getPending] ()...');
            try {
                const nPendRes = (yield _capacitor_local_notifications__WEBPACK_IMPORTED_MODULE_0__.LocalNotifications.getPending()).notifications;
                if (nPendRes.length > 0) {
                    return Promise.resolve({ result: true, data: nPendRes });
                }
                else {
                    return Promise.resolve({ result: true, data: [] });
                }
            }
            catch (nPendErr) {
                this.logger.info('\uD83D\uDD14 [noteServ|notePending] (Error): ' + nPendErr);
                return Promise.resolve({ result: false, data: nPendErr });
            }
        });
    }
    ////////////////////////////////////////////////////////////////
    cShiftsDelay(shiftData) {
        this.logger.info('\uD83D\uDD14 [noteServ|cShiftsDelay] ()...');
        const cSDelayLoop = setInterval(() => {
            if (!this.tasksInProg) {
                this.logger.info('\uD83D\uDD14 [noteServ|cShiftsDelay] [TasksInProg=' + this.tasksInProg + '] - Running checkShifts()...');
                clearInterval(cSDelayLoop);
                setTimeout(() => { this.checkShifts(shiftData); }, 250);
            }
            else {
                this.logger.info('\uD83D\uDD14 [noteServ|cShiftsDelay] [TasksInProg=' + this.tasksInProg + '] - Waiting...');
            }
        }, 500);
    }
    ////////////////////////////////////////////////////////////////
    checkShifts(shiftData) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            let allFSSs = [];
            if (shiftData !== null) {
                allFSSs = shiftData;
            }
            else {
                let dbSRes = yield this.sqlServ.getFutureStartShifts();
                if (dbSRes.result) {
                    allFSSs = dbSRes.data;
                }
                else {
                    allFSSs = [];
                }
            }
            ;
            allFSSs.push(_appTypes__WEBPACK_IMPORTED_MODULE_7__.testShift);
            if (allFSSs.length > 0) {
                this.logger.info('\uD83D\uDD14 [noteServ|checkShifts] Found [' + allFSSs.length + '] Shifts to Schedule...');
                if (this.tasksInProg) {
                    this.logger.info('\uD83D\uDD14 [noteServ|checkShifts] (WARNING) tasksInProg=' + this.tasksInProg.toString().toUpperCase() + ' - Running cShiftsDelay()...');
                    this.cShiftsDelay(allFSSs);
                }
                else {
                    this.shiftsInProg = true;
                    const sSArr = allFSSs;
                    let schedGood = 0;
                    let schedBad = 0;
                    let schedSkip = 0;
                    for (let i = 0; i < sSArr.length; i++) {
                        const rawTSO = sSArr[i];
                        const tSO = yield this.formatShift(rawTSO);
                        const tSOStart = this.dT.Dut(tSO.StartTime);
                        const tSOTrigT = this.triggerTime(tSOStart, this.beforeTimes.shift);
                        if (this.dT.isA(tSOTrigT, new Date())) {
                            const doSchedRes = yield this.noteSchedule(tSO);
                            doSchedRes.result ? schedGood++ : schedBad++;
                        }
                        else {
                            schedSkip++;
                        }
                        ;
                    }
                    ;
                    this.logger.info('\uD83D\uDD14 [noteServ|checkShifts] (FINISHED) RESULTS: ✔️ ' + schedGood + ', ❌ ' + schedBad + ', ➖ ' + schedSkip);
                    this.shiftsInProg = false;
                    this.evServ.publish('noteSched', true);
                }
            }
            else {
                this.shiftsInProg = false;
                this.evServ.publish('noteSched', true);
                this.logger.info('\uD83D\uDD14 [noteServ|checkShifts] (NIL) No Future Start Shifts To Schedule.');
            }
        });
    }
    ////////////////////////////////////////////////////////////////
    cTasksDelay(taskData) {
        this.logger.info('\uD83D\uDD14 [noteServ|cTasksDelay] ()...');
        const cTDelayLoop = setInterval(() => {
            if (!this.shiftsInProg) {
                this.logger.info('\uD83D\uDD14 [noteServ|cTasksDelay] [ShiftsInProg=' + this.shiftsInProg + '] - Running checkTasks()...');
                clearInterval(cTDelayLoop);
                setTimeout(() => { this.checkTasks(taskData); }, 250);
            }
            else {
                this.logger.info('\uD83D\uDD14 [noteServ|cTasksDelay] [ShiftsInProg=' + this.shiftsInProg + '] - Waiting...');
            }
        }, 500);
    }
    ////////////////////////////////////////////////////////////////
    checkTasks(taskData) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            let allFDTs;
            if (taskData !== null) {
                allFDTs = taskData;
            }
            else {
                let dbTRes = yield this.sqlServ.getFutureDueTasks();
                if (dbTRes.result) {
                    allFDTs = dbTRes.data;
                }
                else {
                    allFDTs = [];
                }
            }
            ;
            if (allFDTs.length > 0) {
                this.logger.info('\uD83D\uDD14 [noteServ|checkTasks] Found [' + allFDTs.length + '] Tasks to Schedule...');
                if (this.shiftsInProg) {
                    this.logger.info('\uD83D\uDD14 [noteServ|checkShifts] (WARNING) shiftsInProg=' + this.shiftsInProg.toString().toUpperCase() + ' - Running cTasksDelay()...');
                    this.cTasksDelay(allFDTs);
                }
                else {
                    this.tasksInProg = true;
                    let schedGood = 0;
                    let schedBad = 0;
                    let schedSkip = 0;
                    for (let i = 0; i < allFDTs.length; i++) {
                        const tT = allFDTs[i];
                        const trigT = this.triggerTime(new Date(tT.DueDate), this.beforeTimes.task);
                        if (this.dT.isA(trigT, new Date())) {
                            const schedT = yield this.noteSchedule(tT);
                            schedT.result ? schedGood++ : schedBad++;
                        }
                        else {
                            schedSkip++;
                        }
                        ;
                    }
                    ;
                    this.logger.info('\uD83D\uDD14 [noteServ|checkTasks] (FINISHED) RESULTS: ✔️ ' + schedGood + ', ❌ ' + schedBad + ', ➖ ' + schedSkip);
                    this.tasksInProg = false;
                    this.evServ.publish('noteSched', true);
                }
            }
            else {
                this.tasksInProg = false;
                this.evServ.publish('noteSched', true);
                this.logger.info('\uD83D\uDD14 [noteServ|checkTasks] (NIL) No Future Due Tasks Not Completed.');
            }
        });
    }
    ////////////////////////////////////////////////////////////////
    noteRegisterActions() {
        let regATOpts = { types: [] };
        let shiftAType = { id: 'shift-atype', actions: [{ id: 'shift-snooze', title: 'Snooze' }, { id: 'shift-view', title: 'View' }] };
        regATOpts.types.push(shiftAType);
        let taskAType = { id: 'task-atype', actions: [{ id: 'task-snooze', title: 'Snooze' }, { id: 'task-view', title: 'View' }, { id: 'task-do', title: 'Mark As Done' }] };
        regATOpts.types.push(taskAType);
        _capacitor_local_notifications__WEBPACK_IMPORTED_MODULE_0__.LocalNotifications.registerActionTypes(regATOpts);
    }
    ////////////////////////////////////////////////////////////////
    noteCancel(noteId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('\uD83D\uDD14 [noteServ|noteCancel] ()...');
            let schedCount = 0;
            let schedIds = [];
            let cancelCount = 0;
            let finishCount = 0;
            const schedRes = yield this.notePending();
            if (schedRes.result && schedRes.data.length > 0) {
                schedCount = schedRes.data.length;
                for (let i = 0; i < schedRes.data.length; i++) {
                    schedIds.push(schedRes.data[i].id);
                }
            }
            ;
            let cancelOpts = { notifications: [] };
            if (noteId !== null) {
                if (schedCount > 0 && schedIds.includes(noteId)) {
                    cancelCount = 1;
                    this.logger.info('\uD83D\uDD14 [noteServ|noteCancel] (Single Cancel) Cancelling [1] Note (' + noteId + ')...');
                    cancelOpts.notifications.push({ id: noteId });
                    _capacitor_local_notifications__WEBPACK_IMPORTED_MODULE_0__.LocalNotifications.cancel(cancelOpts);
                }
                else {
                    this.logger.info('\uD83D\uDD14 [noteServ|noteCancel] (Single Cancel - NIL) Note ID #' + noteId + ' is Not Scheduled');
                }
            }
            else {
                if (schedCount > 0) {
                    cancelCount = schedCount;
                    this.logger.info('\uD83D\uDD14 [noteServ|noteCancel] (Cancel All) Cancelling [' + schedCount + '] Notes (' + schedIds.join(', ') + ')...');
                    for (let i = 0; i < schedIds.length; i++) {
                        cancelOpts.notifications.push({ id: schedIds[i] });
                    }
                    ;
                    _capacitor_local_notifications__WEBPACK_IMPORTED_MODULE_0__.LocalNotifications.cancel(cancelOpts);
                }
                else {
                    this.logger.info('\uD83D\uDD14 [noteServ|noteCancel] (Cancel All - NIL) No Notes Are Scheduled.');
                }
            }
            ;
            if (cancelCount > 0) {
                setTimeout(() => (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
                    const nowSched = yield this.notePending();
                    finishCount = nowSched.data.length;
                    const successNo = schedCount - cancelCount;
                    if (successNo === finishCount) {
                        this.logger.info('\uD83D\uDD14 [noteServ|noteCancel] (SUCCESS): Finished Cancelling ALL [' + cancelCount + '] Notes');
                        this.evServ.publish('delDone', true);
                        return Promise.resolve(true);
                    }
                    else {
                        this.logger.info('\uD83D\uDD14 [noteServ|noteCancel] (ERROR): Expected [' + successNo + '] Remaining Notes BUT Found [' + finishCount + ']');
                        this.evServ.publish('delDone', false);
                        return Promise.resolve(false);
                    }
                }), 1000);
            }
            else {
                this.logger.info('\uD83D\uDD14 [noteServ|noteCancel] (NIL) No Scheduled Notes to Cancel.');
                return Promise.resolve(true);
            }
        });
    }
    ////////////////////////////////////////////////////////////////
    noteCreateChannel() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            let appOpts = { id: 'sheriff-alerts', name: 'Sheriff Alerts', description: 'Alerts for Sheriff App', sound: 'sheriffnote.wav', importance: 5, visibility: 1, lights: true, lightColor: '#FF9800', vibration: true };
            let depOpts = { id: 'deputy-alerts', name: 'Deputy Alerts', description: 'Alerts re Deputy API', sound: 'sheriffnother.wav', importance: 5, visibility: 1, lights: true, lightColor: '#F26A60', vibration: true };
            let snoopOpts = { id: 'snoop-alerts', name: 'Snoop Alerts', description: 'Alerts Channel for Snooping', sound: 'sheriffpst.wav', importance: 5, visibility: 1, lights: false, lightColor: '#AAAAAA', vibration: false };
            _capacitor_local_notifications__WEBPACK_IMPORTED_MODULE_0__.LocalNotifications.createChannel(appOpts);
            _capacitor_local_notifications__WEBPACK_IMPORTED_MODULE_0__.LocalNotifications.createChannel(snoopOpts);
            _capacitor_local_notifications__WEBPACK_IMPORTED_MODULE_0__.LocalNotifications.createChannel(depOpts);
            return new Promise((resolve) => { setTimeout(resolve, 1000); })
                .then(() => (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
                const nowChanRes = yield this.noteListChannels();
                if (nowChanRes.result && nowChanRes.data.length > 0) {
                    const nCList = nowChanRes.data;
                    const myListArr = nCList.filter(c => c.id === 'sheriff-alerts');
                    if (myListArr.length > 0) {
                        return Promise.resolve(true);
                    }
                    else {
                        return Promise.resolve(false);
                    }
                }
                else {
                    return Promise.resolve(false);
                }
            })).catch(err => { this.logger.info('\uD83D\uDD14 [noteServ|noteCreateChannel] (Error): ' + JSON.stringify(err)); });
        });
    }
    ////////////////////////////////////////////////////////////////
    noteDeleteChannel() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            let chanOpts = { id: 'sheriff-alerts', name: 'Sheriff Alerts', description: 'Alert Channel for Sheriff App', sound: 'sheriffnote.wav', importance: 5, visibility: 1, lights: true, lightColor: '#FF9800', vibration: true };
            _capacitor_local_notifications__WEBPACK_IMPORTED_MODULE_0__.LocalNotifications.deleteChannel(chanOpts);
            return new Promise((resolve) => { setTimeout(resolve, 1000); })
                .then(() => (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
                const nowChanRes = yield this.noteListChannels();
                if (nowChanRes.result && nowChanRes.data.length > 0) {
                    const nCList = nowChanRes.data;
                    const myListArr = nCList.filter(c => c.id === 'sheriff-alerts');
                    if (myListArr.length === 0) { //this.logger.info('\uD83D\uDD14 [noteServ|noteDeleteChannel] (SUCCESS): Sheriff Channel NOT FOUND - OK');
                        return Promise.resolve(true);
                    }
                    else {
                        return Promise.resolve(false);
                    }
                }
                else { //this.logger.info('\uD83D\uDD14 [noteServ|noteDeleteChannel] (SUCCESS): No Channels Found.');
                    return Promise.resolve(true);
                }
            }));
        });
    }
    ////////////////////////////////////////////////////////////////
    noteListChannels() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const listChanRes = yield _capacitor_local_notifications__WEBPACK_IMPORTED_MODULE_0__.LocalNotifications.listChannels();
                if (listChanRes.channels.length > 0) {
                    return Promise.resolve({ result: true, data: listChanRes.channels });
                }
                else {
                    return Promise.resolve({ result: true, data: [] });
                }
            }
            catch (listChanErr) {
                this.logger.info('\uD83D\uDD14 [noteServ|noteListChannels] (Error): ' + listChanErr);
            }
        });
    }
    ////////////////////////////////////////////////////////////////
    noteListenAddGotNote() {
        _capacitor_local_notifications__WEBPACK_IMPORTED_MODULE_0__.LocalNotifications.addListener('localNotificationReceived', nOb => {
            this.logger.info('\uD83D\uDD14 [noteServ|noteListen] (ALERT) Received Alert ID #' + nOb.id);
            const nO = nOb;
            if (nO.id === this.tNoteId) {
                this.logger.info('\uD83D\uDD14 [noteServ|noteListen] (TEST ALERT) Alert is a [TEST]...');
                this.evServ.publish('testNoteStage', { stage: 'gottest', data: nO });
            }
            else {
                this.logger.info('\uD83D\uDD14 [noteServ|noteListen] (ALERT) Alert is [NOT A TEST]...');
            }
        });
    }
    ////////////////////////////////////////////////////////////////
    noteListenAddGotAction() {
        const trigTimeOptArr = [
            { mins: 30, label: '\uD83D\uDFE0 in 30 Minutes' },
            { mins: 60, label: '\uD83D\uDFE0 in an Hour' },
            { mins: 120, label: '\uD83D\uDFE0 in 2 Hours' },
            { mins: 360, label: '\uD83D\uDFE0 in 6 Hours' },
            { mins: 720, label: '\uD83D\uDFE0 in 12 Hours' },
            { mins: 1440, label: '\uD83D\uDFE0 Tomorrow' },
            { mins: 2880, label: '\uD83D\uDFE0 in 2 Days' },
            { mins: 4320, label: '\uD83D\uDFE0 in 3 Days' },
            { mins: 10080, label: '\uD83D\uDFE0 Next Week' }
        ];
        const snoozeOpts = (noteO) => {
            let viableOpts = [];
            const eventD = new Date(noteO.extra.evdate);
            const nowD = new Date();
            const ifB4 = (plusM) => { const snoozeTrig = this.dT.addMs(nowD, plusM); if (this.dT.isB(snoozeTrig, eventD)) {
                return { result: true, trigger: snoozeTrig };
            }
            else {
                return { result: false, trigger: null };
            } };
            for (let i = 0; i < trigTimeOptArr.length; i++) {
                const testOptOb = trigTimeOptArr[i];
                const testB4Res = ifB4(testOptOb.mins);
                if (testB4Res.result) {
                    viableOpts.push({ label: testOptOb.label, mins: testOptOb.mins, trigger: testB4Res.trigger });
                }
            }
            ;
            return Promise.resolve(viableOpts);
        };
        _capacitor_local_notifications__WEBPACK_IMPORTED_MODULE_0__.LocalNotifications.addListener('localNotificationActionPerformed', (aOb) => (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            const aO = aOb.notification;
            let isTest = aO.extra.isTest;
            if (aOb.actionId === 'task-snooze' || aOb.actionId === 'shift-snooze') {
                this.logger.info('\uD83D\uDD14 [noteServ|noteListen] (ACTION) Received Action ID #' + aOb.actionId);
                const vSnoozeOpts = yield snoozeOpts(aO);
                let cancelI;
                if (vSnoozeOpts.length > 0) {
                    let mySnoozeOs = [];
                    for (let i = 0; i < vSnoozeOpts.length; i++) {
                        mySnoozeOs.push({ title: vSnoozeOpts[i].label });
                    }
                    ;
                    mySnoozeOs.push({ title: '\u274C CANCEL' });
                    cancelI = mySnoozeOs.findIndex(o => o.title === '\u274C CANCEL');
                    const snoozeRes = yield _capacitor_action_sheet__WEBPACK_IMPORTED_MODULE_6__.ActionSheet.showActions({ title: 'Remind Me Again', options: mySnoozeOs });
                    if (snoozeRes.index === cancelI) {
                        this.evServ.showToast('warning', 'Snooze/Alert Cancelled');
                    }
                    else {
                        const snoozeSelLabel = mySnoozeOs[snoozeRes.index].title;
                        const snoozeSelTrig = vSnoozeOpts.filter(st => st.label === snoozeSelLabel)[0];
                        this.logger.info('\uD83D\uDD14 [noteServ|Action|Snooze] (SELECTED): [MINS]: ' + snoozeSelTrig.mins + ' | [LABEL]: ' + snoozeSelTrig.label + ' | [TRIGGER]: ' + snoozeSelTrig.trigger);
                        const untilDL = this.dT.DifDurStr(new Date(), new Date(aO.extra.evdate));
                        let snoozeBody;
                        if (aO.body.includes('Upcoming')) {
                            const bodyTxtArr = aO.body.split('starts in ');
                            const b4DLTxt = bodyTxtArr[0];
                            snoozeBody = b4DLTxt + 'starts in ' + untilDL;
                        }
                        else if (aO.body.includes('Confirm')) {
                            const bodyTxtArr = aO.body.split('within ');
                            const b4DLTxt = bodyTxtArr[0];
                            snoozeBody = b4DLTxt + 'in ' + untilDL;
                        }
                        else {
                            const bodyTxtArr = aO.body.split('due in ');
                            const b4DLTxt = bodyTxtArr[0];
                            snoozeBody = b4DLTxt + 'due in ' + untilDL;
                        }
                        ;
                        let snoozeNote = { id: aO.id, title: aO.title + ' (𝗦𝗻𝗼𝗼𝘇𝗲𝗱)', body: snoozeBody, largeBody: snoozeBody, schedule: { repeats: false, allowWhileIdle: true, at: snoozeSelTrig.trigger }, smallIcon: 'ic_stat_sheriffnote', iconColor: '#FF9800', sound: 'sheriffnote.wav', ongoing: false, autoCancel: false, extra: { type: aO.extra.type, uctype: aO.extra.uctype, evdate: aO.extra.evdate } };
                        const testSnoozeAt = this.dT.addS(new Date(), 5);
                        if (isTest) {
                            snoozeNote.schedule.at = testSnoozeAt;
                        }
                        ;
                        if (this.hasMyChan) {
                            snoozeNote['channelId'] = 'sheriff-alerts';
                        }
                        ;
                        const snoozeNoteSchedRes = yield _capacitor_local_notifications__WEBPACK_IMPORTED_MODULE_0__.LocalNotifications.schedule({ notifications: [snoozeNote] });
                        if (snoozeNoteSchedRes.notifications.length > 0) {
                            this.logger.info('\uD83D\uDD14 [noteServ|Action|Snooze] (SUCCESS) Snoozed Note #' + snoozeNoteSchedRes.notifications[0].id);
                        }
                        else {
                            this.logger.info('\uD83D\uDD14 [noteServ|Action|Snooze] (ERROR)');
                        }
                    }
                }
                else {
                    this.logger.info('\uD83D\uDD14 [noteServ|Action|Snooze] - No Viable Snooze Times Available.');
                }
            }
            else {
                this.logger.info('\uD83D\uDD14 [noteServ|noteListen] (ACTION) Received Action ID #' + aO.actionId);
            }
        }));
    }
    ////////////////////////////////////////////////////////////////
    noteListenRemoveAll() {
        _capacitor_local_notifications__WEBPACK_IMPORTED_MODULE_0__.LocalNotifications.removeAllListeners();
    }
};
NotificationsService.ctorParameters = () => [
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_10__.NGXLogger },
    { type: _datetime_service__WEBPACK_IMPORTED_MODULE_1__.DateTimeService },
    { type: _sqlite_service__WEBPACK_IMPORTED_MODULE_2__.SQLiteService },
    { type: _events_service__WEBPACK_IMPORTED_MODULE_3__.EventsService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_11__.LoadingController },
    { type: _fairwork_service__WEBPACK_IMPORTED_MODULE_5__.FairworkService },
    { type: _detail_service__WEBPACK_IMPORTED_MODULE_8__.DetailService },
    { type: _firebase_service__WEBPACK_IMPORTED_MODULE_4__.FirebaseService }
];
NotificationsService = (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_12__.Injectable)({ providedIn: 'root' })
    ////////////////////////////////////////////////////////////////
], NotificationsService);



/***/ }),

/***/ 92472:
/*!*****************************************!*\
  !*** ./src/app/services/profileData.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pSels": function() { return /* binding */ pSels; },
/* harmony export */   "iabKeys": function() { return /* binding */ iabKeys; },
/* harmony export */   "pKeys": function() { return /* binding */ pKeys; },
/* harmony export */   "dbTypes": function() { return /* binding */ dbTypes; },
/* harmony export */   "pTypes": function() { return /* binding */ pTypes; },
/* harmony export */   "savePTypes": function() { return /* binding */ savePTypes; },
/* harmony export */   "profileScrapeCode": function() { return /* binding */ profileScrapeCode; },
/* harmony export */   "c2DCObj": function() { return /* binding */ c2DCObj; }
/* harmony export */ });
const pSels = ['#edit-display-name', '#edit-first-name', '#edit-last-name', '#edit-email', '#edit-phone', '#edit-birthday', '#edit-pin', 'div.profile-gender>div>select', 'div.profile-pronouns>div>select', '#edit-custom-pronouns1', '#edit-main-address-street1', '#edit-main-address-city', '#edit-main-address-country', '#edit-main-address-state', '#edit-main-address-postcode', '#edit-emergency-address-contact-name', '#edit-emergency-address-phone'];
const iabKeys = ['dname', 'fname', 'lname', 'email', 'phone', 'dob', 'pin', 'gender', 'pronoun', 'custompn', 'street', 'city', 'country', 'state', 'pcode', 'ename', 'ephone'];
const pKeys = ['photo', 'dname', 'fname', 'lname', 'email', 'phone', 'dob', 'pin', 'gender', 'pronoun', 'custompn', 'street', 'city', 'country', 'state', 'pcode', 'ename', 'ephone'];
const dbTypes = {
    dp_uuk: 'string',
    photo: 'string',
    dname: 'string',
    fname: 'string',
    lname: 'string',
    email: 'string',
    phone: 'number',
    dob: 'string',
    pin: 'number',
    gender: 'number',
    pronoun: 'number',
    custompn: 'string',
    street: 'string',
    city: 'string',
    country: 'number',
    state: 'number',
    pcode: 'number',
    ename: 'string',
    ephone: 'number',
    last_sync: 'number',
    last_modified: 'number'
};
const pTypes = ['string', 'string', 'string', 'string', 'number', 'string', 'number', 'number', 'number', 'string', 'string', 'string', 'number', 'number', 'number', 'string', 'number'];
const savePTypes = ['string', 'string', 'string', 'string', 'number', 'string', 'number', 'number', 'number', 'string', 'string', 'string', 'number', 'number', 'number', 'string', 'number'];
const profileScrapeCode = `(()=>{
  const pLoop=setInterval(()=>{
    const dnameEle=$("#edit-display-name");
    const fnameEle=$("#edit-first-name");
    const lnameEle=$("#edit-last-name");
    const emailEle=$("#edit-email");
    const phoneEle=$("#edit-phone");
    const bdayEle=$("#edit-birthday");
    const kpinEle=$("#edit-pin");
    const genderEle=$("div.profile-gender>div>select");
    const pronounEle=$("div.profile-pronouns>div>select");
    const custompnEle=$("#edit-custom-pronouns1");
    const streetEle=$("#edit-main-address-street1");
    const cityEle=$("#edit-main-address-city");
    const countryEle=$("#edit-main-address-country");
    const stateEle=$("#edit-main-address-state");
    const pcodeEle=$("#edit-main-address-postcode");
    const enameEle=$("#edit-emergency-address-contact-name");
    const ephoneEle=$("#edit-emergency-address-phone");
    if($(dnameEle).length&&$(fnameEle).length&&$(lnameEle).length&&$(emailEle).length&&$(phoneEle).length&&$(bdayEle).length&&$(kpinEle).length&&$(genderEle).length&&$(pronounEle).length&&$(custompnEle).length&&$(streetEle).length&&$(cityEle).length&&$(countryEle).length&&$(stateEle).length&&$(pcodeEle).length&&$(enameEle).length&&$(ephoneEle).length){
      clearInterval(pLoop);
      setTimeout(()=>{
        var dname=$(dnameEle).attr("value");if(dname===null||dname===undefined||dname===""){dname="null"};
        var fname=$(fnameEle).attr("value");if(fname===null||fname===undefined||fname===""){fname="null"};
        var lname=$(lnameEle).attr("value");if(lname===null||lname===undefined||lname===""){lname="null"};
        var email=$(emailEle).attr("value");if(email===null||email===undefined||email===""){email="null"};
        var phone=$(phoneEle).attr("value");if(phone===null||phone===undefined||phone===""){phone="null"};
        var bday=$(bdayEle).attr("value");if(bday===null||bday===undefined||bday===""){bday="null"};
        var kpin=$(kpinEle).attr("value");if(kpin===null||kpin===undefined||kpin===""){kpin="null"};
        var gender=$(genderEle).attr("value");if(gender===null||gender===undefined||gender===""){gender="null"};
        var pronoun=$(pronounEle).attr("value");if(pronoun===null||pronoun===undefined||pronoun===""){pronoun="null"};
        var custompn=$(custompnEle).attr("value");if(custompn===null||custompn===undefined||custompn===""){custompn="null"};
        var street=$(streetEle).attr("value");if(street===null||street===undefined||street===""){street="null"};
        var city=$(cityEle).attr("value");if(city===null||city===undefined||city===""){city="null"};
        var country=$(countryEle).attr("value");if(country===null||country===undefined||country===""){country="null"};
        var state=$(stateEle).attr("value");if(state===null||state===undefined||state===""){state="null"};
        var pcode=$(pcodeEle).attr("value");if(pcode===null||pcode===undefined||pcode===""){pcode="null"};
        var ename=$(enameEle).attr("value");if(ename===null||ename===undefined||ename===""){ename="null"};
        var ephone=$(ephoneEle).attr("value");if(ephone===null||ephone===undefined||ephone===""){ephone="null"};
        window.location.href="sheriff="+dname+"|"+fname+"|"+lname+"|"+email+"|"+phone+"|"+bday+"|"+kpin+"|"+gender+"|"+pronoun+"|"+custompn+"|"+street+"|"+city+"|"+country+"|"+state+"|"+pcode+"|"+ename+"|"+ephone
      },500)
    }
  },250)
})();`;
const c2DCObj = {
    "Aruba": "+297",
    "Afghanistan": "+93",
    "Angola": "+244",
    "Anguilla": "+1264",
    "Åland Islands": "+35818",
    "Albania": "+355",
    "Andorra": "+376",
    "United Arab Emirates": "+971",
    "Argentina": "+54",
    "Armenia": "+374",
    "American Samoa": "+1684",
    "Antarctica": "",
    "French Southern and Antarctic Lands": "+262",
    "Antigua and Barbuda": "+1268",
    "Australia": "+61",
    "Austria": "+43",
    "Azerbaijan": "+994",
    "Burundi": "+257",
    "Belgium": "+32",
    "Benin": "+229",
    "Burkina Faso": "+226",
    "Bangladesh": "+880",
    "Bulgaria": "+359",
    "Bahrain": "+973",
    "Bahamas": "+1242",
    "Bosnia and Herzegovina": "+387",
    "Saint Barthélemy": "+590",
    "Saint Helena, Ascension and Tristan da Cunha": "+290,47",
    "Belarus": "+375",
    "Belize": "+501",
    "Bermuda": "+1441",
    "Bolivia": "+591",
    "Caribbean Netherlands": "+599",
    "Brazil": "+55",
    "Barbados": "+1246",
    "Brunei": "+673",
    "Bhutan": "+975",
    "Bouvet Island": "+47",
    "Botswana": "+267",
    "Central African Republic": "+236",
    "Canada": "+1",
    "Cocos (Keeling) Islands": "+61",
    "Switzerland": "+41",
    "Chile": "+56",
    "China": "+86",
    "Ivory Coast": "+225",
    "Cameroon": "+237",
    "DR Congo": "+243",
    "Republic of the Congo": "+242",
    "Cook Islands": "+682",
    "Colombia": "+57",
    "Comoros": "+269",
    "Cape Verde": "+238",
    "Costa Rica": "+506",
    "Cuba": "+53",
    "Curaçao": "+599",
    "Christmas Island": "+61",
    "Cayman Islands": "+1345",
    "Cyprus": "+357",
    "Czechia": "+420",
    "Germany": "+49",
    "Djibouti": "+253",
    "Dominica": "+1767",
    "Denmark": "+45",
    "Dominican Republic": "+1809,829,849",
    "Algeria": "+213",
    "Ecuador": "+593",
    "Egypt": "+20",
    "Eritrea": "+291",
    "Western Sahara": "+2125288,125289",
    "Spain": "+34",
    "Estonia": "+372",
    "Ethiopia": "+251",
    "Finland": "+358",
    "Fiji": "+679",
    "Falkland Islands": "+500",
    "France": "+33",
    "Faroe Islands": "+298",
    "Micronesia": "+691",
    "Gabon": "+241",
    "United Kingdom": "+44",
    "Georgia": "+995",
    "Guernsey": "+44",
    "Ghana": "+233",
    "Gibraltar": "+350",
    "Guinea": "+224",
    "Guadeloupe": "+590",
    "Gambia": "+220",
    "Guinea-Bissau": "+245",
    "Equatorial Guinea": "+240",
    "Greece": "+30",
    "Grenada": "+1473",
    "Greenland": "+299",
    "Guatemala": "+502",
    "French Guiana": "+594",
    "Guam": "+1671",
    "Guyana": "+592",
    "Hong Kong": "+852",
    "Heard Island and McDonald Islands": "",
    "Honduras": "+504",
    "Croatia": "+385",
    "Haiti": "+509",
    "Hungary": "+36",
    "Indonesia": "+62",
    "Isle of Man": "+44",
    "India": "+91",
    "British Indian Ocean Territory": "+246",
    "Ireland": "+353",
    "Iran": "+98",
    "Iraq": "+964",
    "Iceland": "+354",
    "Israel": "+972",
    "Italy": "+39",
    "Jamaica": "+1876",
    "Jersey": "+44",
    "Jordan": "+962",
    "Japan": "+81",
    "Kazakhstan": "+76,7",
    "Kenya": "+254",
    "Kyrgyzstan": "+996",
    "Cambodia": "+855",
    "Kiribati": "+686",
    "Saint Kitts and Nevis": "+1869",
    "South Korea": "+82",
    "Kosovo": "+383",
    "Kuwait": "+965",
    "Laos": "+856",
    "Lebanon": "+961",
    "Liberia": "+231",
    "Libya": "+218",
    "Saint Lucia": "+1758",
    "Liechtenstein": "+423",
    "Sri Lanka": "+94",
    "Lesotho": "+266",
    "Lithuania": "+370",
    "Luxembourg": "+352",
    "Latvia": "+371",
    "Macau": "+853",
    "Saint Martin": "+590",
    "Morocco": "+212",
    "Monaco": "+377",
    "Moldova": "+373",
    "Madagascar": "+261",
    "Maldives": "+960",
    "Mexico": "+52",
    "Marshall Islands": "+692",
    "North Macedonia": "+389",
    "Mali": "+223",
    "Malta": "+356",
    "Myanmar": "+95",
    "Montenegro": "+382",
    "Mongolia": "+976",
    "Northern Mariana Islands": "+1670",
    "Mozambique": "+258",
    "Mauritania": "+222",
    "Montserrat": "+1664",
    "Martinique": "+596",
    "Mauritius": "+230",
    "Malawi": "+265",
    "Malaysia": "+60",
    "Mayotte": "+262",
    "Namibia": "+264",
    "New Caledonia": "+687",
    "Niger": "+227",
    "Norfolk Island": "+672",
    "Nigeria": "+234",
    "Nicaragua": "+505",
    "Niue": "+683",
    "Netherlands": "+31",
    "Norway": "+47",
    "Nepal": "+977",
    "Nauru": "+674",
    "New Zealand": "+64",
    "Oman": "+968",
    "Pakistan": "+92",
    "Panama": "+507",
    "Pitcairn Islands": "+64",
    "Peru": "+51",
    "Philippines": "+63",
    "Palau": "+680",
    "Papua New Guinea": "+675",
    "Poland": "+48",
    "Puerto Rico": "+1787,939",
    "North Korea": "+850",
    "Portugal": "+351",
    "Paraguay": "+595",
    "Palestine": "+970",
    "French Polynesia": "+689",
    "Qatar": "+974",
    "Réunion": "+262",
    "Romania": "+40",
    "Russia": "+73,4,5,8,9",
    "Rwanda": "+250",
    "Saudi Arabia": "+966",
    "Sudan": "+249",
    "Senegal": "+221",
    "Singapore": "+65",
    "South Georgia": "+500",
    "Svalbard and Jan Mayen": "+4779",
    "Solomon Islands": "+677",
    "Sierra Leone": "+232",
    "El Salvador": "+503",
    "San Marino": "+378",
    "Somalia": "+252",
    "Saint Pierre and Miquelon": "+508",
    "Serbia": "+381",
    "South Sudan": "+211",
    "São Tomé and Príncipe": "+239",
    "Suriname": "+597",
    "Slovakia": "+421",
    "Slovenia": "+386",
    "Sweden": "+46",
    "Eswatini": "+268",
    "Sint Maarten": "+1721",
    "Seychelles": "+248",
    "Syria": "+963",
    "Turks and Caicos Islands": "+1649",
    "Chad": "+235",
    "Togo": "+228",
    "Thailand": "+66",
    "Tajikistan": "+992",
    "Tokelau": "+690",
    "Turkmenistan": "+993",
    "Timor-Leste": "+670",
    "Tonga": "+676",
    "Trinidad and Tobago": "+1868",
    "Tunisia": "+216",
    "Turkey": "+90",
    "Tuvalu": "+688",
    "Taiwan": "+886",
    "Tanzania": "+255",
    "Uganda": "+256",
    "Ukraine": "+380",
    "United States Minor Outlying Islands": "+268",
    "Uruguay": "+598",
    "United States": "+1201,202,203,205,206,207,208,209,210,212,213,214,215,216,217,218,219,220,224,225,227,228,229,231,234,239,240,248,251,252,253,254,256,260,262,267,269,270,272,274,276,281,283,301,302,303,304,305,307,308,309,310,312,313,314,315,316,317,318,319,320,321,323,325,327,330,331,334,336,337,339,346,347,351,352,360,361,364,380,385,386,401,402,404,405,406,407,408,409,410,412,413,414,415,417,419,423,424,425,430,432,434,435,440,442,443,447,458,463,464,469,470,475,478,479,480,484,501,502,503,504,505,507,508,509,510,512,513,515,516,517,518,520,530,531,534,539,540,541,551,559,561,562,563,564,567,570,571,573,574,575,580,585,586,601,602,603,605,606,607,608,609,610,612,614,615,616,617,618,619,620,623,626,628,629,630,631,636,641,646,650,651,657,660,661,662,667,669,678,681,682,701,702,703,704,706,707,708,712,713,714,715,716,717,718,719,720,724,725,727,730,731,732,734,737,740,743,747,754,757,760,762,763,765,769,770,772,773,774,775,779,781,785,786,801,802,803,804,805,806,808,810,812,813,814,815,816,817,818,828,830,831,832,843,845,847,848,850,854,856,857,858,859,860,862,863,864,865,870,872,878,901,903,904,906,907,908,909,910,912,913,914,915,916,917,918,919,920,925,928,929,930,931,934,936,937,938,940,941,947,949,951,952,954,956,959,970,971,972,973,975,978,979,980,984,985,989",
    "Uzbekistan": "+998",
    "Vatican City": "+3906698,79",
    "Saint Vincent and the Grenadines": "+1784",
    "Venezuela": "+58",
    "British Virgin Islands": "+1284",
    "United States Virgin Islands": "+1340",
    "Vietnam": "+84",
    "Vanuatu": "+678",
    "Wallis and Futuna": "+681",
    "Samoa": "+685",
    "Yemen": "+967",
    "South Africa": "+27",
    "Zambia": "+260",
    "Zimbabwe": "+263"
};
/* uglified */
/* window.env = {
  FUNCTION_LOG_DISABLED: true
};
(function($) {
  "use strict";
  var loadImage = function loadImage(file, callback, options) {
      var img = document.createElement("img"), url, oUrl;
      img.onerror = callback;
      img.onload = function() {
          if (oUrl && !(options && options.noRevoke)) {
              loadImage.revokeObjectURL(oUrl)
          }
          if (callback) {
              callback(loadImage.scale(img, options))
          }
      }
      ;
      if (loadImage.isInstanceOf("Blob", file) || loadImage.isInstanceOf("File", file)) {
          url = oUrl = loadImage.createObjectURL(file);
          img._type = file.type
      } else if (typeof file === "string") {
          url = file;
          if (options && options.crossOrigin) {
              img.crossOrigin = options.crossOrigin
          }
      } else {
          return false
      }
      if (url) {
          img.src = url;
          return img
      }
      return loadImage.readFile(file, function(e) {
          var target = e.target;
          if (target && target.result) {
              img.src = target.result
          } else {
              if (callback) {
                  callback(e)
              }
          }
      })
  }
    , urlAPI = window.createObjectURL && window || window.URL && URL.revokeObjectURL && URL || window.webkitURL && webkitURL;
  loadImage.isInstanceOf = function(type, obj) {
      return Object.prototype.toString.call(obj) === "[object " + type + "]"
  }
  ;
  loadImage.transformCoordinates = function() {
      return
  }
  ;
  loadImage.getTransformedOptions = function(img, options) {
      var aspectRatio = options.aspectRatio, newOptions, i, width, height;
      if (!aspectRatio) {
          return options
      }
      newOptions = {};
      for (i in options) {
          if (options.hasOwnProperty(i)) {
              newOptions[i] = options[i]
          }
      }
      newOptions.crop = true;
      width = img.naturalWidth || img.width;
      height = img.naturalHeight || img.height;
      if (width / height > aspectRatio) {
          newOptions.maxWidth = height * aspectRatio;
          newOptions.maxHeight = height
      } else {
          newOptions.maxWidth = width;
          newOptions.maxHeight = width / aspectRatio
      }
      return newOptions
  }
  ;
  loadImage.renderImageToCanvas = function(canvas, img, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight) {
      canvas.getContext("2d").drawImage(img, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight);
      return canvas
  }
  ;
  loadImage.hasCanvasOption = function(options) {
      return options.canvas || options.crop || options.aspectRatio
  }
  ;
  loadImage.scale = function(img, options) {
      options = options || {};
      var canvas = document.createElement("canvas"), useCanvas = img.getContext || loadImage.hasCanvasOption(options) && canvas.getContext, width = img.naturalWidth || img.width, height = img.naturalHeight || img.height, destWidth = width, destHeight = height, maxWidth, maxHeight, minWidth, minHeight, sourceWidth, sourceHeight, sourceX, sourceY, tmp, scaleUp = function scaleUp() {
          var scale = Math.max((minWidth || destWidth) / destWidth, (minHeight || destHeight) / destHeight);
          if (scale > 1) {
              destWidth = destWidth * scale;
              destHeight = destHeight * scale
          }
      }, scaleDown = function scaleDown() {
          var scale = Math.min((maxWidth || destWidth) / destWidth, (maxHeight || destHeight) / destHeight);
          if (scale < 1) {
              destWidth = destWidth * scale;
              destHeight = destHeight * scale
          }
      };
      if (useCanvas) {
          options = loadImage.getTransformedOptions(img, options);
          sourceX = options.left || 0;
          sourceY = options.top || 0;
          if (options.sourceWidth) {
              sourceWidth = options.sourceWidth;
              if (options.right !== undefined && options.left === undefined) {
                  sourceX = width - sourceWidth - options.right
              }
          } else {
              sourceWidth = width - sourceX - (options.right || 0)
          }
          if (options.sourceHeight) {
              sourceHeight = options.sourceHeight;
              if (options.bottom !== undefined && options.top === undefined) {
                  sourceY = height - sourceHeight - options.bottom
              }
          } else {
              sourceHeight = height - sourceY - (options.bottom || 0)
          }
          destWidth = sourceWidth;
          destHeight = sourceHeight
      }
      maxWidth = options.maxWidth;
      maxHeight = options.maxHeight;
      minWidth = options.minWidth;
      minHeight = options.minHeight;
      if (useCanvas && maxWidth && maxHeight && options.crop) {
          destWidth = maxWidth;
          destHeight = maxHeight;
          tmp = sourceWidth / sourceHeight - maxWidth / maxHeight;
          if (tmp < 0) {
              sourceHeight = maxHeight * sourceWidth / maxWidth;
              if (options.top === undefined && options.bottom === undefined) {
                  sourceY = (height - sourceHeight) / 2
              }
          } else if (tmp > 0) {
              sourceWidth = maxWidth * sourceHeight / maxHeight;
              if (options.left === undefined && options.right === undefined) {
                  sourceX = (width - sourceWidth) / 2
              }
          }
      } else {
          if (options.contain || options.cover) {
              minWidth = maxWidth = maxWidth || minWidth;
              minHeight = maxHeight = maxHeight || minHeight
          }
          if (options.cover) {
              scaleDown();
              scaleUp()
          } else {
              scaleUp();
              scaleDown()
          }
      }
      if (useCanvas) {
          canvas.width = destWidth;
          canvas.height = destHeight;
          loadImage.transformCoordinates(canvas, options);
          return loadImage.renderImageToCanvas(canvas, img, sourceX, sourceY, sourceWidth, sourceHeight, 0, 0, destWidth, destHeight)
      }
      img.width = destWidth;
      img.height = destHeight;
      return img
  }
  ;
  loadImage.createObjectURL = function(file) {
      return urlAPI ? urlAPI.createObjectURL(file) : false
  }
  ;
  loadImage.revokeObjectURL = function(url) {
      return urlAPI ? urlAPI.revokeObjectURL(url) : false
  }
  ;
  loadImage.readFile = function(file, callback, method) {
      if (window.FileReader) {
          var fileReader = new FileReader;
          fileReader.onload = fileReader.onerror = callback;
          method = method || "readAsDataURL";
          if (fileReader[method]) {
              fileReader[method](file);
              return fileReader
          }
      }
      return false
  }
  ;
  if (typeof define === "function" && define.amd) {
      define(function() {
          return loadImage
      })
  } else {
      $.loadImage = loadImage
  }
}
)(this);
(function(factory) {
  "use strict";
  if (typeof define === "function" && define.amd) {
      define(["load-image"], factory)
  } else {
      factory(window.loadImage)
  }
}
)(function(loadImage) {
  "use strict";
  var hasblobSlice = window.Blob && (Blob.prototype.slice || Blob.prototype.webkitSlice || Blob.prototype.mozSlice);
  loadImage.blobSlice = hasblobSlice && function() {
      var slice = this.slice || this.webkitSlice || this.mozSlice;
      return slice.apply(this, arguments)
  }
  ;
  loadImage.metaDataParsers = {
      jpeg: {
          65505: []
      }
  };
  loadImage.parseMetaData = function(file, callback, options) {
      options = options || {};
      var that = this
        , maxMetaDataSize = options.maxMetaDataSize || 262144
        , data = {}
        , noMetaData = !(window.DataView && file && file.size >= 12 && file.type === "image/jpeg" && loadImage.blobSlice);
      if (noMetaData || !loadImage.readFile(loadImage.blobSlice.call(file, 0, maxMetaDataSize), function(e) {
          if (e.target.error) {
              console.log(e.target.error);
              callback(data);
              return
          }
          var buffer = e.target.result, dataView = new DataView(buffer), offset = 2, maxOffset = dataView.byteLength - 4, headLength = offset, markerBytes, markerLength, parsers, i;
          if (dataView.getUint16(0) === 65496) {
              while (offset < maxOffset) {
                  markerBytes = dataView.getUint16(offset);
                  if (markerBytes >= 65504 && markerBytes <= 65519 || markerBytes === 65534) {
                      markerLength = dataView.getUint16(offset + 2) + 2;
                      if (offset + markerLength > dataView.byteLength) {
                          console.log("Invalid meta data: Invalid segment size.");
                          break
                      }
                      parsers = loadImage.metaDataParsers.jpeg[markerBytes];
                      if (parsers) {
                          for (i = 0; i < parsers.length; i += 1) {
                              parsers[i].call(that, dataView, offset, markerLength, data, options)
                          }
                      }
                      offset += markerLength;
                      headLength = offset
                  } else {
                      break
                  }
              }
              if (!options.disableImageHead && headLength > 6) {
                  if (buffer.slice) {
                      data.imageHead = buffer.slice(0, headLength)
                  } else {
                      data.imageHead = new Uint8Array(buffer).subarray(0, headLength)
                  }
              }
          } else {
              console.log("Invalid JPEG file: Missing JPEG marker.")
          }
          callback(data)
      }, "readAsArrayBuffer")) {
          callback(data)
      }
  }
});
(function(factory) {
  "use strict";
  if (typeof define === "function" && define.amd) {
      define(["jquery", "jquery.ui.widget"], factory)
  } else {
      factory(window.jQuery)
  }
}
)(function($) {
  "use strict";
  $.support.fileInput = !(new RegExp("(Android (1\\.[0156]|2\\.[01]))" + "|(Windows Phone (OS 7|8\\.0))|(XBLWP)|(ZuneWP)|(WPDesktop)" + "|(w(eb)?OSBrowser)|(webOS)" + "|(Kindle/(1\\.0|2\\.[05]|3\\.0))").test(window.navigator.userAgent) || $('<input type="file">').prop("disabled"));
  $.support.xhrFileUpload = !!(window.ProgressEvent && window.FileReader);
  $.support.xhrFormDataFileUpload = !!window.FormData;
  $.support.blobSlice = window.Blob && (Blob.prototype.slice || Blob.prototype.webkitSlice || Blob.prototype.mozSlice);
  $.widget("blueimp.fileupload", {
      options: {
          dropZone: $(document),
          pasteZone: $(document),
          fileInput: undefined,
          replaceFileInput: true,
          paramName: undefined,
          singleFileUploads: true,
          limitMultiFileUploads: undefined,
          limitMultiFileUploadSize: undefined,
          limitMultiFileUploadSizeOverhead: 512,
          sequentialUploads: false,
          limitConcurrentUploads: undefined,
          forceIframeTransport: false,
          redirect: undefined,
          redirectParamName: undefined,
          postMessage: undefined,
          multipart: true,
          maxChunkSize: undefined,
          uploadedBytes: undefined,
          recalculateProgress: true,
          progressInterval: 100,
          bitrateInterval: 500,
          autoUpload: true,
          messages: {
              uploadedBytes: "Uploaded bytes exceed file size"
          },
          i18n: function i18n(message, context) {
              message = this.messages[message] || message.toString();
              if (context) {
                  $.each(context, function(key, value) {
                      message = message.replace("{" + key + "}", value)
                  })
              }
              return message
          },
          formData: function formData(form) {
              return form.serializeArray()
          },
          add: function add(e, data) {
              if (e.isDefaultPrevented()) {
                  return false
              }
              if (data.autoUpload || data.autoUpload !== false && $(this).fileupload("option", "autoUpload")) {
                  data.process().done(function() {
                      data.submit()
                  })
              }
          },
          processData: false,
          contentType: false,
          cache: false
      },
      _specialOptions: ["fileInput", "dropZone", "pasteZone", "multipart", "forceIframeTransport"],
      _blobSlice: $.support.blobSlice && function() {
          var slice = this.slice || this.webkitSlice || this.mozSlice;
          return slice.apply(this, arguments)
      }
      ,
      _BitrateTimer: function _BitrateTimer() {
          this.timestamp = Date.now ? Date.now() : (new Date).getTime();
          this.loaded = 0;
          this.bitrate = 0;
          this.getBitrate = function(now, loaded, interval) {
              var timeDiff = now - this.timestamp;
              if (!this.bitrate || !interval || timeDiff > interval) {
                  this.bitrate = (loaded - this.loaded) * (1e3 / timeDiff) * 8;
                  this.loaded = loaded;
                  this.timestamp = now
              }
              return this.bitrate
          }
      },
      _isXHRUpload: function _isXHRUpload(options) {
          return !options.forceIframeTransport && (!options.multipart && $.support.xhrFileUpload || $.support.xhrFormDataFileUpload)
      },
      _getFormData: function _getFormData(options) {
          var formData;
          if ($.type(options.formData) === "function") {
              return options.formData(options.form)
          }
          if ($.isArray(options.formData)) {
              return options.formData
          }
          if ($.type(options.formData) === "object") {
              formData = [];
              $.each(options.formData, function(name, value) {
                  formData.push({
                      name: name,
                      value: value
                  })
              });
              return formData
          }
          return []
      },
      _getTotal: function _getTotal(files) {
          var total = 0;
          $.each(files, function(index, file) {
              total += file.size || 1
          });
          return total
      },
      _initProgressObject: function _initProgressObject(obj) {
          var progress = {
              loaded: 0,
              total: 0,
              bitrate: 0
          };
          if (obj._progress) {
              $.extend(obj._progress, progress)
          } else {
              obj._progress = progress
          }
      },
      _initResponseObject: function _initResponseObject(obj) {
          var prop;
          if (obj._response) {
              for (prop in obj._response) {
                  if (obj._response.hasOwnProperty(prop)) {
                      delete obj._response[prop]
                  }
              }
          } else {
              obj._response = {}
          }
      },
      _onProgress: function _onProgress(e, data) {
          if (e.lengthComputable) {
              var now = Date.now ? Date.now() : (new Date).getTime(), loaded;
              if (data._time && data.progressInterval && now - data._time < data.progressInterval && e.loaded !== e.total) {
                  return
              }
              data._time = now;
              loaded = Math.floor(e.loaded / e.total * (data.chunkSize || data._progress.total)) + (data.uploadedBytes || 0);
              this._progress.loaded += loaded - data._progress.loaded;
              this._progress.bitrate = this._bitrateTimer.getBitrate(now, this._progress.loaded, data.bitrateInterval);
              data._progress.loaded = data.loaded = loaded;
              data._progress.bitrate = data.bitrate = data._bitrateTimer.getBitrate(now, loaded, data.bitrateInterval);
              this._trigger("progress", $.Event("progress", {
                  delegatedEvent: e
              }), data);
              this._trigger("progressall", $.Event("progressall", {
                  delegatedEvent: e
              }), this._progress)
          }
      },
      _initProgressListener: function _initProgressListener(options) {
          var that = this
            , xhr = options.xhr ? options.xhr() : $.ajaxSettings.xhr();
          if (xhr.upload) {
              $(xhr.upload).bind("progress", function(e) {
                  var oe = e.originalEvent;
                  e.lengthComputable = oe.lengthComputable;
                  e.loaded = oe.loaded;
                  e.total = oe.total;
                  that._onProgress(e, options)
              });
              options.xhr = function() {
                  return xhr
              }
          }
      },
      _isInstanceOf: function _isInstanceOf(type, obj) {
          return Object.prototype.toString.call(obj) === "[object " + type + "]"
      },
      _initXHRData: function _initXHRData(options) {
          var that = this, formData, file = options.files[0], multipart = options.multipart || !$.support.xhrFileUpload, paramName = $.type(options.paramName) === "array" ? options.paramName[0] : options.paramName;
          options.headers = $.extend({}, options.headers);
          if (options.contentRange) {
              options.headers["Content-Range"] = options.contentRange
          }
          if (!multipart || options.blob || !this._isInstanceOf("File", file)) {
              options.headers["Content-Disposition"] = 'attachment; filename="' + encodeURI(file.name) + '"'
          }
          if (!multipart) {
              options.contentType = file.type || "application/octet-stream";
              options.data = options.blob || file
          } else if ($.support.xhrFormDataFileUpload) {
              if (options.postMessage) {
                  formData = this._getFormData(options);
                  if (options.blob) {
                      formData.push({
                          name: paramName,
                          value: options.blob
                      })
                  } else {
                      $.each(options.files, function(index, file) {
                          formData.push({
                              name: $.type(options.paramName) === "array" && options.paramName[index] || paramName,
                              value: file
                          })
                      })
                  }
              } else {
                  if (that._isInstanceOf("FormData", options.formData)) {
                      formData = options.formData
                  } else {
                      formData = new FormData;
                      $.each(this._getFormData(options), function(index, field) {
                          formData.append(field.name, field.value)
                      })
                  }
                  if (options.blob) {
                      formData.append(paramName, options.blob, file.name)
                  } else {
                      $.each(options.files, function(index, file) {
                          if (that._isInstanceOf("File", file) || that._isInstanceOf("Blob", file)) {
                              formData.append($.type(options.paramName) === "array" && options.paramName[index] || paramName, file, file.uploadName || file.name)
                          }
                      })
                  }
              }
              options.data = formData
          }
          options.blob = null
      },
      _initIframeSettings: function _initIframeSettings(options) {
          var targetHost = $("<a></a>").prop("href", options.url).prop("host");
          options.dataType = "iframe " + (options.dataType || "");
          options.formData = this._getFormData(options);
          if (options.redirect && targetHost && targetHost !== location.host) {
              options.formData.push({
                  name: options.redirectParamName || "redirect",
                  value: options.redirect
              })
          }
      },
      _initDataSettings: function _initDataSettings(options) {
          if (this._isXHRUpload(options)) {
              if (!this._chunkedUpload(options, true)) {
                  if (!options.data) {
                      this._initXHRData(options)
                  }
                  this._initProgressListener(options)
              }
              if (options.postMessage) {
                  options.dataType = "postmessage " + (options.dataType || "")
              }
          } else {
              this._initIframeSettings(options)
          }
      },
      _getParamName: function _getParamName(options) {
          var fileInput = $(options.fileInput)
            , paramName = options.paramName;
          if (!paramName) {
              paramName = [];
              fileInput.each(function() {
                  var input = $(this)
                    , name = input.prop("name") || "files[]"
                    , i = (input.prop("files") || [1]).length;
                  while (i) {
                      paramName.push(name);
                      i -= 1
                  }
              });
              if (!paramName.length) {
                  paramName = [fileInput.prop("name") || "files[]"]
              }
          } else if (!$.isArray(paramName)) {
              paramName = [paramName]
          }
          return paramName
      },
      _initFormSettings: function _initFormSettings(options) {
          if (!options.form || !options.form.length) {
              options.form = $(options.fileInput.prop("form"));
              if (!options.form.length) {
                  options.form = $(this.options.fileInput.prop("form"))
              }
          }
          options.paramName = this._getParamName(options);
          if (!options.url) {
              options.url = options.form.prop("action") || location.href
          }
          options.type = (options.type || $.type(options.form.prop("method")) === "string" && options.form.prop("method") || "").toUpperCase();
          if (options.type !== "POST" && options.type !== "PUT" && options.type !== "PATCH") {
              options.type = "POST"
          }
          if (!options.formAcceptCharset) {
              options.formAcceptCharset = options.form.attr("accept-charset")
          }
      },
      _getAJAXSettings: function _getAJAXSettings(data) {
          var options = $.extend({}, this.options, data);
          this._initFormSettings(options);
          this._initDataSettings(options);
          return options
      },
      _getDeferredState: function _getDeferredState(deferred) {
          if (deferred.state) {
              return deferred.state()
          }
          if (deferred.isResolved()) {
              return "resolved"
          }
          if (deferred.isRejected()) {
              return "rejected"
          }
          return "pending"
      },
      _enhancePromise: function _enhancePromise(promise) {
          promise.success = promise.done;
          promise.error = promise.fail;
          promise.complete = promise.always;
          return promise
      },
      _getXHRPromise: function _getXHRPromise(resolveOrReject, context, args) {
          var dfd = $.Deferred()
            , promise = dfd.promise();
          context = context || this.options.context || promise;
          if (resolveOrReject === true) {
              dfd.resolveWith(context, args)
          } else if (resolveOrReject === false) {
              dfd.rejectWith(context, args)
          }
          promise.abort = dfd.promise;
          return this._enhancePromise(promise)
      },
      _addConvenienceMethods: function _addConvenienceMethods(e, data) {
          var that = this
            , getPromise = function getPromise(args) {
              return $.Deferred().resolveWith(that, args).promise()
          };
          data.process = function(resolveFunc, rejectFunc) {
              if (resolveFunc || rejectFunc) {
                  data._processQueue = this._processQueue = (this._processQueue || getPromise([this])).pipe(function() {
                      if (data.errorThrown) {
                          return $.Deferred().rejectWith(that, [data]).promise()
                      }
                      return getPromise(arguments)
                  }).pipe(resolveFunc, rejectFunc)
              }
              return this._processQueue || getPromise([this])
          }
          ;
          data.submit = function() {
              if (this.state() !== "pending") {
                  data.jqXHR = this.jqXHR = that._trigger("submit", $.Event("submit", {
                      delegatedEvent: e
                  }), this) !== false && that._onSend(e, this)
              }
              return this.jqXHR || that._getXHRPromise()
          }
          ;
          data.abort = function() {
              if (this.jqXHR) {
                  return this.jqXHR.abort()
              }
              this.errorThrown = "abort";
              that._trigger("fail", null, this);
              return that._getXHRPromise(false)
          }
          ;
          data.state = function() {
              if (this.jqXHR) {
                  return that._getDeferredState(this.jqXHR)
              }
              if (this._processQueue) {
                  return that._getDeferredState(this._processQueue)
              }
          }
          ;
          data.processing = function() {
              return !this.jqXHR && this._processQueue && that._getDeferredState(this._processQueue) === "pending"
          }
          ;
          data.progress = function() {
              return this._progress
          }
          ;
          data.response = function() {
              return this._response
          }
      },
      _getUploadedBytes: function _getUploadedBytes(jqXHR) {
          var range = jqXHR.getResponseHeader("Range")
            , parts = range && range.split("-")
            , upperBytesPos = parts && parts.length > 1 && parseInt(parts[1], 10);
          return upperBytesPos && upperBytesPos + 1
      },
      _chunkedUpload: function _chunkedUpload(options, testOnly) {
          options.uploadedBytes = options.uploadedBytes || 0;
          var that = this, file = options.files[0], fs = file.size, ub = options.uploadedBytes, mcs = options.maxChunkSize || fs, slice = this._blobSlice, dfd = $.Deferred(), promise = dfd.promise(), jqXHR, _upload;
          if (!(this._isXHRUpload(options) && slice && (ub || mcs < fs)) || options.data) {
              return false
          }
          if (testOnly) {
              return true
          }
          if (ub >= fs) {
              file.error = options.i18n("uploadedBytes");
              return this._getXHRPromise(false, options.context, [null, "error", file.error])
          }
          _upload = function upload() {
              var o = $.extend({}, options)
                , currentLoaded = o._progress.loaded;
              o.blob = slice.call(file, ub, ub + mcs, file.type);
              o.chunkSize = o.blob.size;
              o.contentRange = "bytes " + ub + "-" + (ub + o.chunkSize - 1) + "/" + fs;
              that._initXHRData(o);
              that._initProgressListener(o);
              jqXHR = (that._trigger("chunksend", null, o) !== false && $.ajax(o) || that._getXHRPromise(false, o.context)).done(function(result, textStatus, jqXHR) {
                  ub = that._getUploadedBytes(jqXHR) || ub + o.chunkSize;
                  if (currentLoaded + o.chunkSize - o._progress.loaded) {
                      that._onProgress($.Event("progress", {
                          lengthComputable: true,
                          loaded: ub - o.uploadedBytes,
                          total: ub - o.uploadedBytes
                      }), o)
                  }
                  options.uploadedBytes = o.uploadedBytes = ub;
                  o.result = result;
                  o.textStatus = textStatus;
                  o.jqXHR = jqXHR;
                  that._trigger("chunkdone", null, o);
                  that._trigger("chunkalways", null, o);
                  if (ub < fs) {
                      _upload()
                  } else {
                      dfd.resolveWith(o.context, [result, textStatus, jqXHR])
                  }
              }).fail(function(jqXHR, textStatus, errorThrown) {
                  o.jqXHR = jqXHR;
                  o.textStatus = textStatus;
                  o.errorThrown = errorThrown;
                  that._trigger("chunkfail", null, o);
                  that._trigger("chunkalways", null, o);
                  dfd.rejectWith(o.context, [jqXHR, textStatus, errorThrown])
              })
          }
          ;
          this._enhancePromise(promise);
          promise.abort = function() {
              return jqXHR.abort()
          }
          ;
          _upload();
          return promise
      },
      _beforeSend: function _beforeSend(e, data) {
          if (this._active === 0) {
              this._trigger("start");
              this._bitrateTimer = new this._BitrateTimer;
              this._progress.loaded = this._progress.total = 0;
              this._progress.bitrate = 0
          }
          this._initResponseObject(data);
          this._initProgressObject(data);
          data._progress.loaded = data.loaded = data.uploadedBytes || 0;
          data._progress.total = data.total = this._getTotal(data.files) || 1;
          data._progress.bitrate = data.bitrate = 0;
          this._active += 1;
          this._progress.loaded += data.loaded;
          this._progress.total += data.total
      },
      _onDone: function _onDone(result, textStatus, jqXHR, options) {
          var total = options._progress.total
            , response = options._response;
          if (options._progress.loaded < total) {
              this._onProgress($.Event("progress", {
                  lengthComputable: true,
                  loaded: total,
                  total: total
              }), options)
          }
          response.result = options.result = result;
          response.textStatus = options.textStatus = textStatus;
          response.jqXHR = options.jqXHR = jqXHR;
          this._trigger("done", null, options)
      },
      _onFail: function _onFail(jqXHR, textStatus, errorThrown, options) {
          var response = options._response;
          if (options.recalculateProgress) {
              this._progress.loaded -= options._progress.loaded;
              this._progress.total -= options._progress.total
          }
          response.jqXHR = options.jqXHR = jqXHR;
          response.textStatus = options.textStatus = textStatus;
          response.errorThrown = options.errorThrown = errorThrown;
          this._trigger("fail", null, options)
      },
      _onAlways: function _onAlways(jqXHRorResult, textStatus, jqXHRorError, options) {
          this._trigger("always", null, options)
      },
      _onSend: function _onSend(e, data) {
          if (!data.submit) {
              this._addConvenienceMethods(e, data)
          }
          var that = this, jqXHR, aborted, slot, pipe, options = that._getAJAXSettings(data), send = function send() {
              that._sending += 1;
              options._bitrateTimer = new that._BitrateTimer;
              jqXHR = jqXHR || ((aborted || that._trigger("send", $.Event("send", {
                  delegatedEvent: e
              }), options) === false) && that._getXHRPromise(false, options.context, aborted) || that._chunkedUpload(options) || $.ajax(options)).done(function(result, textStatus, jqXHR) {
                  that._onDone(result, textStatus, jqXHR, options)
              }).fail(function(jqXHR, textStatus, errorThrown) {
                  that._onFail(jqXHR, textStatus, errorThrown, options)
              }).always(function(jqXHRorResult, textStatus, jqXHRorError) {
                  that._onAlways(jqXHRorResult, textStatus, jqXHRorError, options);
                  that._sending -= 1;
                  that._active -= 1;
                  if (options.limitConcurrentUploads && options.limitConcurrentUploads > that._sending) {
                      var nextSlot = that._slots.shift();
                      while (nextSlot) {
                          if (that._getDeferredState(nextSlot) === "pending") {
                              nextSlot.resolve();
                              break
                          }
                          nextSlot = that._slots.shift()
                      }
                  }
                  if (that._active === 0) {
                      that._trigger("stop")
                  }
              });
              return jqXHR
          };
          this._beforeSend(e, options);
          if (this.options.sequentialUploads || this.options.limitConcurrentUploads && this.options.limitConcurrentUploads <= this._sending) {
              if (this.options.limitConcurrentUploads > 1) {
                  slot = $.Deferred();
                  this._slots.push(slot);
                  pipe = slot.pipe(send)
              } else {
                  this._sequence = this._sequence.pipe(send, send);
                  pipe = this._sequence
              }
              pipe.abort = function() {
                  aborted = [undefined, "abort", "abort"];
                  if (!jqXHR) {
                      if (slot) {
                          slot.rejectWith(options.context, aborted)
                      }
                      return send()
                  }
                  return jqXHR.abort()
              }
              ;
              return this._enhancePromise(pipe)
          }
          return send()
      },
      _onAdd: function _onAdd(e, data) {
          var that = this, result = true, options = $.extend({}, this.options, data), files = data.files, filesLength = files.length, limit = options.limitMultiFileUploads, limitSize = options.limitMultiFileUploadSize, overhead = options.limitMultiFileUploadSizeOverhead, batchSize = 0, paramName = this._getParamName(options), paramNameSet, paramNameSlice, fileSet, i, j = 0;
          if (limitSize && (!filesLength || files[0].size === undefined)) {
              limitSize = undefined
          }
          if (!(options.singleFileUploads || limit || limitSize) || !this._isXHRUpload(options)) {
              fileSet = [files];
              paramNameSet = [paramName]
          } else if (!(options.singleFileUploads || limitSize) && limit) {
              fileSet = [];
              paramNameSet = [];
              for (i = 0; i < filesLength; i += limit) {
                  fileSet.push(files.slice(i, i + limit));
                  paramNameSlice = paramName.slice(i, i + limit);
                  if (!paramNameSlice.length) {
                      paramNameSlice = paramName
                  }
                  paramNameSet.push(paramNameSlice)
              }
          } else if (!options.singleFileUploads && limitSize) {
              fileSet = [];
              paramNameSet = [];
              for (i = 0; i < filesLength; i = i + 1) {
                  batchSize += files[i].size + overhead;
                  if (i + 1 === filesLength || batchSize + files[i + 1].size + overhead > limitSize || limit && i + 1 - j >= limit) {
                      fileSet.push(files.slice(j, i + 1));
                      paramNameSlice = paramName.slice(j, i + 1);
                      if (!paramNameSlice.length) {
                          paramNameSlice = paramName
                      }
                      paramNameSet.push(paramNameSlice);
                      j = i + 1;
                      batchSize = 0
                  }
              }
          } else {
              paramNameSet = paramName
          }
          data.originalFiles = files;
          $.each(fileSet || files, function(index, element) {
              var newData = $.extend({}, data);
              newData.files = fileSet ? element : [element];
              newData.paramName = paramNameSet[index];
              that._initResponseObject(newData);
              that._initProgressObject(newData);
              that._addConvenienceMethods(e, newData);
              result = that._trigger("add", $.Event("add", {
                  delegatedEvent: e
              }), newData);
              return result
          });
          return result
      },
      _replaceFileInput: function _replaceFileInput(input) {
          var inputClone = input.clone(true);
          $("<form></form>").append(inputClone)[0].reset();
          input.after(inputClone).detach();
          $.cleanData(input.unbind("remove"));
          this.options.fileInput = this.options.fileInput.map(function(i, el) {
              if (el === input[0]) {
                  return inputClone[0]
              }
              return el
          });
          if (input[0] === this.element[0]) {
              this.element = inputClone
          }
      },
      _handleFileTreeEntry: function _handleFileTreeEntry(entry, path) {
          var that = this, dfd = $.Deferred(), errorHandler = function errorHandler(e) {
              if (e && !e.entry) {
                  e.entry = entry
              }
              dfd.resolve([e])
          }, dirReader;
          path = path || "";
          if (entry.isFile) {
              if (entry._file) {
                  entry._file.relativePath = path;
                  dfd.resolve(entry._file)
              } else {
                  entry.file(function(file) {
                      file.relativePath = path;
                      dfd.resolve(file)
                  }, errorHandler)
              }
          } else if (entry.isDirectory) {
              dirReader = entry.createReader();
              dirReader.readEntries(function(entries) {
                  that._handleFileTreeEntries(entries, path + entry.name + "/").done(function(files) {
                      dfd.resolve(files)
                  }).fail(errorHandler)
              }, errorHandler)
          } else {
              dfd.resolve([])
          }
          return dfd.promise()
      },
      _handleFileTreeEntries: function _handleFileTreeEntries(entries, path) {
          var that = this;
          return $.when.apply($, $.map(entries, function(entry) {
              return that._handleFileTreeEntry(entry, path)
          })).pipe(function() {
              return Array.prototype.concat.apply([], arguments)
          })
      },
      _getDroppedFiles: function _getDroppedFiles(dataTransfer) {
          dataTransfer = dataTransfer || {};
          var items = dataTransfer.items;
          if (items && items.length && (items[0].webkitGetAsEntry || items[0].getAsEntry)) {
              return this._handleFileTreeEntries($.map(items, function(item) {
                  var entry;
                  if (item.webkitGetAsEntry) {
                      entry = item.webkitGetAsEntry();
                      if (entry) {
                          entry._file = item.getAsFile()
                      }
                      return entry
                  }
                  return item.getAsEntry()
              }))
          }
          return $.Deferred().resolve($.makeArray(dataTransfer.files)).promise()
      },
      _getSingleFileInputFiles: function _getSingleFileInputFiles(fileInput) {
          fileInput = $(fileInput);
          var entries = fileInput.prop("webkitEntries") || fileInput.prop("entries"), files, value;
          if (entries && entries.length) {
              return this._handleFileTreeEntries(entries)
          }
          files = $.makeArray(fileInput.prop("files"));
          if (!files.length) {
              value = fileInput.prop("value");
              if (!value) {
                  return $.Deferred().resolve([]).promise()
              }
              files = [{
                  name: value.replace(/^.*\\/, "")
              }]
          } else if (files[0].name === undefined && files[0].fileName) {
              $.each(files, function(index, file) {
                  file.name = file.fileName;
                  file.size = file.fileSize
              })
          }
          return $.Deferred().resolve(files).promise()
      },
      _getFileInputFiles: function _getFileInputFiles(fileInput) {
          if (!(fileInput instanceof $) || fileInput.length === 1) {
              return this._getSingleFileInputFiles(fileInput)
          }
          return $.when.apply($, $.map(fileInput, this._getSingleFileInputFiles)).pipe(function() {
              return Array.prototype.concat.apply([], arguments)
          })
      },
      _onChange: function _onChange(e) {
          var that = this
            , data = {
              fileInput: $(e.target),
              form: $(e.target.form)
          };
          this._getFileInputFiles(data.fileInput).always(function(files) {
              data.files = files;
              if (that.options.replaceFileInput) {
                  that._replaceFileInput(data.fileInput)
              }
              if (that._trigger("change", $.Event("change", {
                  delegatedEvent: e
              }), data) !== false) {
                  that._onAdd(e, data)
              }
          })
      },
      _onPaste: function _onPaste(e) {
          var items = e.originalEvent && e.originalEvent.clipboardData && e.originalEvent.clipboardData.items
            , data = {
              files: []
          };
          if (items && items.length) {
              $.each(items, function(index, item) {
                  var file = item.getAsFile && item.getAsFile();
                  if (file) {
                      data.files.push(file)
                  }
              });
              if (this._trigger("paste", $.Event("paste", {
                  delegatedEvent: e
              }), data) !== false) {
                  this._onAdd(e, data)
              }
          }
      },
      _onDrop: function _onDrop(e) {
          e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;
          var that = this
            , dataTransfer = e.dataTransfer
            , data = {};
          if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {
              e.preventDefault();
              this._getDroppedFiles(dataTransfer).always(function(files) {
                  data.files = files;
                  if (that._trigger("drop", $.Event("drop", {
                      delegatedEvent: e
                  }), data) !== false) {
                      that._onAdd(e, data)
                  }
              })
          }
      },
      _onDragOver: function _onDragOver(e) {
          e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;
          var dataTransfer = e.dataTransfer;
          if (dataTransfer && $.inArray("Files", dataTransfer.types) !== -1 && this._trigger("dragover", $.Event("dragover", {
              delegatedEvent: e
          })) !== false) {
              e.preventDefault();
              dataTransfer.dropEffect = "copy"
          }
      },
      _initEventHandlers: function _initEventHandlers() {
          if (this._isXHRUpload(this.options)) {
              this._on(this.options.dropZone, {
                  dragover: this._onDragOver,
                  drop: this._onDrop
              });
              this._on(this.options.pasteZone, {
                  paste: this._onPaste
              })
          }
          if ($.support.fileInput) {
              this._on(this.options.fileInput, {
                  change: this._onChange
              })
          }
      },
      _destroyEventHandlers: function _destroyEventHandlers() {
          this._off(this.options.dropZone, "dragover drop");
          this._off(this.options.pasteZone, "paste");
          this._off(this.options.fileInput, "change")
      },
      _setOption: function _setOption(key, value) {
          var reinit = $.inArray(key, this._specialOptions) !== -1;
          if (reinit) {
              this._destroyEventHandlers()
          }
          this._super(key, value);
          if (reinit) {
              this._initSpecialOptions();
              this._initEventHandlers()
          }
      },
      _initSpecialOptions: function _initSpecialOptions() {
          var options = this.options;
          if (options.fileInput === undefined) {
              options.fileInput = this.element.is('input[type="file"]') ? this.element : this.element.find('input[type="file"]')
          } else if (!(options.fileInput instanceof $)) {
              options.fileInput = $(options.fileInput)
          }
          if (!(options.dropZone instanceof $)) {
              options.dropZone = $(options.dropZone)
          }
          if (!(options.pasteZone instanceof $)) {
              options.pasteZone = $(options.pasteZone)
          }
      },
      _getRegExp: function _getRegExp(str) {
          var parts = str.split("/")
            , modifiers = parts.pop();
          parts.shift();
          return new RegExp(parts.join("/"),modifiers)
      },
      _isRegExpOption: function _isRegExpOption(key, value) {
          return key !== "url" && $.type(value) === "string" && /^\/.*\/[igm]{0,3}$/.test(value)
      },
      _initDataAttributes: function _initDataAttributes() {
          var that = this
            , options = this.options;
          $.each($(this.element[0].cloneNode(false)).data(), function(key, value) {
              if (that._isRegExpOption(key, value)) {
                  value = that._getRegExp(value)
              }
              options[key] = value
          })
      },
      _create: function _create() {
          this._initDataAttributes();
          this._initSpecialOptions();
          this._slots = [];
          this._sequence = this._getXHRPromise(true);
          this._sending = this._active = 0;
          this._initProgressObject(this);
          this._initEventHandlers()
      },
      active: function active() {
          return this._active
      },
      progress: function progress() {
          return this._progress
      },
      add: function add(data) {
          var that = this;
          if (!data || this.options.disabled) {
              return
          }
          if (data.fileInput && !data.files) {
              this._getFileInputFiles(data.fileInput).always(function(files) {
                  data.files = files;
                  that._onAdd(null, data)
              })
          } else {
              data.files = $.makeArray(data.files);
              this._onAdd(null, data)
          }
      },
      send: function send(data) {
          if (data && !this.options.disabled) {
              if (data.fileInput && !data.files) {
                  var that = this, dfd = $.Deferred(), promise = dfd.promise(), jqXHR, aborted;
                  promise.abort = function() {
                      aborted = true;
                      if (jqXHR) {
                          return jqXHR.abort()
                      }
                      dfd.reject(null, "abort", "abort");
                      return promise
                  }
                  ;
                  this._getFileInputFiles(data.fileInput).always(function(files) {
                      if (aborted) {
                          return
                      }
                      if (!files.length) {
                          dfd.reject();
                          return
                      }
                      data.files = files;
                      jqXHR = that._onSend(null, data).then(function(result, textStatus, jqXHR) {
                          dfd.resolve(result, textStatus, jqXHR)
                      }, function(jqXHR, textStatus, errorThrown) {
                          dfd.reject(jqXHR, textStatus, errorThrown)
                      })
                  });
                  return this._enhancePromise(promise)
              }
              data.files = $.makeArray(data.files);
              if (data.files.length) {
                  return this._onSend(null, data)
              }
          }
          return this._getXHRPromise(false, data && data.context)
      }
  })
});
(function(factory) {
  "use strict";
  if (typeof define === "function" && define.amd) {
      define(["jquery", "./jquery.fileupload"], factory)
  } else {
      factory(window.jQuery)
  }
}
)(function($) {
  "use strict";
  var originalAdd = $.blueimp.fileupload.prototype.options.add;
  $.widget("blueimp.fileupload", $.blueimp.fileupload, {
      options: {
          processQueue: [],
          add: function add(e, data) {
              var $this = $(this);
              data.process(function() {
                  return $this.fileupload("process", data)
              });
              originalAdd.call(this, e, data)
          }
      },
      processActions: {},
      _processFile: function _processFile(data, originalData) {
          var that = this
            , dfd = $.Deferred().resolveWith(that, [data])
            , chain = dfd.promise();
          this._trigger("process", null, data);
          $.each(data.processQueue, function(i, settings) {
              var func = function func(data) {
                  if (originalData.errorThrown) {
                      return $.Deferred().rejectWith(that, [originalData]).promise()
                  }
                  return that.processActions[settings.action].call(that, data, settings)
              };
              chain = chain.pipe(func, settings.always && func)
          });
          chain.done(function() {
              that._trigger("processdone", null, data);
              that._trigger("processalways", null, data)
          }).fail(function() {
              that._trigger("processfail", null, data);
              that._trigger("processalways", null, data)
          });
          return chain
      },
      _transformProcessQueue: function _transformProcessQueue(options) {
          var processQueue = [];
          $.each(options.processQueue, function() {
              var settings = {}
                , action = this.action
                , prefix = this.prefix === true ? action : this.prefix;
              $.each(this, function(key, value) {
                  if ($.type(value) === "string" && value.charAt(0) === "@") {
                      settings[key] = options[value.slice(1) || (prefix ? prefix + key.charAt(0).toUpperCase() + key.slice(1) : key)]
                  } else {
                      settings[key] = value
                  }
              });
              processQueue.push(settings)
          });
          options.processQueue = processQueue
      },
      processing: function processing() {
          return this._processing
      },
      process: function process(data) {
          var that = this
            , options = $.extend({}, this.options, data);
          if (options.processQueue && options.processQueue.length) {
              this._transformProcessQueue(options);
              if (this._processing === 0) {
                  this._trigger("processstart")
              }
              $.each(data.files, function(index) {
                  var opts = index ? $.extend({}, options) : options
                    , func = function func() {
                      if (data.errorThrown) {
                          return $.Deferred().rejectWith(that, [data]).promise()
                      }
                      return that._processFile(opts, data)
                  };
                  opts.index = index;
                  that._processing += 1;
                  that._processingQueue = that._processingQueue.pipe(func, func).always(function() {
                      that._processing -= 1;
                      if (that._processing === 0) {
                          that._trigger("processstop")
                      }
                  })
              })
          }
          return this._processingQueue
      },
      _create: function _create() {
          this._super();
          this._processing = 0;
          this._processingQueue = $.Deferred().resolveWith(this).promise()
      }
  })
});
(function(factory) {
  "use strict";
  if (typeof define === "function" && define.amd) {
      define(["jquery", "tmpl", "./jquery.fileupload-image", "./jquery.fileupload-audio", "./jquery.fileupload-video", "./jquery.fileupload-validate"], factory)
  } else {
      factory(window.jQuery, window.tmpl)
  }
}
)(function($, tmpl) {
  "use strict";
  $.blueimp.fileupload.prototype._specialOptions.push("filesContainer", "uploadTemplateId", "downloadTemplateId");
  $.widget("blueimp.fileupload", $.blueimp.fileupload, {
      options: {
          autoUpload: false,
          uploadTemplateId: "template-upload",
          downloadTemplateId: "template-download",
          filesContainer: undefined,
          prependFiles: false,
          dataType: "json",
          getNumberOfFiles: function getNumberOfFiles() {
              return this.filesContainer.children().not(".processing").length
          },
          getFilesFromResponse: function getFilesFromResponse(data) {
              if (data.result && $.isArray(data.result.files)) {
                  return data.result.files
              }
              return []
          },
          add: function add(e, data) {
              if (e.isDefaultPrevented()) {
                  return false
              }
              var $this = $(this)
                , that = $this.data("blueimp-fileupload") || $this.data("fileupload")
                , options = that.options;
              data.context = that._renderUpload(data.files).data("data", data).addClass("processing");
              options.filesContainer[options.prependFiles ? "prepend" : "append"](data.context);
              that._forceReflow(data.context);
              $.when(that._transition(data.context), data.process(function() {
                  return $this.fileupload("process", data)
              })).always(function() {
                  data.context.each(function(index) {
                      $(this).find(".size").text(that._formatFileSize(data.files[index].size))
                  }).removeClass("processing");
                  that._renderPreviews(data)
              }).done(function() {
                  data.context.find(".start").prop("disabled", false);
                  if (that._trigger("added", e, data) !== false && (options.autoUpload || data.autoUpload) && data.autoUpload !== false) {
                      data.submit()
                  }
              }).fail(function() {
                  if (data.files.error) {
                      data.context.each(function(index) {
                          var error = data.files[index].error;
                          if (error) {
                              $(this).find(".error").text(error)
                          }
                      })
                  }
              })
          },
          send: function send(e, data) {
              if (e.isDefaultPrevented()) {
                  return false
              }
              var that = $(this).data("blueimp-fileupload") || $(this).data("fileupload");
              if (data.context && data.dataType && data.dataType.substr(0, 6) === "iframe") {
                  data.context.find(".progress").addClass(!$.support.transition && "progress-animated").attr("aria-valuenow", 100).children().first().css("width", "100%")
              }
              return that._trigger("sent", e, data)
          },
          done: function done(e, data) {
              if (e.isDefaultPrevented()) {
                  return false
              }
              var that = $(this).data("blueimp-fileupload") || $(this).data("fileupload"), getFilesFromResponse = data.getFilesFromResponse || that.options.getFilesFromResponse, files = getFilesFromResponse(data), template, deferred;
              if (data.context) {
                  data.context.each(function(index) {
                      var file = files[index] || {
                          error: "Empty file upload result"
                      };
                      deferred = that._addFinishedDeferreds();
                      that._transition($(this)).done(function() {
                          var node = $(this);
                          template = that._renderDownload([file]).replaceAll(node);
                          that._forceReflow(template);
                          that._transition(template).done(function() {
                              data.context = $(this);
                              that._trigger("completed", e, data);
                              that._trigger("finished", e, data);
                              deferred.resolve()
                          })
                      })
                  })
              } else {
                  template = that._renderDownload(files)[that.options.prependFiles ? "prependTo" : "appendTo"](that.options.filesContainer);
                  that._forceReflow(template);
                  deferred = that._addFinishedDeferreds();
                  that._transition(template).done(function() {
                      data.context = $(this);
                      that._trigger("completed", e, data);
                      that._trigger("finished", e, data);
                      deferred.resolve()
                  })
              }
          },
          fail: function fail(e, data) {
              if (e.isDefaultPrevented()) {
                  return false
              }
              var that = $(this).data("blueimp-fileupload") || $(this).data("fileupload"), template, deferred;
              if (data.context) {
                  data.context.each(function(index) {
                      if (data.errorThrown !== "abort") {
                          var file = data.files[index];
                          file.error = file.error || data.errorThrown || true;
                          deferred = that._addFinishedDeferreds();
                          that._transition($(this)).done(function() {
                              var node = $(this);
                              template = that._renderDownload([file]).replaceAll(node);
                              that._forceReflow(template);
                              that._transition(template).done(function() {
                                  data.context = $(this);
                                  that._trigger("failed", e, data);
                                  that._trigger("finished", e, data);
                                  deferred.resolve()
                              })
                          })
                      } else {
                          deferred = that._addFinishedDeferreds();
                          that._transition($(this)).done(function() {
                              $(this).remove();
                              that._trigger("failed", e, data);
                              that._trigger("finished", e, data);
                              deferred.resolve()
                          })
                      }
                  })
              } else if (data.errorThrown !== "abort") {
                  data.context = that._renderUpload(data.files)[that.options.prependFiles ? "prependTo" : "appendTo"](that.options.filesContainer).data("data", data);
                  that._forceReflow(data.context);
                  deferred = that._addFinishedDeferreds();
                  that._transition(data.context).done(function() {
                      data.context = $(this);
                      that._trigger("failed", e, data);
                      that._trigger("finished", e, data);
                      deferred.resolve()
                  })
              } else {
                  that._trigger("failed", e, data);
                  that._trigger("finished", e, data);
                  that._addFinishedDeferreds().resolve()
              }
          },
          progress: function progress(e, data) {
              if (e.isDefaultPrevented()) {
                  return false
              }
              var progress = Math.floor(data.loaded / data.total * 100);
              if (data.context) {
                  data.context.each(function() {
                      $(this).find(".progress").attr("aria-valuenow", progress).children().first().css("width", progress + "%")
                  })
              }
          },
          progressall: function progressall(e, data) {
              if (e.isDefaultPrevented()) {
                  return false
              }
              var $this = $(this)
                , progress = Math.floor(data.loaded / data.total * 100)
                , globalProgressNode = $this.find(".fileupload-progress")
                , extendedProgressNode = globalProgressNode.find(".progress-extended");
              if (extendedProgressNode.length) {
                  extendedProgressNode.html(($this.data("blueimp-fileupload") || $this.data("fileupload"))._renderExtendedProgress(data))
              }
              globalProgressNode.find(".progress").attr("aria-valuenow", progress).children().first().css("width", progress + "%")
          },
          start: function start(e) {
              if (e.isDefaultPrevented()) {
                  return false
              }
              var that = $(this).data("blueimp-fileupload") || $(this).data("fileupload");
              that._resetFinishedDeferreds();
              that._transition($(this).find(".fileupload-progress")).done(function() {
                  that._trigger("started", e)
              })
          },
          stop: function stop(e) {
              if (e.isDefaultPrevented()) {
                  return false
              }
              var that = $(this).data("blueimp-fileupload") || $(this).data("fileupload")
                , deferred = that._addFinishedDeferreds();
              $.when.apply($, that._getFinishedDeferreds()).done(function() {
                  that._trigger("stopped", e)
              });
              that._transition($(this).find(".fileupload-progress")).done(function() {
                  $(this).find(".progress").attr("aria-valuenow", "0").children().first().css("width", "0%");
                  $(this).find(".progress-extended").html("&nbsp;");
                  deferred.resolve()
              })
          },
          processstart: function processstart(e) {
              if (e.isDefaultPrevented()) {
                  return false
              }
              $(this).addClass("fileupload-processing")
          },
          processstop: function processstop(e) {
              if (e.isDefaultPrevented()) {
                  return false
              }
              $(this).removeClass("fileupload-processing")
          },
          destroy: function destroy(e, data) {
              if (e.isDefaultPrevented()) {
                  return false
              }
              var that = $(this).data("blueimp-fileupload") || $(this).data("fileupload")
                , removeNode = function removeNode() {
                  that._transition(data.context).done(function() {
                      $(this).remove();
                      that._trigger("destroyed", e, data)
                  })
              };
              if (data.url) {
                  data.dataType = data.dataType || that.options.dataType;
                  $.ajax(data).done(removeNode)
              } else {
                  removeNode()
              }
          }
      },
      _resetFinishedDeferreds: function _resetFinishedDeferreds() {
          this._finishedUploads = []
      },
      _addFinishedDeferreds: function _addFinishedDeferreds(deferred) {
          if (!deferred) {
              deferred = $.Deferred()
          }
          this._finishedUploads.push(deferred);
          return deferred
      },
      _getFinishedDeferreds: function _getFinishedDeferreds() {
          return this._finishedUploads
      },
      _enableDragToDesktop: function _enableDragToDesktop() {
          var link = $(this)
            , url = link.prop("href")
            , name = link.prop("download")
            , type = "application/octet-stream";
          link.bind("dragstart", function(e) {
              try {
                  e.originalEvent.dataTransfer.setData("DownloadURL", [type, name, url].join(":"))
              } catch (ignore) {}
          })
      },
      _formatFileSize: function _formatFileSize(bytes) {
          if (typeof bytes !== "number") {
              return ""
          }
          if (bytes >= 1e9) {
              return (bytes / 1e9).toFixed(2) + " GB"
          }
          if (bytes >= 1e6) {
              return (bytes / 1e6).toFixed(2) + " MB"
          }
          return (bytes / 1e3).toFixed(2) + " KB"
      },
      _formatBitrate: function _formatBitrate(bits) {
          if (typeof bits !== "number") {
              return ""
          }
          if (bits >= 1e9) {
              return (bits / 1e9).toFixed(2) + " Gbit/s"
          }
          if (bits >= 1e6) {
              return (bits / 1e6).toFixed(2) + " Mbit/s"
          }
          if (bits >= 1e3) {
              return (bits / 1e3).toFixed(2) + " kbit/s"
          }
          return bits.toFixed(2) + " bit/s"
      },
      _formatTime: function _formatTime(seconds) {
          var date = new Date(seconds * 1e3)
            , days = Math.floor(seconds / 86400);
          days = days ? days + "d " : "";
          return days + ("0" + date.getUTCHours()).slice(-2) + ":" + ("0" + date.getUTCMinutes()).slice(-2) + ":" + ("0" + date.getUTCSeconds()).slice(-2)
      },
      _formatPercentage: function _formatPercentage(floatValue) {
          return (floatValue * 100).toFixed(2) + " %"
      },
      _renderExtendedProgress: function _renderExtendedProgress(data) {
          return this._formatBitrate(data.bitrate) + " | " + this._formatTime((data.total - data.loaded) * 8 / data.bitrate) + " | " + this._formatPercentage(data.loaded / data.total) + " | " + this._formatFileSize(data.loaded) + " / " + this._formatFileSize(data.total)
      },
      _renderTemplate: function _renderTemplate(func, files) {
          if (!func) {
              return $()
          }
          var result = func({
              files: files,
              formatFileSize: this._formatFileSize,
              options: this.options
          });
          if (result instanceof $) {
              return result
          }
          return $(this.options.templatesContainer).html(result).children()
      },
      _renderPreviews: function _renderPreviews(data) {
          data.context.find(".preview").each(function(index, elm) {
              $(elm).append(data.files[index].preview)
          })
      },
      _renderUpload: function _renderUpload(files) {
          return this._renderTemplate(this.options.uploadTemplate, files)
      },
      _renderDownload: function _renderDownload(files) {
          return this._renderTemplate(this.options.downloadTemplate, files).find("a[download]").each(this._enableDragToDesktop).end()
      },
      _startHandler: function _startHandler(e) {
          e.preventDefault();
          var button = $(e.currentTarget)
            , template = button.closest(".template-upload")
            , data = template.data("data");
          button.prop("disabled", true);
          if (data && data.submit) {
              data.submit()
          }
      },
      _cancelHandler: function _cancelHandler(e) {
          e.preventDefault();
          var template = $(e.currentTarget).closest(".template-upload,.template-download")
            , data = template.data("data") || {};
          data.context = data.context || template;
          if (data.abort) {
              data.abort()
          } else {
              data.errorThrown = "abort";
              this._trigger("fail", e, data)
          }
      },
      _deleteHandler: function _deleteHandler(e) {
          e.preventDefault();
          var button = $(e.currentTarget);
          this._trigger("destroy", e, $.extend({
              context: button.closest(".template-download"),
              type: "DELETE"
          }, button.data()))
      },
      _forceReflow: function _forceReflow(node) {
          return $.support.transition && node.length && node[0].offsetWidth
      },
      _transition: function _transition(node) {
          var dfd = $.Deferred();
          if ($.support.transition && node.hasClass("fade") && node.is(":visible")) {
              node.bind($.support.transition.end, function(e) {
                  if (e.target === node[0]) {
                      node.unbind($.support.transition.end);
                      dfd.resolveWith(node)
                  }
              }).toggleClass("in")
          } else {
              node.toggleClass("in");
              dfd.resolveWith(node)
          }
          return dfd
      },
      _initButtonBarEventHandlers: function _initButtonBarEventHandlers() {
          var fileUploadButtonBar = this.element.find(".fileupload-buttonbar")
            , filesList = this.options.filesContainer;
          this._on(fileUploadButtonBar.find(".start"), {
              click: function click(e) {
                  e.preventDefault();
                  filesList.find(".start").click()
              }
          });
          this._on(fileUploadButtonBar.find(".cancel"), {
              click: function click(e) {
                  e.preventDefault();
                  filesList.find(".cancel").click()
              }
          });
          this._on(fileUploadButtonBar.find(".delete"), {
              click: function click(e) {
                  e.preventDefault();
                  filesList.find(".toggle:checked").closest(".template-download").find(".delete").click();
                  fileUploadButtonBar.find(".toggle").prop("checked", false)
              }
          });
          this._on(fileUploadButtonBar.find(".toggle"), {
              change: function change(e) {
                  filesList.find(".toggle").prop("checked", $(e.currentTarget).is(":checked"))
              }
          })
      },
      _destroyButtonBarEventHandlers: function _destroyButtonBarEventHandlers() {
          this._off(this.element.find(".fileupload-buttonbar").find(".start, .cancel, .delete"), "click");
          this._off(this.element.find(".fileupload-buttonbar .toggle"), "change.")
      },
      _initEventHandlers: function _initEventHandlers() {
          this._super();
          this._on(this.options.filesContainer, {
              "click .start": this._startHandler,
              "click .cancel": this._cancelHandler,
              "click .delete": this._deleteHandler
          });
          this._initButtonBarEventHandlers()
      },
      _destroyEventHandlers: function _destroyEventHandlers() {
          this._destroyButtonBarEventHandlers();
          this._off(this.options.filesContainer, "click");
          this._super()
      },
      _enableFileInputButton: function _enableFileInputButton() {
          this.element.find(".fileinput-button input").prop("disabled", false).parent().removeClass("disabled")
      },
      _disableFileInputButton: function _disableFileInputButton() {
          this.element.find(".fileinput-button input").prop("disabled", true).parent().addClass("disabled")
      },
      _initTemplates: function _initTemplates() {
          var options = this.options;
          options.templatesContainer = this.document[0].createElement(options.filesContainer.prop("nodeName"));
          if (tmpl) {
              if (options.uploadTemplateId) {
                  options.uploadTemplate = tmpl(options.uploadTemplateId)
              }
              if (options.downloadTemplateId) {
                  options.downloadTemplate = tmpl(options.downloadTemplateId)
              }
          }
      },
      _initFilesContainer: function _initFilesContainer() {
          var options = this.options;
          if (options.filesContainer === undefined) {
              options.filesContainer = this.element.find(".files")
          } else if (!(options.filesContainer instanceof $)) {
              options.filesContainer = $(options.filesContainer)
          }
      },
      _initSpecialOptions: function _initSpecialOptions() {
          this._super();
          this._initFilesContainer();
          this._initTemplates()
      },
      _create: function _create() {
          this._super();
          this._resetFinishedDeferreds();
          if (!$.support.fileInput) {
              this._disableFileInputButton()
          }
      },
      enable: function enable() {
          var wasDisabled = false;
          if (this.options.disabled) {
              wasDisabled = true
          }
          this._super();
          if (wasDisabled) {
              this.element.find("input, button").prop("disabled", false);
              this._enableFileInputButton()
          }
      },
      disable: function disable() {
          if (!this.options.disabled) {
              this.element.find("input, button").prop("disabled", true);
              this._disableFileInputButton()
          }
          this._super()
      }
  })
});
DP.imageUploader = Backbone.View.extend({
  uploadUI: null,
  regFile: /(\.|\/)(jpe?g|png)$/i,
  messages: {
      errors: {
          maxFileSize: "File is too big",
          minFileSize: "File is too small",
          acceptFileTypes: "You can't upload files of this type",
          maxNumberOfFiles: "Max number of files exceeded",
          uploadedBytes: "Uploaded bytes exceed file size",
          emptyResult: "Empty file upload result"
      },
      error: "Error",
      start: "Start",
      cancel: "Cancel",
      destroy: "Delete"
  },
  initialize: function initialize(options) {
      var _this = this;
      var blnIsIE = $.browser.msie;
      var version = parseInt($.browser.version, 10);
      var blnIsLegacy = blnIsIE && version < 10;
      if (_.has(options, "regFile"))
          _this.regFile = options.regFile;
      if (blnIsLegacy)
          this.uploadUI = $(this.el).fileupload({
              contentType: "text/html"
          });
      this.uploadUI = $(this.el).fileupload({
          url: options.url,
          acceptFileTypes: _this.regFile,
          maxFileSize: options.maxFileSize,
          minFileSize: options.minFileSize,
          dataType: "iframejson",
          converters: {
              "html iframejson": function htmlIframejson(htmlEncodedJson) {
                  return $.parseJSON($("<div/>").html(htmlEncodedJson).text())
              },
              "iframe iframejson": function iframeIframejson(iframe) {
                  return $.parseJSON(iframe.find("body").text())
              }
          },
          add: function add(e, data) {
              var file = data.files[0];
              options.fnBeforeLoad && options.fnBeforeLoad();
              _this.removePhoto();
              var strName = file.name;
              if (!_this.regFile.test(strName)) {
                  options.fnLoadFail && options.fnLoadFail(_this.messages["errors"]["acceptFileTypes"]);
                  return false
              }
              if (file.error) {
                  var errorKey = file.error;
                  _log(_this.messages.errors);
                  options.fnLoadFail && options.fnLoadFail(_this.messages["errors"][errorKey]);
                  return false
              }
              if (blnIsLegacy) {
                  _this.$(options.previewImgEl || ".file_upload_preview").html(strName);
                  options.fnLoadSuccess && options.fnLoadSuccess(file)
              } else {
                  loadImage(file, function(img) {
                      options.defaultImgEl && _this.$(options.defaultImgEl).hide();
                      _this.$(options.previewImgEl || ".file_upload_preview").html(img);
                      options.fnLoadSuccess && options.fnLoadSuccess(file)
                  }, {
                      maxWidth: options.maxWidth || 140,
                      maxHeight: options.maxHeight || 140,
                      canvas: true
                  })
              }
              _this.uploadUI.data("data", data)
          }
      })
  },
  uploadPhoto: function uploadPhoto(params, fnSuccess, fnError, fnComplete) {
      if (this.uploadUI.data("data")) {
          _log(this.uploadUI.data("data"));
          this.uploadUI.data("data").submit().success(fnSuccess).error(fnError).complete(fnComplete)
      }
  },
  removePhoto: function removePhoto() {
      this.uploadUI.data("data", null)
  },
  hasPhoto: function hasPhoto() {
      return this.uploadUI.data("data") != null
  }
});
(function(factory) {
  "use strict";
  if (typeof define === "function" && define.amd) {
      define(["jquery"], factory)
  } else {
      factory(window.jQuery)
  }
}
)(function($) {
  "use strict";
  var counter = 0;
  $.ajaxTransport("iframe", function(options) {
      if (options.async) {
          var initialIframeSrc = options.initialIframeSrc || "javascript:false;", form, iframe, addParamChar;
          return {
              send: function send(_, completeCallback) {
                  form = $('<form style="display:none;"></form>');
                  form.attr("accept-charset", options.formAcceptCharset);
                  addParamChar = /\?/.test(options.url) ? "&" : "?";
                  if (options.type === "DELETE") {
                      options.url = options.url + addParamChar + "_method=DELETE";
                      options.type = "POST"
                  } else if (options.type === "PUT") {
                      options.url = options.url + addParamChar + "_method=PUT";
                      options.type = "POST"
                  } else if (options.type === "PATCH") {
                      options.url = options.url + addParamChar + "_method=PATCH";
                      options.type = "POST"
                  }
                  counter += 1;
                  iframe = $('<iframe src="' + initialIframeSrc + '" name="iframe-transport-' + counter + '"></iframe>').bind("load", function() {
                      var fileInputClones, paramNames = $.isArray(options.paramName) ? options.paramName : [options.paramName];
                      iframe.unbind("load").bind("load", function() {
                          var response;
                          try {
                              response = iframe.contents();
                              if (!response.length || !response[0].firstChild) {
                                  throw new Error
                              }
                          } catch (e) {
                              response = undefined
                          }
                          completeCallback(200, "success", {
                              iframe: response
                          });
                          $('<iframe src="' + initialIframeSrc + '"></iframe>').appendTo(form);
                          window.setTimeout(function() {
                              form.remove()
                          }, 0)
                      });
                      form.prop("target", iframe.prop("name")).prop("action", options.url).prop("method", options.type);
                      if (options.formData) {
                          $.each(options.formData, function(index, field) {
                              $('<input type="hidden"/>').prop("name", field.name).val(field.value).appendTo(form)
                          })
                      }
                      if (options.fileInput && options.fileInput.length && options.type === "POST") {
                          fileInputClones = options.fileInput.clone();
                          options.fileInput.after(function(index) {
                              return fileInputClones[index]
                          });
                          if (options.paramName) {
                              options.fileInput.each(function(index) {
                                  $(this).prop("name", paramNames[index] || options.paramName)
                              })
                          }
                          form.append(options.fileInput).prop("enctype", "multipart/form-data").prop("encoding", "multipart/form-data");
                          options.fileInput.removeAttr("form")
                      }
                      form.submit();
                      if (fileInputClones && fileInputClones.length) {
                          options.fileInput.each(function(index, input) {
                              var clone = $(fileInputClones[index]);
                              $(input).prop("name", clone.prop("name")).attr("form", clone.attr("form"));
                              clone.replaceWith(input)
                          })
                      }
                  });
                  form.append(iframe).appendTo(document.body)
              },
              abort: function abort() {
                  if (iframe) {
                      iframe.unbind("load").prop("src", initialIframeSrc)
                  }
                  if (form) {
                      form.remove()
                  }
              }
          }
      }
  });
  $.ajaxSetup({
      converters: {
          "iframe text": function iframeText(iframe) {
              return iframe && $(iframe[0].body).text()
          },
          "iframe json": function iframeJson(iframe) {
              return iframe && $.parseJSON($(iframe[0].body).text())
          },
          "iframe html": function iframeHtml(iframe) {
              return iframe && $(iframe[0].body).html()
          },
          "iframe xml": function iframeXml(iframe) {
              var xmlDoc = iframe && iframe[0];
              return xmlDoc && $.isXMLDoc(xmlDoc) ? xmlDoc : $.parseXML(xmlDoc.XMLDocument && xmlDoc.XMLDocument.xml || $(xmlDoc.body).html())
          },
          "iframe script": function iframeScript(iframe) {
              return iframe && $.globalEval($(iframe[0].body).text())
          }
      }
  })
});
 */ 


/***/ }),

/***/ 52314:
/*!******************************************!*\
  !*** ./src/app/services/push.service.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PushService": function() { return /* binding */ PushService; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ionic/angular */ 80476);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var _events_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events.service */ 80106);
/* harmony import */ var _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @capacitor/push-notifications */ 98748);
/* harmony import */ var _storage_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./storage.service */ 71188);
/* harmony import */ var _app_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app.service */ 66475);
/* harmony import */ var _firebase_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./firebase.service */ 19446);
/* harmony import */ var _detail_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./detail.service */ 52153);
/* harmony import */ var _deputy_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./deputy.service */ 22092);












/////////////////////////////////////////////////////
let PushService = class PushService {
    /////////////////////////////////////////////////////
    constructor(logger, evServ, appServ, platform, storeServ, fireServ, dS, modalCtrl, deputy) {
        this.logger = logger;
        this.evServ = evServ;
        this.appServ = appServ;
        this.platform = platform;
        this.storeServ = storeServ;
        this.fireServ = fireServ;
        this.dS = dS;
        this.modalCtrl = modalCtrl;
        this.deputy = deputy;
        /////////////////////////////////////////////////////
        this.pSIcos = '\uD83D\uDCAC';
        this.FCMToken = null;
        this.pNReady = false;
        this.pNLastMessage = {
            title: null,
            subtitle: null,
            body: null,
            id: null,
            badge: null,
            notification: null,
            data: null,
            click_action: null,
            link: null,
            group: null,
            groupSummary: null
        };
        this.pNLastAction = {
            actionId: null,
            inputValue: null,
            notification: null
        };
        this.userSettings = null;
        this.pushTopics = {
            tsheet: { enabled: null, time: 0 },
            snoop: { enabled: null }
        };
        this.iamIsOpen = false;
    }
    /////////////////////////////////////////////////////
    doPushNoteInit() {
        this.platform.ready().then(() => {
            this.evServ.subscribe('pushNoteInit', (stageRes) => (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
                if (stageRes.stage === 'permissions') {
                    this.logger.info('[pushServ|doPushNoteInit] ' + this.pSIcos + ' (Stage): Permissions | Result: ' + stageRes.result);
                    if (stageRes.result) {
                        this.initPushNoteListeners();
                    }
                    else {
                        this.evServ.destroy('pushNoteInit');
                    }
                }
                else if (stageRes.stage === 'listeners') {
                    if (stageRes.result) {
                        this.storeServ.setItem('fireMsgToken', String(stageRes.token));
                        this.FCMToken = stageRes.token;
                        this.fireServ.onFCMTokenChange(stageRes.token);
                        this.initPNChannels();
                        this.logger.info('[pushServ|doPushServInit] ' + this.pSIcos + ' (Stage): Listeners/Registration | SUCCESS | Token: ' + stageRes.token.substring(0, 10));
                    }
                    else {
                        this.evServ.destroy('pushNoteInit');
                        this.FCMToken = null;
                        this.storeServ.removeItem('fireMsgToken');
                        this.evServ.publish('setFCMToken', { result: false, data: null });
                        this.logger.info('[pushServ|doPushServInit] ' + this.pSIcos + ' (Stage): Listeners/Registration | FAIL | Error: ' + stageRes.error);
                    }
                }
                else if (stageRes.stage === 'channels') {
                    this.logger.info('[pushServ|doPushNoteInit] ' + this.pSIcos + ' (Stage): Channels | Result: ' + stageRes.result);
                    if (stageRes.result) {
                        this.pNReady = true;
                        this.logger.info('[pushServ|doPushNoteInit] ' + this.pSIcos + ' (INITIALIZATION COMPLETE): SUCCESS! pNReady=TRUE');
                    }
                    else {
                        this.pNReady = false;
                        this.logger.info('[pushServ|doPushNoteInit] ' + this.pSIcos + ' (INITIALIZATION FAILED): pNReady=FALSE');
                    }
                    ;
                    this.evServ.destroy('pushNoteInit');
                }
                else if (stageRes.stage === 'topics') {
                    this.logger.info('[pushServ|doPushNoteInit] ' + this.pSIcos + ' (Stage): Topics | Result: ' + stageRes.result);
                }
            }));
            this.initPushNotePerms();
        });
    }
    ////////////////////////////////////////////////////////////////
    changeTopicSettings(topic, key, value) {
        this.pushTopics[topic][key] = value;
        this.logger.info('\uD83D\uDCAC [pushServ|changeTopicSettings] (CHANGED) - pushTopics.' + topic + '.' + key + ' >>> TO = ' + JSON.stringify(value));
    }
    ////////////////////////////////////////////////////////////////
    initPushTopics() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('\uD83D\uDCAC [pushServ|initSettings] ()...');
            this.userSettings = yield this.dS.getSettings();
            this.pushTopics.tsheet.enabled = this.userSettings.alerts.options.alertEvents.value.tsheet;
            this.pushTopics.tsheet.time = this.userSettings.alerts.options.alertBefore.value.tsheet;
            this.pushTopics.snoop.enabled = this.userSettings.snoop.options.activated;
            this.evServ.publish('pushNoteInit', { stage: 'topics', result: true });
        });
    }
    /////////////////////////////////////////////////////
    initPushNotePerms() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[pushServ|doPushNotePerms] ' + this.pSIcos + ' ()...');
            const checkPRes = yield _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_1__.PushNotifications.checkPermissions();
            if (checkPRes && checkPRes.receive === 'granted') {
                this.evServ.publish('pushNoteInit', { stage: 'permissions', result: true });
            }
            else {
                const getPRes = yield _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_1__.PushNotifications.requestPermissions();
                if (getPRes && getPRes.receive === 'granted') {
                    this.evServ.publish('pushNoteInit', { stage: 'permissions', result: true });
                }
                else {
                    this.evServ.publish('pushNoteInit', { stage: 'permissions', result: false });
                }
            }
        });
    }
    /////////////////////////////////////////////////////
    initPushNoteListeners() {
        this.logger.info('[pushServ|doPushNoteListeners] ' + this.pSIcos + ' ()...');
        const addPushListeners = () => {
            _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_1__.PushNotifications.addListener('registration', (token) => (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
                this.evServ.publish('pushNoteInit', { stage: 'listeners', result: true, token: token.value });
                yield this.deputy.setSServerFCM(token.value);
            }));
            _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_1__.PushNotifications.addListener('registrationError', (error) => { this.evServ.publish('pushNoteInit', { stage: 'listeners', result: false, error: error }); });
            _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_1__.PushNotifications.addListener('pushNotificationReceived', (pNote) => {
                this.pNLastMessage = pNote;
                const showInApp = this.appServ.aIsActive;
                if (showInApp) {
                    this.showInAppPushNote(pNote);
                }
                ;
                this.logger.info('[pushServ|Event] ' + this.pSIcos + ' (EVENT): "pushNotificationReceived" - ShowInApp?: ' + showInApp.toString().toUpperCase());
            });
            _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_1__.PushNotifications.addListener('pushNotificationActionPerformed', (pNoteAction) => {
                const showInApp = this.appServ.aIsActive;
                if (showInApp) {
                    this.showInAppAction(pNoteAction);
                }
                ;
                this.logger.info('[pushServ|Event] ' + this.pSIcos + ' (EVENT): "pushNotificationActionPerformed" - ShowInApp?: ' + showInApp.toString().toUpperCase());
            });
            setTimeout(() => { _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_1__.PushNotifications.register(); }, 1000);
        };
        _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_1__.PushNotifications.removeAllListeners();
        setTimeout(() => { addPushListeners(); }, 1000);
    }
    ///////////////////////////////////////////////////// 
    initPNChannels() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[pushServ|initPNChannels] ' + this.pSIcos + ' ()...');
            const listChanRes = yield _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_1__.PushNotifications.listChannels();
            if (listChanRes.channels.length > 0) {
                let hasMyChan = false;
                for (let i = 0; i < listChanRes.channels.length; i++) {
                    const chanO = listChanRes.channels[i];
                    if (chanO.id.toString() === 'sheriff-alerts') {
                        hasMyChan = true;
                    }
                }
                ;
                if (!hasMyChan) {
                    this.createPNChannel();
                }
                else {
                    this.evServ.publish('pushNoteInit', { stage: 'channels', result: true });
                }
            }
            else {
                this.createPNChannel();
            }
        });
    }
    /////////////////////////////////////////////////////
    createPNChannel() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[pushServ|createPNChannel] ' + this.pSIcos + ' ()...');
            let appOpts = { id: 'sheriff-alerts', name: 'Sheriff Alerts', description: 'Alert Channel for Sheriff App', sound: 'sheriffnote.wav', importance: 5, visibility: 1, lights: true, lightColor: '#FF9800', vibration: true };
            let depOpts = { id: 'deputy-alerts', name: 'Deputy Alerts', description: 'Alerts re Deputy API', sound: 'sheriffother.wav', importance: 5, visibility: 1, lights: true, lightColor: '#F26A60', vibration: true };
            let snoopOpts = { id: 'snoop-alerts', name: 'Snoop Alerts', description: 'Alerts Channel for Snooping', sound: 'sheriffpst.wav', importance: 5, visibility: 1, lights: false, lightColor: '#AAAAAA', vibration: false };
            yield _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_1__.PushNotifications.createChannel(depOpts);
            yield _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_1__.PushNotifications.createChannel(snoopOpts);
            _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_1__.PushNotifications.createChannel(appOpts).then(() => (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
                const nowChanRes = yield _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_1__.PushNotifications.listChannels();
                if (nowChanRes.channels.length > 0) {
                    let nowHasMyChan = false;
                    for (let i = 0; i < nowChanRes.channels.length; i++) {
                        const nowChanO = nowChanRes.channels[i];
                        if (nowChanO.id.toString() === 'sheriff-alerts') {
                            nowHasMyChan = true;
                        }
                    }
                    ;
                    if (!nowHasMyChan) {
                        this.evServ.publish('pushNoteInit', { stage: 'channels', result: false });
                    }
                    else {
                        this.evServ.publish('pushNoteInit', { stage: 'channels', result: true });
                    }
                }
                else {
                    this.evServ.publish('pushNoteInit', { stage: 'channels', result: false });
                }
            }));
        });
    }
    /////////////////////////////////////////////////////
    showInAppPushNote(pNote) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[pushServ|showInAppPushNote] ' + this.pSIcos + ' ()');
            let localTitle;
            pNote.hasOwnProperty('title') ? localTitle = pNote.title : localTitle = '';
            let localBody;
            pNote.hasOwnProperty('body') ? localBody = pNote.body : localBody = '';
            let hasData;
            pNote.hasOwnProperty('data') ? hasData = true : hasData = false;
            let localPNData = pNote.data;
            let displayMethod;
            if (hasData && pNote.data.hasOwnProperty('inAppDisplay')) {
                displayMethod = pNote.data.inAppDisplay;
                delete localPNData.inAppDisplay;
            }
            else {
                displayMethod = 'toast';
            }
            ;
            let fnType;
            if (hasData && pNote.data.hasOwnProperty('fnType')) {
                fnType = pNote.data.fnType;
                delete localPNData.fnType;
            }
            else {
                fnType = null;
            }
            ;
            // In-App DPAuth Refreshed -----------------------------
            if (hasData && fnType === 'newauth' && localPNData.hasOwnProperty('access_token')) {
                this.deputy.setAuthGVars(localPNData);
            }
            else {
                // In-App Notif Bubbles --------------------------------
                const notifTitleKs = ['Work Event', 'Sheriff Server', 'Deputy Access', 'Shift Reminder', 'Timesheet Warning', 'Task Reminder'];
                const notifIcos = ['notifications', 'server', 'key', 'balloon', 'balloon', 'balloon'];
                let iapNBObj = { ico: '', mTitle: '', sTitle: '', bodyLines: [] };
                const matchI = notifTitleKs.findIndex(t => pNote.title.includes(t));
                if (matchI !== -1) {
                    iapNBObj.ico = notifIcos[matchI];
                }
                else {
                    iapNBObj.ico = notifIcos[0];
                }
                ;
                const titleArr = pNote.title.split('|');
                iapNBObj.mTitle = titleArr[0];
                iapNBObj.sTitle = titleArr[1];
                const bodyArr = pNote.body.split('\n');
                for (let i = 0; i < bodyArr.length; i++) {
                    const bL = bodyArr[i];
                    iapNBObj.bodyLines.push(bL);
                }
                ;
                console.log(iapNBObj);
                this.evServ.publish('iapBubble', iapNBObj);
            }
            /* switch(displayMethod){
                case 'toast':this.evServ.showPushToast(null,localTitle,localBody,null,null);break;
                case 'alert':await Dialog.alert({title:localTitle,message:localBody});break;
                case 'modal':let iaModalOpts:any={component:InAppPushNoteModal,componentProps:{pNote:pNote},showBackdrop:true,backdropDismiss:true,cssClass:'inapp-pushnote-modal-class',animated:true,mode:'md',keyboardClose:true,id:'inapp-pushnote-modal'};
                const aSchedModal:any=await this.modalCtrl.create(iaModalOpts);
                document.addEventListener('ionModalDidPresent',()=>{this.logger.info('[EVENT]: IonModalDidPresent...');this.iamIsOpen=true});
                await aSchedModal.present();
                aSchedModal.onDidDismiss().then(()=>{this.iamIsOpen=false});
                break;
                case 'none':this.logger.info('[pushServ|showInAppPushNote] pNote.data.inAppDisplay==="none": Title/Body to Console & Processing Data Only...');this.logger.info('[pushServ|showInAppPushNote] 👀 [HIDDEN PUSH NOTE] >>> Title: '+localTitle+', Body: '+localBody+', Data: ');this.logger.info(pNote.data);
              }; */
        });
    }
    /////////////////////////////////////////////////////
    showInAppAction(pNoteAction) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[pushServ|showInAppAction] ' + this.pSIcos + ' ()');
            this.evServ.showToast('msg', 'Action Id: ' + pNoteAction.actionId);
        });
    }
    /////////////////////////////////////////////////////
    getDeliveredPNList() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[pushServ|getDeliveredList] ' + this.pSIcos + ' ()...');
            const gDLRes = yield _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_1__.PushNotifications.getDeliveredNotifications();
            if (gDLRes && gDLRes.notifications.length > 0) {
                return Promise.resolve(gDLRes.notifications);
            }
            else {
                return Promise.resolve([]);
            }
        });
    }
    /////////////////////////////////////////////////////
    removeDeliveredPN(mode, list) {
        this.logger.info('[pushServ|removeDeliveredPN] (mode:' + mode + ',list)...');
        if (mode === 'all') {
            _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_1__.PushNotifications.removeAllDeliveredNotifications();
        }
        else {
            _capacitor_push_notifications__WEBPACK_IMPORTED_MODULE_1__.PushNotifications.removeDeliveredNotifications(list);
        }
        ;
    }
    /////////////////////////////////////////////////////
    getPNTemplate() {
        return {
            title: null,
            subtitle: null,
            body: null,
            id: null,
            badge: null,
            notification: null,
            data: null,
            click_action: null,
            link: null,
            group: null,
            groupSummary: null
        };
    }
};
PushService.ctorParameters = () => [
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_8__.NGXLogger },
    { type: _events_service__WEBPACK_IMPORTED_MODULE_0__.EventsService },
    { type: _app_service__WEBPACK_IMPORTED_MODULE_3__.AppService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_9__.Platform },
    { type: _storage_service__WEBPACK_IMPORTED_MODULE_2__.StorageService },
    { type: _firebase_service__WEBPACK_IMPORTED_MODULE_4__.FirebaseService },
    { type: _detail_service__WEBPACK_IMPORTED_MODULE_5__.DetailService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_9__.ModalController },
    { type: _deputy_service__WEBPACK_IMPORTED_MODULE_6__.DeputyService }
];
PushService = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_10__.Injectable)({ providedIn: 'root' })
    /////////////////////////////////////////////////////
], PushService);



/***/ }),

/***/ 90636:
/*!********************************************!*\
  !*** ./src/app/services/sqlite.service.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SQLiteService": function() { return /* binding */ SQLiteService; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var _datetime_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./datetime.service */ 12826);
/* harmony import */ var _detail_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./detail.service */ 52153);
/* harmony import */ var _baseDB__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./baseDB */ 96414);
/* harmony import */ var _profileData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./profileData */ 92472);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _capacitor_community_sqlite__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @capacitor-community/sqlite */ 88814);
/* harmony import */ var _events_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./events.service */ 80106);
/* harmony import */ var _deputy_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./deputy.service */ 22092);
/* harmony import */ var _filesystem_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./filesystem.service */ 22904);
/* harmony import */ var _storage_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./storage.service */ 71188);
/* harmony import */ var _capacitor_app__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @capacitor/app */ 42138);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ngx-logger */ 62740);














//////////////////////////////////////////////////////////////////////////////////////
let SQLiteService = class SQLiteService {
    //////////////////////////////////////////////////////////////////////////////////////
    constructor(deputy, storeServ, logger, dS, evServ, fsServ, dT) {
        this.deputy = deputy;
        this.storeServ = storeServ;
        this.logger = logger;
        this.dS = dS;
        this.evServ = evServ;
        this.fsServ = fsServ;
        this.dT = dT;
    }
    ///////////////////////////////////////////////////////////////////////////////////////
    doInitSQLServ() {
        this.logger.info('[sqlServ|doInitServ] ()...');
        const sqlitePlugin = _capacitor_community_sqlite__WEBPACK_IMPORTED_MODULE_4__.CapacitorSQLite;
        this.mySQL = new _capacitor_community_sqlite__WEBPACK_IMPORTED_MODULE_4__.SQLiteConnection(sqlitePlugin);
        if (!this.dS.getMySQLReady()) {
            this.dS.setMySQLReady(true);
        }
        ;
        this.logger.info('[sqlServ|doInitSQLServ] ✈️ (SUCCESS): "mySQL" SQLiteConnection Created.');
        return Promise.resolve(true);
    }
    //////////////////////////////////////////////////////////////////////////////////////
    lrQC() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|lrQC] ⚡ ()...');
            const isUserConnO = (yield this.mySQL.isConnection(this.deputy.uUK + 'db')).result;
            const isAuthConnO = (yield this.mySQL.isConnection(this.deputy.uUK + 'auth')).result;
            if (isUserConnO) {
                const isUserDBO = (yield this.userDB.isDBOpen()).result;
                if (isUserDBO) {
                    this.userDB.close();
                }
                ;
                yield this.mySQL.closeConnection(this.deputy.uUK + 'db');
            }
            ;
            if (isAuthConnO) {
                const isAuthDBO = (yield this.authDB.isDBOpen()).result;
                if (isAuthDBO) {
                    this.authDB.close();
                }
                ;
                yield this.mySQL.closeConnection(this.deputy.uUK + 'auth');
            }
            ;
            this.mySQL.closeAllConnections();
            yield this.dS.setIsUserConnOpen(false);
            yield this.dS.setIsAuthConnOpen(false);
            yield this.dS.setADBIsOpen(false);
            yield this.dS.setUDBIsOpen(false);
            return Promise.resolve(true);
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    createUserDBConn(userDBName, setupDone) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|createUserDBConn] ✨🧑 (' + userDBName + ',' + setupDone + ')...');
            if (this.mySQL == null || !this.dS.getMySQLReady()) {
                return Promise.reject(new Error('☠️ (ERROR): "mySQL" NOT INITIALIZED.'));
            }
            ;
            try {
                if (!(yield this.mySQL.isConnection(userDBName)).result) {
                    this.userDB = yield this.mySQL.createConnection(userDBName, false, 'no-encryption', 1);
                    this.userDBName = userDBName;
                }
                ;
                if (!this.dS.getIsUserConnOpen()) {
                    yield this.dS.setIsUserConnOpen(true);
                }
                ;
                if (!(yield this.userDB.isDBOpen()).result) {
                    this.userDB.open();
                }
                ;
                if (!this.dS.getUDBIsOpen()) {
                    this.dS.setUDBIsOpen(true);
                }
                ;
                if (!setupDone) {
                    const createUDB = yield this.cInitTbls('user');
                    if (createUDB) {
                        this.logger.info('[sqlServ|createUserDBConn] ✨🧑 (✔️SUCCESS): Table Schema & Index Created.');
                    }
                    else {
                        this.evServ.publish('uDBReady', false);
                        return Promise.reject(new Error('[sqlServ|createUserDBConn] ✨🧑 (☠️ERROR): Create Schema/Index Failed'));
                    }
                    ;
                    const cSyncT = (yield this.userDB.createSyncTable()).changes.changes;
                    if (cSyncT !== -1) {
                        this.userDB.setSyncDate(this.dT.syncStr(new Date()));
                        this.logger.info('[sqlServ|createUserDBConn] ✨🧑 (✔️SUCCESS): ⌚SyncTable Created & Set.');
                    }
                    else {
                        this.logger.info('[sqlServ|createUserDBConn] ✨🧑 (❌ERROR): ⌚SyncTable NOT Created/Set.');
                    }
                    ;
                    const insValsUDB = yield this.cInitTblVals();
                    if (insValsUDB) {
                        this.logger.info('[sqlServ|createUserDBConn] ✨🧑 (✔️SUCCESS): Initial Table Values Inserted.');
                    }
                    else {
                        this.logger.info('[sqlServ|createUserDBConn] ✨🧑 (❌ERROR): Initial Table Values NOT Inserted.');
                    }
                    ;
                    if (!(yield this.dS.getUDBSetupDone())) {
                        yield this.dS.setUDBSetupDone(true);
                    }
                    ;
                    this.logger.info('[sqlServ|createUserDBConn] ✨🧑 (✅SUCCESS): [NEW] USER DB CONNECTION CREATED >>> (' + userDBName + ')');
                }
                else {
                    this.logger.info('[sqlServ|createUserDBConn] ✨🧑 (✅SUCCESS): [EXISTING] USER DB CONNECTION CREATED >>> (' + userDBName + ')');
                    if (!(yield this.dS.getUDBSetupDone())) {
                        yield this.dS.setUDBSetupDone(true);
                    }
                    ;
                }
                ;
                const udbTbls = yield this.listUDBTables();
                this.dS.setUDBTables(udbTbls);
                this.evServ.publish('uDBReady', true);
            }
            catch (cUDBCErr) {
                this.logger.info('[sqlServ|createUserDBConn] ✨🧑 (☠️ERROR): ' + JSON.stringify(cUDBCErr));
                this.evServ.publish('uDBReady', false);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    createAuthDBConn(authDBName, setupDone, valsObj) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|createAuthDBConn] ✨🔑 (' + authDBName + ',' + setupDone + ')...');
            if (this.mySQL == null || !this.dS.getMySQLReady()) {
                return Promise.reject(new Error('☠️ (ERROR): "mySQL" NOT INITIALIZED.'));
            }
            ;
            try {
                if (!setupDone) {
                    yield this.mySQL.createConnection(authDBName, false, 'no-encryption', 1);
                    const hasSecret = (yield this.mySQL.isSecretStored()).result;
                    if (hasSecret) {
                        this.mySQL.changeEncryptionSecret('sheriff is boss', 'sheriff is boss');
                        this.logger.info('[sqlServ|createAuthDBConn] 🔐 Secret [CHANGED] - OK.');
                    }
                    else {
                        this.mySQL.setEncryptionSecret('sheriff is boss');
                        this.logger.info('[sqlServ|createAuthDBConn] 🔐 Secret [UPDATED] - OK.');
                    }
                    ;
                    this.authDB = yield this.mySQL.createConnection(authDBName, true, 'secret', 1);
                    this.authDBName = authDBName;
                    if (!this.dS.getIsAuthConnOpen()) {
                        yield this.dS.setIsAuthConnOpen(true);
                    }
                    ;
                    if (!(yield this.authDB.isDBOpen()).result) {
                        this.authDB.open();
                    }
                    ;
                    if (!this.dS.getADBIsOpen()) {
                        yield this.dS.setADBIsOpen(true);
                    }
                    ;
                    const createADB = yield this.cInitTbls('auth');
                    if (createADB) {
                        this.logger.info('[sqlServ|createAuthDBConn] ✨🔑 (✔️SUCCESS): Table Schema & Index Created.');
                    }
                    else {
                        this.evServ.publish('aDBReady', false);
                        return Promise.reject(new Error('[sqlServ|createAuthDBConn] ✨🔑 (☠️ERROR): Create Schema/Index Failed'));
                    }
                    ;
                    const cSyncT = (yield this.authDB.createSyncTable()).changes.changes;
                    if (cSyncT !== -1) {
                        this.authDB.setSyncDate(this.dT.syncStr(new Date()));
                        this.logger.info('[sqlServ|createAuthDBConn] ✨🔑 (✔️SUCCESS): ⌚SyncTable Created & Set.');
                    }
                    else {
                        this.logger.info('[sqlServ|createAuthDBConn] ✨🔑 (❌ERROR): ⌚SyncTable NOT Created/Set.');
                    }
                    ;
                    const insADBIRes = yield this.setADBItem(valsObj.up, valsObj.dp);
                    if (insADBIRes) {
                        this.logger.info('[sqlServ|createAuthDBConn] ✨🔑 (✔️SUCCESS): Initial Auth Creds Inserted.');
                    }
                    else {
                        this.logger.info('[sqlServ|createAuthDBConn] ✨🔑 (❌ERROR): Initial Auth Creds NOT Inserted.');
                    }
                    ;
                    if (!(yield this.dS.getADBSetupDone())) {
                        yield this.dS.setADBSetupDone(true);
                    }
                    ;
                    const adbTbls = yield this.listADBTables();
                    this.dS.setADBTables(adbTbls);
                    this.logger.info('[sqlServ|createAuthDBConn] ✨🔑 (✅SUCCESS): [NEW] AUTH DB CONNECTION CREATED >>> (' + authDBName + ')');
                    this.evServ.publish('aDBReady', true);
                }
                else {
                    if (!(yield this.dS.getADBSetupDone())) {
                        yield this.dS.setADBSetupDone(true);
                    }
                    ;
                    if (!(yield this.mySQL.isConnection(authDBName)).result) {
                        this.authDB = yield this.mySQL.createConnection(authDBName, true, 'secret', 1);
                        this.authDBName = authDBName;
                    }
                    ;
                    if (!this.dS.getIsAuthConnOpen()) {
                        yield this.dS.setIsAuthConnOpen(true);
                    }
                    ;
                    if (!(yield this.authDB.isDBOpen()).result) {
                        this.authDB.open();
                    }
                    ;
                    if (!this.dS.getADBIsOpen()) {
                        this.dS.setADBIsOpen(true);
                    }
                    ;
                    const adbTbls = yield this.listADBTables();
                    this.dS.setADBTables(adbTbls);
                    this.logger.info('[sqlServ|createAuthDBConn] ✨🔑 (✅SUCCESS): [EXISTING] AUTH DB CONNECTION CREATED >>> (' + authDBName + ')');
                    this.evServ.publish('aDBReady', true);
                }
            }
            catch (cUDBCErr) {
                this.logger.info('[sqlServ|createUserDBConn] ✨🔑 (☠️ERROR): ' + JSON.stringify(cUDBCErr));
                this.evServ.publish('aDBReady', false);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    cInitTblVals() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|cInitTblVals] 🛠️ ()...');
            let countrySet = [];
            let stateSet = [];
            const cValsArr = _baseDB__WEBPACK_IMPORTED_MODULE_2__.DefaultDB.tables.filter(t => t.name === 'countries')[0].values;
            const sValsArr = _baseDB__WEBPACK_IMPORTED_MODULE_2__.DefaultDB.tables.filter(t => t.name === 'states')[0].values;
            const cInsSQL = 'INSERT OR IGNORE INTO countries (Id,Code,CodeA3,Region,Active,SortOrder,Country,ZipValidatePreg,PhoneDisplayPreg,Creator,Created,Modified,last_modified) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)';
            for (let i = 0; i < cValsArr.length; i++) {
                const cInsSet = { statement: cInsSQL, values: cValsArr[i] };
                countrySet.push(cInsSet);
            }
            ;
            const sInsSQL = 'INSERT OR IGNORE INTO states (Id,Country,Code,Active,SortOrder,State,Creator,Created,Modified,last_modified) VALUES (?,?,?,?,?,?,?,?,?,?)';
            for (let i = 0; i < sValsArr.length; i++) {
                const sInsSet = { statement: sInsSQL, values: sValsArr[i] };
                stateSet.push(sInsSet);
            }
            ;
            try {
                const consM = (r, c, t) => { let rT, tT; r === 's' ? rT = '✔️SUCCESS' : rT = '❌ERROR'; t === 'c' ? tT = 'COUNTRIES' : tT = 'STATES'; return this.logger.info('[sqlServ|cInitTbles] 🛠️ (' + rT + ') ' + tT + ': changes=' + c.c + '/lastId=' + c.l); };
                const cSetRes = (yield this.userDB.executeSet(countrySet)).changes;
                if (cSetRes.changes < 0 || cSetRes.lastId < 0) {
                    consM('e', { c: cSetRes.changes, l: cSetRes.lastId }, 'c');
                }
                else {
                    consM('s', { c: cSetRes.changes, l: cSetRes.lastId }, 'c');
                }
                ;
                const sSetRes = (yield this.userDB.executeSet(stateSet)).changes;
                if (sSetRes.changes < 0 || sSetRes.lastId < 0) {
                    consM('e', { c: sSetRes.changes, l: sSetRes.lastId }, 's');
                }
                else {
                    consM('s', { c: sSetRes.changes, l: sSetRes.lastId }, 's');
                }
                ;
                return Promise.resolve(true);
            }
            catch (cITVErr) {
                this.logger.info('[sqlServ|cInitTblVals] 🛠️ (☠️ERROR): ' + cITVErr.message);
                return Promise.resolve(true);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    insDPTypeCheck(valArr, typeArr) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            if (valArr.length !== typeArr.length) {
                return Promise.reject(new Error('Value Array Length !== Type Array Length!'));
            }
            else {
                let tVs = [];
                for (let i = 0; i < valArr.length; i++) {
                    const rawV = valArr[i];
                    const reqT = _baseDB__WEBPACK_IMPORTED_MODULE_2__.InsertTypeMap[typeArr[i].toLowerCase()];
                    if (typeof rawV === 'object') {
                        if (rawV === null || rawV === undefined) {
                            reqT === 'string' ? tVs.push(String('')) : tVs.push(Number(-1));
                        }
                        else {
                            tVs.push(JSON.stringify(rawV));
                        }
                    }
                    else if (typeof rawV === 'boolean') {
                        if (rawV) {
                            reqT === 'string' ? tVs.push(String('true')) : tVs.push(Number(1));
                        }
                        else {
                            reqT === 'string' ? tVs.push(String('false')) : tVs.push(Number(0));
                        }
                    }
                    else {
                        reqT === 'string' ? tVs.push(String(rawV)) : tVs.push(Number(rawV));
                    }
                }
                ;
                return Promise.resolve(tVs);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    insDPTblSet(resEPName, rawDPObjArr) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|insDPTblVals] 🍄 (' + resEPName + ')...');
            const tblN = _baseDB__WEBPACK_IMPORTED_MODULE_2__.Resources[resEPName];
            const setRowSQL = yield this.insertItemsCMD(resEPName);
            let dpTblSet = [];
            for (let i = 0; i < rawDPObjArr.length; i++) {
                const rawObj = rawDPObjArr[i];
                let rawRowVals = [];
                let setRowTypes = [];
                const dpTblSchema = _baseDB__WEBPACK_IMPORTED_MODULE_2__.DefaultDB.tables.filter(x => x.name === tblN)[0].schema;
                for (let i = 0; i < dpTblSchema.length; i++) {
                    rawRowVals.push(rawObj[dpTblSchema[i].column]);
                    setRowTypes.push(dpTblSchema[i].value);
                }
                ;
                const setRowVals = yield this.insDPTypeCheck(rawRowVals, setRowTypes);
                const sInsSet = { statement: setRowSQL, values: setRowVals };
                dpTblSet.push(sInsSet);
            }
            ;
            try {
                const dpSetRes = (yield this.userDB.executeSet(dpTblSet)).changes.changes;
                if (dpSetRes !== -1) {
                    this.logger.info('[sqlServ|insDPTblSet] 🍄 (✔️SUCCESS): Inserted DPSet (' + tblN + ') - OK!');
                    yield this.setSync(tblN);
                    return Promise.resolve(true);
                }
                else {
                    this.logger.info('[sqlServ|insDPTblSet] 🍄 (❌ERROR): Insert DPSet (' + tblN + ') Failed (changes===-1)');
                    return Promise.resolve(false);
                }
            }
            catch (cITVErr) {
                this.logger.info('[sqlServ|cInitTblVals] 🍄 (☠️ERROR): ' + JSON.stringify(cITVErr));
                return Promise.reject(new Error(JSON.stringify(cITVErr)));
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    cTblSchemaCMD(db, n) {
        let dbTblData;
        db === 'user' ? dbTblData = _baseDB__WEBPACK_IMPORTED_MODULE_2__.DefaultDB.tables : dbTblData = _baseDB__WEBPACK_IMPORTED_MODULE_2__.AuthDB.tables;
        let c = [];
        const tS = dbTblData.filter(t => t.name === n)[0].schema;
        for (let i = 0; i < tS.length; i++) {
            c.push(tS[i].column + ' ' + tS[i].value);
        }
        ;
        return 'CREATE TABLE IF NOT EXISTS ' + n + ' (' + c.join(',') + ')';
    }
    ;
    //////////////////////////////////////////////////////////////////////////////////////
    cTblIndexCMD(db, n) {
        let dbTblData;
        db === 'user' ? dbTblData = _baseDB__WEBPACK_IMPORTED_MODULE_2__.DefaultDB.tables : dbTblData = _baseDB__WEBPACK_IMPORTED_MODULE_2__.AuthDB.tables;
        const tS = dbTblData.filter(t => t.name === n)[0].schema;
        const pKColN = tS.filter(tCO => tCO.value.includes('PRIMARY KEY'))[0].column;
        return 'CREATE INDEX IF NOT EXISTS dpuid_index_' + pKColN + ' ON ' + n + ' (' + pKColN + ')';
    }
    //////////////////////////////////////////////////////////////////////////////////////
    cInitTbls(db) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|cInitTbles] 🛠️ ()...');
            let cTSchemaCMDs = [];
            let cTIndexCMDs = [];
            let dbTblData;
            let dbInst;
            if (db === 'user') {
                dbTblData = _baseDB__WEBPACK_IMPORTED_MODULE_2__.DefaultDB.tables;
                dbInst = this.userDB;
            }
            else {
                dbTblData = _baseDB__WEBPACK_IMPORTED_MODULE_2__.AuthDB.tables;
                dbInst = this.authDB;
            }
            ;
            for (let i = 0; i < dbTblData.length; i++) {
                const tN = dbTblData[i].name;
                cTSchemaCMDs.push(this.cTblSchemaCMD(db, tN));
                cTIndexCMDs.push(this.cTblIndexCMD(db, tN));
            }
            ;
            const cInitTblsCMD = cTSchemaCMDs.concat(cTIndexCMDs).join(';\n');
            try {
                const { changes } = (yield dbInst.execute(cInitTblsCMD)).changes;
                if (changes !== -1) {
                    return Promise.resolve(true);
                }
                else {
                    this.logger.info('[sqlServ|cInitTbles] 🛠️ (❌ERROR): Execute cInitTbls Failed (changes===-1)');
                    return Promise.resolve(false);
                }
            }
            catch (cITErr) {
                this.logger.info('[sqlServ|cInitTbles] 🛠️ (☠️ERROR): ' + JSON.stringify(cITErr));
                return Promise.reject(new Error(JSON.stringify(cITErr)));
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    openAuth() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            if (!(yield this.mySQL.isConnection(this.authDBName)).result) {
                this.authDB = yield this.mySQL.createConnection(this.authDBName, true, 'secret', 1);
            }
            ;
            if (!this.dS.getIsAuthConnOpen()) {
                yield this.dS.setIsAuthConnOpen(true);
            }
            ;
            if (!(yield this.authDB.isDBOpen()).result) {
                this.authDB.open();
            }
            ;
            if (!this.dS.getADBIsOpen()) {
                yield this.dS.setADBIsOpen(true);
            }
            ;
            this.logger.info('[sqlServ|openAuth] (☂️ OPEN): ' + this.authDBName);
            return Promise.resolve(true);
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    closeAuth() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            if ((yield this.authDB.isDBOpen()).result) {
                this.authDB.close();
            }
            ;
            if (this.dS.getADBIsOpen()) {
                yield this.dS.setADBIsOpen(false);
            }
            ;
            if ((yield this.mySQL.isConnection(this.authDBName)).result) {
                this.mySQL.closeConnection(this.authDBName);
            }
            ;
            if (this.dS.getIsAuthConnOpen()) {
                yield this.dS.setIsAuthConnOpen(false);
            }
            ;
            this.logger.info('[sqlServ|closeAuth] (🌂 CLOSE): ' + this.authDBName);
            return Promise.resolve(true);
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    setADBItem(upObj, dpObj) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|setADBItem] ()...');
            const userDPUUK = this.deputy.uUK + 'auth';
            let isIns;
            upObj !== null ? isIns = true : isIns = false;
            let sql;
            let vals = [];
            let setADBRes;
            const consM = (r, x) => { let rT, sT, xT; r === 's' ? rT = '(✔️SUCCESS) ' : rT = '(❌ERROR) NOT '; isIns ? sT = 'INSERT' : sT = 'UPDAT'; x !== null ? xT = ': ' + x : xT = ''; return this.logger.info('[sqlServ|setADBItem] 🔑 ' + rT + ' ' + sT + 'ED' + xT); };
            if (isIns) {
                sql = 'INSERT INTO deputy_auth (dp_uuk,dp_username,dp_password,dp_access_token,dp_endpoint,dp_expires_in,dp_expires_at,dp_refresh_token,last_modified) VALUES (?,?,?,?,?,?,?,?,?)';
                vals = [String(userDPUUK), String(upObj.user), String(upObj.pass), String(dpObj.access_token), String(dpObj.endpoint), String(dpObj.expires_in), String(dpObj.expires_at), String(dpObj.refresh_token), null];
            }
            else {
                sql = 'UPDATE deputy_auth SET dp_access_token="' + String(dpObj.access_token) + '",dp_endpoint="' + String(dpObj.endpoint) + '",dp_expires_in="' + dpObj.expires_in + '",dp_expires_at="' + String(dpObj.expires_at) + '",dp_refresh_token="' + String(dpObj.refresh_token) + '" WHERE dp_uuk="' + this.authDBName + '"';
            }
            ;
            try {
                if (isIns) {
                    setADBRes = (yield this.authDB.run(sql, vals)).changes.changes;
                }
                else {
                    setADBRes = (yield this.authDB.run(sql)).changes.changes;
                }
                ;
                if (setADBRes !== -1) {
                    consM('s', null);
                    return Promise.resolve(true);
                }
                else {
                    consM('e', 'Changes===-1');
                    return Promise.resolve(false);
                }
            }
            catch (sAErr) {
                consM('e', JSON.stringify(sAErr));
                return Promise.resolve(false);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getADBItem(mode) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|getADBItem] ()...');
            const consM = (r, x) => { let rT, xT; r === 's' ? rT = '(✔️SUCCESS) ' : rT = '(❌ERROR) '; x !== null ? xT = ': ' + x : xT = ''; return this.logger.info('[sqlServ|getADBItem] 🔑 ' + rT + ' for ' + this.authDBName + xT); };
            const userDPUUK = this.deputy.uUK + 'auth';
            const sql = 'SELECT * FROM deputy_auth WHERE dp_uuk="' + userDPUUK + '"';
            try {
                const getADBRes = (yield this.authDB.query(sql)).values;
                if (getADBRes.length > 0) {
                    let finalData;
                    const data = getADBRes[0];
                    if (mode === 'auth') {
                        finalData = { access_token: String(data.dp_access_token), expires_in: String(data.dp_expires_in), expires_at: String(data.dp_expires_at), scope: 'longlife_refresh_token', endpoint: String(data.dp_endpoint), refresh_token: String(data.dp_refresh_token) };
                    }
                    else if (mode === 'up') {
                        finalData = { u: getADBRes[0].dp_username, p: getADBRes[0].dp_password };
                    }
                    else if (mode === null) {
                        finalData = getADBRes[0];
                    }
                    ;
                    consM('s', null);
                    return Promise.resolve({ result: true, data: finalData });
                }
                else {
                    consM('e', 'No User (dp_uuk)');
                    return Promise.resolve({ result: false });
                }
            }
            catch (gAErr) {
                consM('e', JSON.stringify(gAErr));
                return Promise.resolve({ result: false });
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    setFCMToken(token) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|setFCMToken] ()...');
            const consM = (r, x) => { let rT, sT, xT; r === 's' ? rT = '(✔️SUCCESS) ' : rT = '(❌ERROR) NOT '; sT = 'UPDATED'; x !== null ? xT = ': ' + x : xT = ''; return this.logger.info('[sqlServ|setFCMToken] 🎫 ' + rT + ' ' + sT + 'ED' + xT); };
            try {
                const sFCMTRes = yield this.userDB.run('INSERT OR REPLACE INTO `firebase_fcm` (app_uuk,fcm_token) VALUES (?,?)', [this.deputy.uUK, token]);
                if (sFCMTRes.changes.changes !== -1) {
                    consM('s', null);
                    return Promise.resolve(true);
                }
                else {
                    consM('e', 'Changes===-1');
                    return Promise.resolve(false);
                }
            }
            catch (sFErr) {
                consM('e', JSON.stringify(sFErr));
                return Promise.resolve(false);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getFCMToken() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|getFCMToken] ()...');
            const consM = (r, x) => { let rT, xT; r === 's' ? rT = '(✔️SUCCESS) ' : rT = '(❌ERROR) '; x !== null ? xT = ': ' + x : xT = ''; return this.logger.info('[sqlServ|getFCMToken] 🎫 ' + rT + ' for ' + this.deputy.uUK + xT); };
            try {
                const { values } = yield this.userDB.query('SELECT fcm_token FROM firebase_fcm WHERE app_uuk = "' + this.deputy.uUK + '"');
                if (values.length > 0) {
                    consM('s', null);
                    return Promise.resolve({ result: true, data: values[0]['fcm_token'] });
                }
                else {
                    consM('e', 'No User (app_uuk)');
                    return Promise.resolve({ result: true, data: null });
                }
            }
            catch (gFErr) {
                consM('e', JSON.stringify(gFErr));
                return Promise.resolve({ result: false, data: gFErr });
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    setFEToken(feToken) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|setFEToken] ()...');
            const consM = (r, x) => { let rT, sT, xT; if (r === 's') {
                rT = '(✔️SUCCESS) ';
            }
            else {
                rT = '(❌ERROR) NOT ';
            } ; sT = 'UPDATED'; if (x !== null) {
                xT = ': ' + x;
            }
            else {
                xT = '';
            } ; return this.logger.info('[sqlServ|setFEToken] 🎟️ ' + rT + ' ' + sT + 'ED' + xT); };
            try {
                const sFETRes = yield this.userDB.run('INSERT OR REPLACE INTO `firebase_fct` (app_uuk,fe_token) VALUES (?,?)', [this.deputy.uUK, feToken]);
                if (sFETRes.changes.changes !== -1) {
                    consM('s', null);
                    return Promise.resolve(true);
                }
                else {
                    consM('e', 'Changes===-1');
                    return Promise.resolve(false);
                }
            }
            catch (sFErr) {
                consM('e', JSON.stringify(sFErr));
                return Promise.resolve(false);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getFEToken() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|getFEToken] ()...');
            const consM = (r, x) => {
                let rT, xT;
                if (r === 's') {
                    rT = '(✔️SUCCESS) ';
                }
                else {
                    rT = '(❌ERROR) ';
                }
                ;
                if (x !== null) {
                    xT = ': ' + x;
                }
                else {
                    xT = '';
                }
                ;
                return this.logger.info('[sqlServ|getFEToken] 🎟️ ' + rT + ' for ' + this.deputy.uUK + xT);
            };
            try {
                const { values } = yield this.userDB.query('SELECT * FROM firebase_fct WHERE app_uuk = "' + this.deputy.uUK + '"');
                if (values.length > 0) {
                    consM('s', null);
                    return Promise.resolve({ result: true, data: values[0]['fe_token'] });
                }
                else {
                    consM('e', 'No Matching User (app_uuk)');
                    return Promise.resolve({ result: true, data: null });
                }
            }
            catch (gFErr) {
                consM('e', JSON.stringify(gFErr));
                return Promise.resolve({ result: false, data: null });
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    addSingleItem(resEPName, singleObj) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|addSingleItem] 🔂 ()...');
            if (singleObj.hasOwnProperty('Id') && singleObj.Id && singleObj.Id > 0) {
                const tblN = _baseDB__WEBPACK_IMPORTED_MODULE_2__.Resources[resEPName];
                const { values } = (yield this.userDB.query('SELECT * FROM ' + tblN + ' WHERE Id=' + singleObj.Id));
                if (values.length > 0) {
                    this.logger.info('[sqlServ|addSingleItem] 🔂 Item with Id #' + singleObj.Id + ' ALREADY EXISTS in ' + tblN);
                    return Promise.resolve(true);
                }
                else {
                    const aSISQL = yield this.insertItemsCMD(resEPName);
                    let rawVals = [];
                    let types = [];
                    const dpTblSchema = _baseDB__WEBPACK_IMPORTED_MODULE_2__.DefaultDB.tables.filter(x => x.name === tblN)[0].schema;
                    for (let i = 0; i < dpTblSchema.length; i++) {
                        rawVals.push(singleObj[dpTblSchema[i].column]);
                        types.push(dpTblSchema[i].value);
                    }
                    ;
                    const niceVals = yield this.insDPTypeCheck(rawVals, types);
                    try {
                        const aSIRes = (yield this.userDB.run(aSISQL, niceVals)).changes.changes;
                        if (aSIRes !== -1) {
                            return Promise.resolve(true);
                        }
                        else {
                            this.logger.info('[sqlServ|addSingleItem] 🔂 (ERROR): Changes===-1');
                            return Promise.resolve(false);
                        }
                    }
                    catch (aSIErr) {
                        this.logger.info('[sqlServ|addSingleItem] 🔂 (ERROR): ' + JSON.stringify(aSIErr));
                        return Promise.resolve(false);
                    }
                }
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    setLocalImg(iName, iUri, iSize, iMTime) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|setLocalImg] 🖼️ ()...');
            let isIns;
            let sql;
            let vals = [];
            let setImgRes;
            let xUFs = '';
            if (iSize !== null) {
                xUFs = xUFs + ',img_size="' + iSize + '"';
            }
            ;
            if (iMTime !== null) {
                xUFs = xUFs + ',img_mtime="' + iMTime + '"';
            }
            ;
            const consM = (r, x) => { let rT, sT, xT; r === 's' ? rT = '(✔️SUCCESS) ' : rT = '(❌ERROR) NOT '; isIns ? sT = 'INSERT' : sT = 'UPDAT'; x !== null ? xT = ': ' + x : xT = ''; return this.logger.info('[sqlServ|setLocalImg] 🖼️ ' + rT + ' ' + sT + 'ED' + xT); };
            try {
                const { values } = (yield this.userDB.query('SELECT * FROM local_images WHERE img_name="' + iName + '"'));
                if (values.length > 0) {
                    isIns = false;
                    sql = 'UPDATE local_images SET img_uri="' + iUri + '"' + xUFs + ' WHERE img_name="' + iName + '"';
                }
                else {
                    isIns = true;
                    sql = 'INSERT INTO local_images (img_name,img_uri,img_size,img_mtime) VALUES (?,?,?,?)';
                    vals = [iName, iUri, iSize, iMTime];
                }
                ;
                if (isIns) {
                    setImgRes = (yield this.userDB.run(sql, vals)).changes.changes;
                }
                else {
                    setImgRes = (yield this.userDB.run(sql)).changes.changes;
                }
                ;
                if (setImgRes !== -1) {
                    consM('s', null);
                    return Promise.resolve(true);
                }
                else {
                    consM('e', 'Changes===-1');
                    return Promise.resolve(false);
                }
            }
            catch (sIErr) {
                consM('e', JSON.stringify(sIErr));
                return Promise.resolve(false);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    setLocalDeets() {
        this.logger.info('[sqlServ|setLocalDeets] ()...');
        const fnSTime = new Date();
        let gotAll = null;
        let setAll = null;
        let hasC = null;
        let hasDBItem = null;
        let dbDelIds = [];
        let DBI = null;
        const allOArr = ['me', 'my', 'ppl', 'avaMe', 'avaWork'];
        const oNKeys = {
            me: { tcol: 'me_obj', store: this.deputy.uUK + 'MeData', fData: null },
            my: { tcol: 'my_obj', store: this.deputy.uUK + 'MySetupData', fData: null },
            ppl: { tcol: 'ppl_obj', store: this.deputy.uUK + 'MyColleagues', fData: null },
            avaMe: { tcol: 'me_ava', store: this.deputy.uUK + 'meAvatar', fData: null },
            avaWork: { tcol: 'work_ava', store: this.deputy.uUK + 'workAvatar', fData: null }
        };
        // --------------------------------------------------------
        // PRE RUN FUNCTIONS
        // --------------------------------------------------------
        const getUDBDeets = () => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const uLDeetsRes = yield this.userDB.query('SELECT * FROM local_deets WHERE user_email = "' + this.deputy.userEmail + '"');
                if (uLDeetsRes.values.length > 0) {
                    dbDelIds = uLDeetsRes.values.map(dbRow => dbRow.id);
                    this.logger.info('[sqlServ|setLocalDeets] (getUDBDeets) Item for ' + this.deputy.userEmail + ' ✔️FOUND in local_deets table.');
                    return Promise.resolve({ result: true, data: uLDeetsRes.values[0] });
                }
                else {
                    this.logger.info('[sqlServ|setLocalDeets] (getUDBDeets) Item for ' + this.deputy.userEmail + ' ❌ NOT FOUND in local_deets table >>> CREATING NOW...');
                    const addLDRes = (yield this.userDB.run('INSERT INTO local_deets (user_email,me_obj,my_obj,ppl_obj,me_ava,work_ava) VALUES (?,?,?,?,?,?)', [this.deputy.userEmail, null, null, null, null, null])).changes.changes;
                    if (addLDRes !== -1) {
                        this.logger.info('[sqlServ|setLocalDeets] (getUDBDeets) Add New Item for ' + this.deputy.userEmail + ' - ✔️ SUCCESS');
                    }
                    else {
                        this.logger.info('[sqlServ|setLocalDeets] (getUDBDeets) Add New Item for ' + this.deputy.userEmail + ' - ❌ FAILED');
                    }
                    ;
                    return Promise.resolve({ result: false, data: null });
                }
            }
            catch (uHDBDErr) {
                return Promise.resolve({ result: false, data: JSON.stringify(uHDBDErr) });
            }
        });
        const doPreChecks = () => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|setLocalDeets] STAGE #0 - PRE - 🟢STARTED...');
            const checkDBI = yield getUDBDeets();
            if (checkDBI.result) {
                hasDBItem = true;
                DBI = checkDBI.data;
                this.evServ.publish('localDeetsStage', 'dbCheck');
            }
            else {
                hasDBItem = false;
                this.evServ.publish('localDeetsStage', 'dbCheck');
            }
            ;
            const checkConn = yield this.dS.getHasNetConn();
            if (checkConn) {
                hasC = true;
                this.evServ.publish('localDeetsStage', 'connCheck');
            }
            else {
                hasC = false;
                this.evServ.publish('localDeetsStage', 'connCheck');
            }
            ;
            this.logger.info('[sqlServ|setLocalDeets] STAGE #0 - PRE - 🏁FINISHED...');
        });
        // --------------------------------------------------------
        // GET DATA FUNCTIONS 
        // --------------------------------------------------------
        // GET API Data 
        const getApiO = (oName) => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            if (hasC) {
                if (oName === 'me') {
                    const meRes = yield this.deputy.getDetailMe();
                    if (meRes.result) {
                        return Promise.resolve({ result: true, data: meRes.data });
                    }
                    else {
                        return Promise.resolve({ result: false });
                    }
                }
                else if (oName === 'my') {
                    const myRes = yield this.deputy.getDetailMy();
                    if (myRes.result) {
                        return Promise.resolve({ result: true, data: myRes.data });
                    }
                    else {
                        return Promise.resolve({ result: false });
                    }
                }
                else if (oName === 'ppl') {
                    const pplRes = yield this.deputy.getDetailPpl();
                    if (pplRes.result) {
                        return Promise.resolve({ result: true, data: pplRes.data });
                    }
                    else {
                        return Promise.resolve({ result: false });
                    }
                }
                else if (oName === 'avaMe') {
                    const meARes = yield this.deputy.quickMeAva();
                    if (meARes.result) {
                        return Promise.resolve({ result: true, data: meARes.data });
                    }
                    else {
                        return Promise.resolve({ result: false });
                    }
                }
                else if (oName === 'avaWork') {
                    const workARes = yield this.deputy.quickWorkAva();
                    if (workARes.result) {
                        return Promise.resolve({ result: true, data: workARes.data });
                    }
                    else {
                        return Promise.resolve({ result: false });
                    }
                }
            }
            else {
                return Promise.resolve({ result: false });
            }
        });
        // GET Store Data
        const getStoreO = (oName) => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            if (oName === 'avaMe') {
                const storeKey = oNKeys[oName].store;
                const sRes = this.storeServ.getItem(storeKey);
                if (sRes) {
                    return Promise.resolve({ result: true, data: sRes });
                }
                else {
                    return Promise.resolve({ result: false });
                }
            }
            else if (oName === 'avaWork') {
                const storeKey = oNKeys[oName].store;
                const sRes = this.storeServ.getItem(storeKey);
                if (sRes) {
                    return Promise.resolve({ result: true, data: sRes });
                }
                else {
                    return Promise.resolve({ result: false });
                }
            }
            else {
                const storeKey = oNKeys[oName].store;
                const sRes = yield this.storeServ.getObject(storeKey);
                if (sRes) {
                    return Promise.resolve({ result: true, data: sRes });
                }
                else {
                    return Promise.resolve({ result: false });
                }
            }
        });
        // GET SQL DB Data 
        const getDBIO = (oName) => {
            if (hasDBItem) {
                const dbIColStr = oNKeys[oName].tcol;
                const dbIColValue = DBI[dbIColStr];
                if (dbIColValue && dbIColValue.length > 9) {
                    if (oName === 'avaMe' || oName === 'avaWork') {
                        return Promise.resolve({ result: true, data: dbIColValue });
                    }
                    else {
                        const isJV = this.evServ.isValidJSON(dbIColValue);
                        if (isJV) {
                            const colObj = JSON.parse(dbIColValue);
                            return Promise.resolve({ result: true, data: colObj });
                        }
                        else {
                            return Promise.resolve({ result: false });
                        }
                    }
                }
                else {
                    return Promise.resolve({ result: false });
                }
            }
            else {
                this.logger.info('[sqlServ|setLocalDeets] (getDIO) - ERROR: hasDBItem=FALSE');
                return Promise.resolve({ result: false });
            }
        };
        // --------------------------------------------------------
        // SET DATA FUNCTIONS 
        // --------------------------------------------------------
        // SET Store Data
        const setStoreO = (oName, oData) => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            if (oName === 'avaMe') {
                this.storeServ.setItem(this.deputy.uUK + 'meAvatar', oData);
                this.logger.info('[sqlServ|setLocalDeets] (🗳️setStoreO) Set LocalDeets Store - ' + this.deputy.uUK + 'meAvatar' + ' - ✔️SUCCESS');
                return Promise.resolve(true);
            }
            else if (oName === 'avaWork') {
                this.storeServ.setItem(this.deputy.uUK + 'workAvatar', oData);
                this.logger.info('[sqlServ|setLocalDeets] (🗳️setStoreO) Set LocalDeets Store - ' + this.deputy.uUK + 'workAvatar' + ' - ✔️SUCCESS');
                return Promise.resolve(true);
            }
            else {
                const sK = oNKeys[oName]['store'];
                this.storeServ.setObject(sK, oData);
                this.logger.info('[sqlServ|setLocalDeets] (🗳️setStoreO) Set LocalDeets Store - ' + sK + ' - ✔️SUCCESS');
                return Promise.resolve(true);
            }
        });
        // SET SQL DB Data
        const setDBI = (oName, oData) => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const dbColName = oNKeys[oName].tcol;
            let oDataStr;
            if (typeof oData !== 'string') {
                oDataStr = JSON.stringify(oData);
            }
            else {
                oDataStr = oData;
            }
            ;
            const dbSQLStr = 'UPDATE local_deets SET ' + dbColName + ' VALUES (?) WHERE user_email = owenlenegan@gmail.com';
            const dbSQLVals = [oDataStr];
            try {
                const sDBIRes = yield this.userDB.run(dbSQLStr, dbSQLVals);
                if (sDBIRes.changes.changes !== -1) {
                    this.logger.info('[sqlServ|setLocalDeets] (🗄️setDBI) Set LocalDeets SQLDB - ' + dbColName + ' - ✔️SUCCESS');
                    return Promise.resolve(true);
                }
                else {
                    this.logger.info('[sqlServ|setLocalDeets] (🗄️setDBI) Set LocalDeets SQLDB - ' + dbColName + ' - ❌FAILED');
                    return Promise.resolve(false);
                }
            }
            catch (sDBIErr) {
                this.logger.info('[sqlServ|setLocalDeets] (🗄️setDBI) Set LocalDeets SQLDB - ' + dbColName + ' - ❌FAILED');
                return Promise.resolve(false);
            }
        });
        // SET ds.Details Variables
        const setDetailsV = (oName, oData) => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const consM = (r) => { let rTxt; r ? rTxt = '✔️SUCCESS' : rTxt = '❌FAILED'; this.logger.info('[sqlServ|setLocalDeets] (📐setDetailsV) Set LocalDeets Details - ' + oName + ' - ' + rTxt); };
            if (oName === 'me') {
                const setMeRes = yield this.dS.setMe(oData);
                if (setMeRes) {
                    consM(true);
                }
                else {
                    consM(false);
                }
            }
            else if (oName === 'my') {
                const setMyRes = yield this.dS.setMy(oData);
                if (setMyRes) {
                    consM(true);
                }
                else {
                    consM(false);
                }
            }
            else {
                const setPplRes = yield this.dS.setPpl(oData);
                if (setPplRes) {
                    consM(true);
                }
                else {
                    consM(false);
                }
            }
            return Promise.resolve(true);
        });
        // --------------------------------------------------------
        // CORE-GET GET ALL DATA
        // --------------------------------------------------------
        const doLDeetsGet = () => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|setLocalDeets] STAGE #1 - GET - 🟢STARTED...');
            for (let i = 0; i < allOArr.length; i++) {
                const dOName = allOArr[i];
                const apiDORes = yield getApiO(dOName);
                if (apiDORes.result) {
                    oNKeys[dOName].fData = apiDORes.data;
                }
                else {
                    const storeDORes = yield getStoreO(dOName);
                    if (storeDORes) {
                        oNKeys[dOName].fData = storeDORes.data;
                    }
                    else {
                        const dbDORes = yield getDBIO(dOName);
                        if (dbDORes.result) {
                            oNKeys[dOName].fData = dbDORes.data;
                        }
                        else {
                            if (dOName === 'avaMe') {
                                oNKeys[dOName].fData = './../../assets/img/sheriff-tsheet-detail-unknown-sv-ico.png';
                            }
                            else if (dOName === 'avaWork') {
                                oNKeys[dOName].fData = './../../assets/img/sheriff-unknown-company-ico.png';
                            }
                            else {
                                oNKeys[dOName].fData = null;
                            }
                        }
                    }
                }
            }
            ;
            // --------------------------------------------------------
            this.logger.info('[sqlServ|setLocalDeets] STAGE #1 - GET - 🏁FINISHED...');
            let getAResAllOK = true;
            let getAResArr = [];
            let resTxtArr = [];
            for (let i = 0; i < allOArr.length; i++) {
                const kN = allOArr[i];
                if (oNKeys[kN].fData !== null) {
                    getAResArr.push(true);
                }
                else {
                    getAResArr.push(false);
                    getAResAllOK = false;
                }
            }
            ;
            if (getAResAllOK) {
                gotAll = true;
                this.logger.info('[sqlServ|setLocalDeets] (🕸️GET|RESULT) 💯 GOT ALL DATA (me,my,ppl,avaMe,avaWork)...');
                this.evServ.publish('localDeetsStage', 'get');
            }
            else {
                gotAll = false;
                let resTxtArr = [];
                for (let i = 0; i < allOArr.length; i++) {
                    const tOStr = allOArr[i];
                    const tORes = String(getAResArr[i]);
                    resTxtArr.push('[' + tOStr.toUpperCase() + ']:' + tORes);
                }
                ;
                this.logger.info('[sqlServ|setLocalDeets] (🕸️GET|RESULT) ❌ Errors: ' + resTxtArr.join(', '));
                this.evServ.publish('localDeetsStage', 'get');
            }
            ;
        });
        // --------------------------------------------------------
        // CORE-SET SET ALL DATA
        // --------------------------------------------------------
        const doLDeetsSet = () => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|setLocalDeets] STAGE #2 - SET - 🟢STARTED...');
            let setAllResO = { me: { st: null, db: null, dt: null }, my: { st: null, db: null, dt: null }, ppl: { st: null, db: null, dt: null }, avaMe: { st: null, db: null, dt: null }, avaWork: { st: null, db: null, dt: null } };
            let dbVals = [];
            for (let i = 0; i < allOArr.length; i++) {
                const dOName = allOArr[i];
                const dOData = oNKeys[dOName].fData;
                const sStoreR = yield setStoreO(dOName, dOData);
                if (sStoreR) {
                    setAllResO[dOName].st = true;
                }
                else {
                    setAllResO[dOName].st = false;
                }
                ;
                if (dOData === null) {
                    dbVals.push(null);
                    setAllResO[dOName].db = false;
                }
                else {
                    if (typeof dOData !== 'string') {
                        dbVals.push(JSON.stringify(dOData));
                    }
                    else {
                        dbVals.push(dOData);
                    }
                    ;
                    setAllResO[dOName].db = true;
                }
                ;
                if (dOName !== 'avaMe' && dOName !== 'avaWork') {
                    const sDTR = yield setDetailsV(dOName, dOData);
                    if (sDTR) {
                        setAllResO[dOName].dt = true;
                    }
                    else {
                        setAllResO[dOName].dt = false;
                    }
                    ;
                }
            }
            ;
            for (let i = 0; i < dbDelIds.length; i++) {
                const rowId = dbDelIds[i];
                yield this.userDB.run('DELETE FROM local_deets WHERE id = ' + rowId + '');
            }
            ;
            const upDBRes = (yield this.userDB.run('INSERT OR REPLACE INTO local_deets (user_email,me_obj,my_obj,ppl_obj,me_ava,work_ava) VALUES (?,?,?,?,?,?)', [this.deputy.userEmail, dbVals[0], dbVals[1], dbVals[2], dbVals[3], dbVals[4]])).changes.changes;
            if (oNKeys.avaMe.fData !== null && oNKeys.avaWork.fData !== null) {
                const comboAvaDeetData = { me: oNKeys.avaMe.fData, work: oNKeys.avaWork.fData };
                this.dS.setAvas(comboAvaDeetData);
                setAllResO.avaMe.dt = true;
                setAllResO.avaWork.dt = true;
            }
            else {
                setAllResO.avaMe.dt = false;
                setAllResO.avaWork.dt = false;
            }
            ;
            this.logger.info('[sqlServ|setLocalDeets] STAGE #2 - SET - 🏁FINISHED...');
            let storeSetErr = [];
            let dbSetErr = [];
            let dtSetErr = [];
            for (let i = 0; i < allOArr.length; i++) {
                const oN = allOArr[i];
                const oSTR = setAllResO[oN].st;
                if (!oSTR) {
                    storeSetErr.push(oN);
                }
                ;
                const oDBR = setAllResO[oN].db;
                if (!oDBR) {
                    dbSetErr.push(oN);
                }
                ;
                const oDTR = setAllResO[oN].dt;
                if (!oDTR) {
                    dtSetErr.push(oN);
                }
                ;
            }
            ;
            if (storeSetErr.length === 0 && dbSetErr.length === 0 && dtSetErr.length === 0) {
                this.logger.info('[sqlServ|setLocalDeets] (📐SET|RESULT) 💯 SET ALL DATA (me,my,ppl,avaMe,avaWork) for ALL SOURCES (details,store,db)');
                setAll = true;
                this.evServ.publish('localDeetsStage', 'set');
            }
            else {
                if (storeSetErr.length > 0) {
                    this.logger.info('[sqlServ|setLocalDeets] (📐SET|ERROR|Storage): ❌ ' + storeSetErr.join(', '));
                }
                ;
                if (dbSetErr.length > 0) {
                    this.logger.info('[sqlServ|setLocalDeets] (📐SET|ERROR|SQLite/DB): ❌ ' + dbSetErr.join(', '));
                }
                ;
                if (dtSetErr.length > 0) {
                    this.logger.info('[sqlServ|setLocalDeets] (📐SET|ERROR|Details): ❌ ' + dtSetErr.join(', '));
                }
                ;
                setAll = false;
                this.evServ.publish('localDeetsStage', 'set');
            }
        });
        // ----------------------------------------------------
        let stageCount = 0;
        this.evServ.subscribe('localDeetsStage', stageN => {
            stageCount++;
            if (stageCount === 2) {
                doLDeetsGet();
            }
            ;
            if (stageN === 'get') {
                doLDeetsSet();
            }
            ;
            if (stageN === 'set') {
                this.evServ.publish('setLocalDeetsDone', true);
                this.evServ.destroy('setLocalDeetsDone');
                const fnDurSecs = () => { let dStr; const ms = this.evServ.getDur(fnSTime); ms > 1000 ? dStr = (ms / 1000).toFixed(2) + 's' : dStr = ms + 'ms'; return dStr; };
                let finalResTxt;
                if (gotAll && setAll) {
                    finalResTxt = '(✅FINAL|RESULT): 💯PERFECT💯 >>> ';
                }
                else {
                    finalResTxt = '(❎FINAL|RESULT): 😭ERRORS😭 >>> ';
                }
                ;
                this.logger.info('[sqlServ|setLocalDeets] ' + finalResTxt + '🏁⏲️🏁 (TOTAL TIME): ' + fnDurSecs());
            }
        });
        doPreChecks();
    }
    //////////////////////////////////////////////////////////////////////////////////////
    installBU() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const insFileSize = (yield this.fsServ.stat(this.fsServ.phoneFS, 'Sheriff/backups/' + this.deputy.uUK + 'dbSQLite.db')).data.size;
            this.logger.info('[sqlServ|installBU] Install DB Size = ' + insFileSize);
            this.fsServ.copyByPath('/sdcard/Android/data/dev.zer0ne.sheriff/files/Sheriff/backups/' + this.deputy.uUK + 'dbSQLite.db', '/data/data/dev.zer0ne.sheriff/databases/' + this.deputy.uUK + 'dbSQLite.db');
            setTimeout(() => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
                const checkFileSize = (yield this.fsServ.stat(null, '/data/data/dev.zer0ne.sheriff/databases/' + this.deputy.uUK + 'dbSQLite.db')).data.size;
                if (checkFileSize === insFileSize) {
                    this.logger.info('[sqlServ|installBU] (Size Check): ' + insFileSize + ' vs ' + checkFileSize + ' = SUCCESS!');
                    this.evServ.publish('installBUDBDone', true);
                }
                else {
                    this.logger.info('[sqlServ|installBU] (Size Check): ' + insFileSize + ' vs ' + checkFileSize + ' = FAIL!');
                    this.evServ.publish('installBUDBDone', false);
                }
            }), 1000);
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    installFireBU() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const insFileSize = (yield this.fsServ.stat(this.fsServ.phoneFS, 'Sheriff/backups/fireBUInstall.db')).data.size;
            this.logger.info('[sqlServ|installBU] Install DB Size = ' + insFileSize);
            this.fsServ.copyByPath('/sdcard/Android/data/dev.zer0ne.sheriff/files/Sheriff/backups/fireBUInstall.db', '/data/data/dev.zer0ne.sheriff/databases/' + this.deputy.uUK + 'dbSQLite.db');
            setTimeout(() => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
                const checkFileSize = (yield this.fsServ.stat(null, '/data/data/dev.zer0ne.sheriff/databases/' + this.deputy.uUK + 'dbSQLite.db')).data.size;
                if (checkFileSize === insFileSize) {
                    this.logger.info('[sqlServ|installBU] (Size Check): ' + insFileSize + ' vs ' + checkFileSize + ' = SUCCESS!');
                    this.evServ.publish('installBUDBDone', true);
                }
                else {
                    this.logger.info('[sqlServ|installBU] (Size Check): ' + insFileSize + ' vs ' + checkFileSize + ' = FAIL!');
                    this.evServ.publish('installBUDBDone', false);
                }
            }), 1000);
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    revertDB() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const revFileSize = (yield this.fsServ.stat(this.fsServ.phoneFS, 'Sheriff/db/revert.db')).data.size;
            this.logger.info('[sqlServ|revertDB] Revert DB Size = ' + revFileSize);
            this.fsServ.copyByPath('/sdcard/Android/data/dev.zer0ne.sheriff/files/Sheriff/db/revert.db', '/data/data/dev.zer0ne.sheriff/databases/' + this.deputy.uUK + 'dbSQLite.db');
            setTimeout(() => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
                const checkFileSize = (yield this.fsServ.stat(null, '/data/data/dev.zer0ne.sheriff/databases/' + this.deputy.uUK + 'dbSQLite.db')).data.size;
                if (checkFileSize === revFileSize) {
                    this.logger.info('[sqlServ|revertDB] (Size Check): ' + revFileSize + ' vs ' + checkFileSize + ' = SUCCESS!');
                    this.storeServ.removeItem('newDBInstall');
                    this.evServ.showToast('warning', 'DB Reverted - Restart Sheriff!');
                    setTimeout(() => { _capacitor_app__WEBPACK_IMPORTED_MODULE_9__.App.exitApp(); }, 2000);
                }
                else {
                    this.logger.info('[sqlServ|revertDB] (Size Check): ' + revFileSize + ' vs ' + checkFileSize + ' = FAIL!');
                    this.storeServ.removeItem('newDBInstall');
                    this.evServ.showToast('error', 'Error Reverting DB');
                }
            }), 1000);
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    createRevertDB() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|createRevertDB] ()...');
            const revertPath = ((yield this.fsServ.stat(this.fsServ.phoneFS, 'Sheriff/db')).data.uri) + '/revert.db';
            const cpCheck = setInterval(() => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
                const rvData = (yield this.fsServ.stat(this.fsServ.phoneFS, 'Sheriff/db/revert.db')).data;
                if (rvData !== null) {
                    clearInterval(cpCheck);
                    this.evServ.publish('cpRevertDBDone', rvData);
                }
            }), 250);
            this.fsServ.copyByPath('/data/data/dev.zer0ne.sheriff/databases/' + this.deputy.uUK + 'dbSQLite.db', revertPath);
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    createConnection(database, encrypted, mode, version) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|createConnection] (' + database + ', ' + encrypted + ', ' + mode + ', ' + ', ' + version + ')...');
            try {
                const userDB = yield this.mySQL.createConnection(database, encrypted, mode, version);
                if (userDB !== null) {
                    return Promise.resolve(userDB);
                }
                else {
                    return Promise.reject(new Error('[sqlServ|createConnection] (Error): No Connection Returned for ' + database));
                }
            }
            catch (createConnErr) {
                return Promise.reject(createConnErr);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    isConnection(dbName) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|isConnection] (' + dbName + ')...');
            try {
                const isCRes = yield this.mySQL.isConnection(dbName);
                return Promise.resolve(isCRes.result);
            }
            catch (isCErr) {
                return Promise.reject(isCErr);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    retrieveConnection(database) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|retrieveConnection] (' + database + ')...');
            try {
                return Promise.resolve(yield this.mySQL.retrieveConnection(database));
            }
            catch (retrieveConnErr) {
                return Promise.reject(retrieveConnErr);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    retrieveAllConnections() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|retrieveAllConnections] ()...');
            try {
                const myConns = yield this.mySQL.retrieveAllConnections();
                let keys = [...myConns.keys()];
                if (keys.length > 0) {
                    let connCount = 0;
                    this.logger.info('[sqlServ|retrieveAllConnections] Found [' + keys.length + '] Connections:');
                    keys.forEach((value) => { connCount++; this.logger.info('---> [#' + connCount + '] ' + value); });
                    return Promise.resolve(myConns);
                }
                else {
                    this.logger.info('[sqlServ|retrieveAllConnections] No Connections Found.');
                    return Promise.resolve(null);
                }
            }
            catch (retrieveAllConnErr) {
                return Promise.reject(retrieveAllConnErr);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    closeConnection(database) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|closeConnection] (' + database + ')...');
            try {
                yield this.mySQL.closeConnection(database);
                return Promise.resolve();
            }
            catch (closeConnErr) {
                return Promise.reject(closeConnErr);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    closeAllConnections() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|closeAllConnections] ()...');
            try {
                return Promise.resolve(yield this.mySQL.closeAllConnections());
            }
            catch (closeAllConnErr) {
                return Promise.reject(closeAllConnErr);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    isDBExists() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|isDBExists] ()...');
            try {
                const isDBRes = yield this.userDB.isExists();
                return Promise.resolve(isDBRes.result);
            }
            catch (isDBErr) {
                return Promise.reject(isDBErr);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    isDatabase(dbName) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|isDatabase] (' + dbName + ')...');
            try {
                const isDBRes = yield this.mySQL.isDatabase(dbName);
                return Promise.resolve(isDBRes.result);
            }
            catch (isDBErr) {
                return Promise.reject(isDBErr);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    isDBOpen(dbName) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|isDBOpen] (' + dbName + ')...');
            const gotDBConn = yield this.isConnection(dbName);
            if (gotDBConn) {
                try {
                    const isDBOpenRes = yield this.userDB.isDBOpen();
                    return Promise.resolve(isDBOpenRes.result);
                }
                catch (isDBOpenErr) {
                    return Promise.reject(isDBOpenErr);
                }
            }
            else {
                this.logger.info('[sqlServ|isDBOpen] (Abort) No Conn to UDB - Unable to Check - Returning FALSE...');
                return Promise.resolve(false);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getDatabaseList() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|getDatabaseList] ()...');
            try {
                return Promise.resolve(yield this.mySQL.getDatabaseList());
            }
            catch (dbListErr) {
                return Promise.reject(dbListErr);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    deleteDatabase(db) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            try {
                let ret = yield db.isExists();
                if (ret.result) {
                    yield db.delete();
                    return Promise.resolve();
                }
                else {
                    return Promise.resolve();
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    deleteOldDatabases(folderPath) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|deleteOldDatabases] (' + folderPath + ')...');
            try {
                return Promise.resolve(yield this.mySQL.deleteOldDatabases(folderPath));
            }
            catch (delOldDBErr) {
                return Promise.reject(delOldDBErr);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    isTableExists(tableName) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|isTableExists] ()...');
            try {
                const tblExistRes = yield this.userDB.isTable(tableName);
                return Promise.resolve(tblExistRes.result);
            }
            catch (tblExistsErr) {
                return Promise.reject(tblExistsErr);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    listUDBTables() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|listUDBTables] ()...');
            let tbls = [];
            try {
                const { values } = yield this.userDB.query('SELECT name FROM sqlite_master WHERE type="table"');
                if (values.length > 0) {
                    for (let i = 0; i < values.length; i++) {
                        tbls.push(values[i].name);
                    }
                }
                ;
                return Promise.resolve(tbls);
            }
            catch (lUDBTErr) {
                return Promise.reject(new Error('[sqlServ|listUDBTables] (Error): ' + JSON.stringify(lUDBTErr)));
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    listADBTables() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|listADBTables] ()...');
            let tbls = [];
            try {
                const { values } = yield this.authDB.query('SELECT name FROM sqlite_master WHERE type="table"');
                if (values.length > 0) {
                    for (let i = 0; i < values.length; i++) {
                        tbls.push(values[i].name);
                    }
                }
                ;
                return Promise.resolve(tbls);
            }
            catch (lADBTErr) {
                return Promise.reject(new Error('[sqlServ|listADBTables] (Error): ' + JSON.stringify(lADBTErr)));
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getAllCompanies() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|getAllCompanies] ()...');
            try {
                const { values } = yield this.userDB.query('SELECT * FROM companies');
                if (values.length > 0) {
                    return Promise.resolve(values);
                }
                else {
                    return Promise.resolve([]);
                }
            }
            catch (gACErr) {
                return Promise.resolve([]);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    cleanCloseUserDB() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|cleanCloseUserDB] ()...');
            try {
                this.userDB.close();
                this.dS.setUDBIsOpen(false);
                if (this.dS.getUDBIsOpen()) {
                    this.userDB.close();
                    this.dS.setUDBIsOpen(false);
                }
                if (this.dS.getIsUserConnOpen()) {
                    this.mySQL.closeConnection(this.deputy.uUK + 'db');
                    this.dS.setIsUserConnOpen(false);
                }
                this.logger.info('\uD83D\uDC9B'.repeat(10));
                return Promise.resolve(true);
            }
            catch (cCloseDBErr) {
                this.logger.info('[sqlServ|cleanCloseUserDB] (ERROR): ' + cCloseDBErr.message);
                return Promise.resolve(false);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    addSQLiteSuffix(folderPath) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|addSQLiteSuffix] (' + folderPath + ')...');
            try {
                return Promise.resolve(yield this.mySQL.addSQLiteSuffix(folderPath));
            }
            catch (addSuffErr) {
                return Promise.reject(addSuffErr);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    echo(value) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            console.log('[sqlServ|dbEcho] (' + this.mySQL + ')');
            if (this.mySQL != null) {
                return yield this.mySQL.echo(value);
            }
            else {
                return null;
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    addUpgradeStatement(database, fromVersion, toVersion, statement, set) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|addUpgradeStatement] (' + database + ', ' + fromVersion + ', ' + toVersion + ', ' + statement + ', ' + JSON.stringify(set) + ')...');
            if (this.mySQL !== null) {
                try {
                    yield this.mySQL.addUpgradeStatement(database, fromVersion, toVersion, statement, set ? set : []);
                    return Promise.resolve();
                }
                catch (addUpErr) {
                    return Promise.reject(addUpErr);
                }
            }
            else {
                return Promise.reject(new Error('[sqlServ|addUpgradeStatement] (Error): No Connection Open for ' + database));
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    isJsonValid(jsonStr) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|isJsonValid] (JSON)...');
            try {
                return Promise.resolve(yield _capacitor_community_sqlite__WEBPACK_IMPORTED_MODULE_4__.CapacitorSQLite.isJsonValid({ jsonstring: jsonStr }));
            }
            catch (isJSONValErr) {
                return Promise.reject(isJSONValErr);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    importFromJson(jsonStr) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|importFromJson] (JSON)...');
            try {
                return Promise.resolve(yield this.mySQL.importFromJson(jsonStr));
            }
            catch (importJSONErr) {
                return Promise.reject(importJSONErr);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    copyFromAssets() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|copyFromAssets] (JSON)...');
            if (this.mySQL !== null) {
                try {
                    return Promise.resolve(yield this.mySQL.copyFromAssets());
                }
                catch (copyFromAssetsErr) {
                    return Promise.reject(copyFromAssetsErr);
                }
            }
            else {
                return Promise.reject(new Error('[sqlServ|copyFromAssets] (Error): No Connection Open.'));
            }
        });
    }
    ///////////////////////////////////////////////////////////////////////////
    insertItems(resEPName) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|insertItems] (' + resEPName + ')...');
            let rawTableItemArr;
            if (resEPName === 'SystemUsageTracking') {
                rawTableItemArr = (yield this.storeServ.getObject('fr-' + resEPName)).slice(0, 5000);
            }
            else {
                rawTableItemArr = yield this.storeServ.getObject('fr-' + resEPName);
            }
            ;
            const rawArrLen = rawTableItemArr.length;
            let rawItemCount = 0;
            let insertCount = 0;
            const tblValTypes = yield this.valueTypes(resEPName);
            const tblInsertCMD = yield this.insertItemsCMD(resEPName);
            let filtTableItemArr = [];
            let totalfiltItems = 0;
            // Process/Insert Fn
            const itemRunner = (filtItem) => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
                const totalVals = Object.keys(tblValTypes).length;
                let valCount = 0;
                let thisValsArr = [];
                for (const thisPropName of Object.keys(tblValTypes)) {
                    valCount++;
                    thisValsArr.push(filtItem[thisPropName]);
                    if (valCount === totalVals) {
                        try {
                            yield this.userDB.run(tblInsertCMD, thisValsArr);
                            insertCount++;
                            processTasks();
                        }
                        catch (addItemErr) {
                            insertCount++;
                            processTasks();
                        }
                    }
                }
            });
            // Item Feeder Fn
            const processTasks = () => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
                if (insertCount === totalfiltItems) {
                    if (resEPName === 'SystemUsageTracking') {
                        this.logger.info('[sqlServ|insertItems] - Skipping Delete for SystemUsageTracking...');
                    }
                    else {
                        if (resEPName === 'colleague' || resEPName === 'colleagues') {
                            const colObj = yield this.storeServ.getObject('fr-' + resEPName);
                            this.storeServ.setObject(this.deputy.uUK + 'MyColleagues', colObj);
                            this.storeServ.removeItem('fr-' + resEPName);
                        }
                        else {
                            yield this.storeServ.removeItem('fr-' + resEPName);
                        }
                    }
                    ;
                    this.evServ.publish('frDBIIFinish', { name: resEPName, count: insertCount, total: totalfiltItems });
                    this.logger.info('[sqlServ|insertItems] (Finished) \uD83C\uDFC1 Added ' + insertCount + '/' + filtTableItemArr.length + ' Items to DB Table: ' + _baseDB__WEBPACK_IMPORTED_MODULE_2__.Resources[resEPName]);
                }
                else {
                    this.evServ.publish('frDBIIProg', { name: resEPName, count: insertCount, total: totalfiltItems });
                    const nextItemObj = filtTableItemArr[insertCount];
                    yield itemRunner(nextItemObj);
                }
            });
            // Filter Items
            for (const rawObj of rawTableItemArr) {
                rawItemCount++;
                const noRawObjKeys = Object.keys(rawObj).length;
                let rawKeyCount = 0;
                let wipObj = rawObj;
                (() => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
                    for (const [key, value] of Object.entries(rawObj)) {
                        rawKeyCount++;
                        // DPMeta Object Exceptions: Memo/memos
                        const dpMetaObjExcept = ['Memo'];
                        if (dpMetaObjExcept.includes(resEPName) && key === '_DPMetaData') {
                            wipObj[key] = JSON.stringify(value);
                        }
                        else if (key.includes('_')) {
                            delete wipObj[key];
                        }
                        else {
                            if (typeof value == 'object') {
                                if (value == null || value == undefined) {
                                    if (tblValTypes[key] === 'string') {
                                        wipObj[key] = String('');
                                    }
                                    else {
                                        wipObj[key] = Number(-1);
                                    }
                                }
                                else {
                                    const isArray = () => { return Array.isArray(value) ? true : false; };
                                    const isObject = () => { return value == Object(value) && !Array.isArray(value) ? true : false; };
                                    const isPlain = () => { let proto = value; while (Object.getPrototypeOf(proto) !== null) {
                                        proto = Object.getPrototypeOf(proto);
                                    } return Object.getPrototypeOf(value) === proto; };
                                    if (isArray || isObject || isPlain) {
                                        wipObj[key] = JSON.stringify(value);
                                    }
                                    ;
                                }
                            }
                            if (value === 'null' || value === 'undefined') {
                                if (tblValTypes[key] === 'string') {
                                    wipObj[key] = String('');
                                }
                                else {
                                    wipObj[key] = Number(-1);
                                }
                            }
                            ;
                            if (typeof value === 'boolean') {
                                if (value) {
                                    wipObj[key] = Number(1);
                                }
                                else {
                                    wipObj[key] = Number(0);
                                }
                            }
                            ;
                            if (key === 'Date' || key === 'DateTime') {
                                wipObj[key] = value.toString();
                            }
                            ;
                        }
                        if (rawKeyCount === noRawObjKeys) {
                            filtTableItemArr.push(wipObj);
                        }
                        ;
                        if (rawItemCount === rawArrLen && rawKeyCount === noRawObjKeys) {
                            // Table Items Start
                            totalfiltItems = filtTableItemArr.length;
                            this.evServ.publish('frDBIIStart', { name: resEPName, count: 0, total: totalfiltItems });
                            processTasks();
                        }
                    }
                }))();
            }
        });
    }
    /////////////////////////////////////////////////////////////////////////////
    valueTypes(ResEPName) {
        const resTblName = _baseDB__WEBPACK_IMPORTED_MODULE_2__.Resources[ResEPName];
        const resTblSchema = _baseDB__WEBPACK_IMPORTED_MODULE_2__.DefaultDB.tables.filter(x => x.name === resTblName)[0].schema;
        let resTblTypes = {};
        for (let i = 0; i < resTblSchema.length; i++) {
            const colName = resTblSchema[i].column;
            const colValI = resTblSchema[i].value.split(' ')[0].toLowerCase();
            resTblTypes[colName] = _baseDB__WEBPACK_IMPORTED_MODULE_2__.InsertTypeMap[colValI];
        }
        ;
        return Promise.resolve(resTblTypes);
    }
    /////////////////////////////////////////////////////////////////////////////
    insertItemsCMD(ResEPName) {
        const exceptTbl = ['sync', 'deputy_profile'];
        let cTblName;
        let cTblFields = [];
        if (exceptTbl.includes(ResEPName)) {
            cTblName = ResEPName;
        }
        else {
            cTblName = _baseDB__WEBPACK_IMPORTED_MODULE_2__.Resources[ResEPName];
        }
        ;
        const cTbl = _baseDB__WEBPACK_IMPORTED_MODULE_2__.DefaultDB.tables.filter(x => x.name === cTblName)[0];
        for (let i = 0; i < cTbl.schema.length; i++) {
            cTblFields.push(cTbl.schema[i].column);
        }
        ;
        return Promise.resolve('INSERT OR REPLACE INTO ' + cTblName + ' (' + cTblFields.join(',').replace(/,\s*$/, '') + ') VALUES (' + '?,'.repeat(cTbl.schema.length).replace(/,\s*$/, '') + ')');
    }
    /////////////////////////////////////////////////////////////////////////////
    addTable(ResEPName) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const cTblName = _baseDB__WEBPACK_IMPORTED_MODULE_2__.Resources[ResEPName];
            const cTbl = _baseDB__WEBPACK_IMPORTED_MODULE_2__.DefaultDB.tables.filter(x => x.name === cTblName)[0];
            let cTblFields = [];
            let hasI;
            let cTblIndexes = [];
            for (let i = 0; i < cTbl.schema.length; i++) {
                cTblFields.push(cTbl.schema[i].column + ' ' + cTbl.schema[i].value);
            }
            ;
            if (cTbl.indexes) {
                hasI = true;
                for (let i = 0; i < cTbl.indexes.length; i++) {
                    cTblIndexes.push('CREATE INDEX IF NOT EXISTS ' + cTbl.indexes[i].name + ' ON ' + cTblName + ' (' + cTbl.indexes[i].value + ');');
                }
            }
            ;
            let cTblCMD = 'CREATE TABLE IF NOT EXISTS ' + cTblName + '(' + cTblFields.join(', ').replace(/,\s*$/, '') + ');';
            hasI ? cTblCMD = cTblCMD + ' ' + cTblIndexes.join(' ') : cTblCMD;
            try {
                const addResTbl = yield this.userDB.run(cTblCMD);
                if (addResTbl.changes.changes !== -1) {
                    return Promise.resolve(true);
                }
            }
            catch (addErr) {
                this.logger.info('[sqlServ|addTable] (Error): ' + addErr);
                return Promise.resolve(false);
            }
        });
    }
    /////////////////////////////////////////////////////////////////////////////
    deleteTable(ResEPName) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const delResTbl = yield this.userDB.run('DROP TABLE IF EXISTS ' + _baseDB__WEBPACK_IMPORTED_MODULE_2__.Resources[ResEPName] + ';');
                if (delResTbl.changes.changes !== -1) {
                    return Promise.resolve(true);
                }
            }
            catch (delErr) {
                this.logger.info('[sqlServ|delTable] (Error): ' + delErr);
                return Promise.resolve(false);
            }
        });
    }
    ////////////////////////////////////////////////////////////////////////////
    deleteItem(tableName, uIDCol, idNo) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const deleteCMD = 'DELETE FROM ' + tableName + ' WHERE ' + uIDCol + ' = ' + idNo + ';';
                const deleteRes = yield this.userDB.run(deleteCMD);
                if (deleteRes.changes.changes !== -1) {
                    return Promise.resolve(true);
                }
            }
            catch (delErr) {
                return Promise.resolve(false);
            }
        });
    }
    ///////////////////////////////////////////////////////////////////////////
    deleteAllTasks() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const deleteAllCMD = 'DELETE FROM tasks';
                const deleteRes = yield this.userDB.run(deleteAllCMD);
                if (deleteRes.changes.changes !== -1) {
                    return Promise.resolve(true);
                }
            }
            catch (delErr) {
                return Promise.resolve(false);
            }
        });
    }
    ///////////////////////////////////////////////////////////////////////////
    updateItem(resEPName, itemToUpdate, fieldNameForUpdate, newValue, uniqueId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const tableColsObj = _baseDB__WEBPACK_IMPORTED_MODULE_2__.Resources[resEPName];
            let uId = resEPName === 'colleague' ? 'EmpId' : 'Id';
            const tableColNames = Object.keys(tableColsObj);
            let tableColsArr = [];
            let updatedVals = [];
            const tblInsertCMD = yield this.insertItemsCMD(resEPName);
            for (let colCount = 0; colCount < tableColNames.length; colCount++) {
                const thisColName = tableColNames[colCount];
                tableColsArr.push(thisColName + '=?');
                if (thisColName === fieldNameForUpdate) {
                    updatedVals.push(newValue);
                }
                else {
                    updatedVals.push(itemToUpdate[thisColName]);
                }
            }
            ;
            const deleteCMD = 'DELETE FROM ' + _baseDB__WEBPACK_IMPORTED_MODULE_2__.Resources[resEPName] + ' WHERE ' + uniqueId + ' = ' + uId + ';';
            const deleteRes = yield this.userDB.run(deleteCMD);
            if (deleteRes.changes.changes !== -1) {
                this.logger.info('[sqlServ|updateItem] (Deleted OLD) EmpId: ' + uId + ' - SUCCESS!');
            }
            else {
                this.logger.info('[sqlServ|updateItem] (Error) Deleting: ' + uId);
            }
            ;
            const updateRes = yield this.userDB.run(tblInsertCMD, updatedVals);
            if (updateRes.changes.changes !== -1) {
                this.logger.info('[sqlServ|updateItem] (Updated NEW) EmpId: ' + uId + ' - SUCCESS!');
            }
            else {
                this.logger.info('[sqlServ|updateItem] (Error) Updating: ' + uId);
            }
            ;
        });
    }
    ///////////////////////////////////////////////////////////////////////////
    dlNativeColleagueImgs() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|dlNativeColleagueImgs] >>> STARTED...');
            const randomFN = () => { return Math.random().toString(20).substr(2, 10); };
            const peopleRes = (yield this.userDB.query('SELECT * FROM colleague')).values;
            this.evServ.publish('dlConvImgs-Start', { name: 'colleague', total: peopleRes.length, count: 0 });
            let doneImgs = [];
            for (let i = 0; i < peopleRes.length; i++) {
                const p = peopleRes[i];
                const pId = p.EmpId;
                const pWebImg = p.Photo;
                const pFName = randomFN();
                try {
                    const nativeUri = yield this.deputy.saveNativeImage(pWebImg, pFName);
                    doneImgs.push(nativeUri);
                    this.evServ.publish('dlConvImgs-Prog', { name: 'colleague', count: i, uImgs: nativeUri });
                    const newURLRes = yield this.userDB.run('UPDATE colleague SET Photo = ' + nativeUri + ' WHERE EmpId = ' + pId);
                    if (newURLRes.changes.changes !== -1) {
                        this.logger.info('[sqlServ|dlNativeColleagueImgs] (SUCCESS) Replaced DB Photo for ' + p.DisplayName + ' - ' + nativeUri);
                    }
                }
                catch (nURLErr) {
                    this.logger.info('[sqlServ|dlNativeColleagueImgs] (ERROR): ' + nURLErr.message);
                }
            }
            this.logger.info('[sqlServ|SQLServ|dlNativeColleagueImgs] ...FINISHED! <<<');
            this.evServ.publish('dlConvImgs-Finish', true);
            return Promise.resolve(doneImgs);
        });
    }
    ///////////////////////////////////////////////////////////////////////////
    dlConvertDBImages(tableN) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|dlConvertDBImages] (' + tableN + ')...');
            const pTs = ['photo', 'img', 'image', 'picture', 'avatar', 'logo', 'jpg', 'jpeg', 'gif', 'png', 'bmp'];
            const revRes = (o) => { let rO = {}; Object.keys(o).forEach((x => { rO[o[x]] = x; })); return rO; };
            const resEPName = revRes(_baseDB__WEBPACK_IMPORTED_MODULE_2__.Resources)[tableN];
            const iURL = (tS) => { if (!tS.includes('capacitor_file') && tS.substring(0, 4).toLowerCase() === 'http') {
                for (const pT of pTs) {
                    if (tS.match(new RegExp(pT, 'gi'))) {
                        return true;
                    }
                }
                return false;
            }
            else {
                return false;
            } };
            const randomFN = (length = 10) => Math.random().toString(20).substr(2, length);
            let convImgs = [];
            try {
                const iTblItems = yield this.userDB.query('SELECT * FROM ' + tableN);
                for (let iTblICount = 0; iTblICount < iTblItems.values.length; iTblICount++) {
                    for (const [key, value] of Object.entries(iTblItems.values[iTblICount])) {
                        if (iURL(value.toString())) {
                            const dlConvUri = yield this.deputy.saveNativeImage(value.toString(), randomFN());
                            convImgs.push((dlConvUri));
                            yield this.updateItem(resEPName, iTblItems.values[iTblICount], key, dlConvUri, (tableN === 'colleague' ? 'EmpId' : 'Id'));
                        }
                    }
                }
                this.logger.info('[sqlServ|dlConvertDBImages] (' + tableN + ') - FINISHED.');
                return Promise.resolve(convImgs);
            }
            catch (getAllErr) {
                this.logger.info('[sqlServ|dlConvertDBImages] (ERROR - ' + tableN + '): ' + getAllErr.message);
                return Promise.resolve(null);
            }
        });
    }
    ///////////////////////////////////////////////////////////////////////////
    doDLConvertDBImages() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|doDLConvertDBImages] ()...');
            const imgTbls = [];
            const exclTbls = ['sync_table', 'sync', 'joins', 'assocs'];
            const imgTerms = ['photo', 'img', 'image', 'picture', 'avatar', 'logo'];
            const dbTblNs = this.dS.getUDBTables().filter(t => !exclTbls.includes(t));
            const hasImgFields = (dbTblN) => {
                const tFs = _baseDB__WEBPACK_IMPORTED_MODULE_2__.DefaultDB.tables.filter(t => t.name === dbTblN)[0].schema;
                let tFNs = [];
                for (let i = 0; i < tFs.length; i++) {
                    tFNs.push(tFs[i].column);
                }
                ;
                for (const tFN of tFNs) {
                    if (imgTerms.includes(tFN.toLowerCase())) {
                        return true;
                    }
                }
                return false;
            };
            for (let tblCount = 0; tblCount < dbTblNs.length; tblCount++) {
                const tT = dbTblNs[tblCount];
                if ((yield this.getItemCount(tT)) > 0 && hasImgFields(tT)) {
                    imgTbls.push(tT);
                }
            }
            ;
            const iTblNo = imgTbls.length;
            let doneTbls = 0;
            ///////////////
            const doConv = (imgT) => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
                const convRes = yield this.dlConvertDBImages(imgT);
                doneTbls++;
                this.evServ.publish('dlConvImgs-Prog', { name: imgT, count: doneTbls, uImgs: convRes });
                doFeed();
            });
            const doFeed = () => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
                if (doneTbls === iTblNo) {
                    this.evServ.publish('dlConvImgs-Finish', true);
                    this.logger.info('[sqlServ|doDLConvertDBImages] (Finished) \uD83C\uDFC1 Done Converting DB Imgs for ' + doneTbls + '/' + iTblNo + ' Tables.');
                }
                else {
                    const nextTable = imgTbls[doneTbls];
                    yield doConv(nextTable);
                }
            });
            doConv(imgTbls[doneTbls]);
            this.evServ.publish('dlConvImgs-Start', { name: imgTbls[doneTbls], total: iTblNo, count: 0 });
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    myExecuteSet(exeSetCMD) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            let totalSetItems = exeSetCMD.length;
            this.logger.info('[sqlServ|myExecuteSet] (' + totalSetItems + ')...');
            try {
                let exeSetResult = yield this.userDB.executeSet(exeSetCMD);
                if (exeSetResult.changes.changes > -1) {
                    this.logger.info('[sqlServ|myExecuteSet] (Results): Added ' + exeSetResult.changes.changes + ' Items to Table.');
                    return Promise.resolve(true);
                }
                else {
                    return Promise.reject(false);
                }
            }
            catch (exeSetErr) {
                return Promise.reject(exeSetErr.message);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ///// TIMESHEETS
    //////////////////////////////////////////////////////////////////////////////////////
    getTimesheets() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|getTimesheets] ()...');
            try {
                let getTSResult = yield this.userDB.query('SELECT * FROM Timesheet');
                if (getTSResult.values.length > 0) {
                    this.logger.info('[sqlServ|getTimesheets] \uD83D\uDD0E (Results): FOUND [' + getTSResult.values.length + '] Timesheets.');
                    return Promise.resolve(getTSResult);
                }
                else {
                    return Promise.resolve([]);
                }
            }
            catch (getTSErr) {
                return Promise.reject(new Error('[sqlServ|getTimesheets] (ERROR): ' + getTSErr.message));
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getSingleTimesheet(tsId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            return Promise.resolve((yield this.userDB.query('SELECT * FROM timesheets WHERE Id = ' + tsId)).values[0]);
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    checkGetSingleTS(tsId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const cGSTSRes = yield this.userDB.query('SELECT * FROM timesheets WHERE Id = ' + tsId);
                if (cGSTSRes.values.length > 0) {
                    return Promise.resolve({ result: true, data: cGSTSRes.values[0] });
                }
                else {
                    return Promise.resolve({ result: false, data: null });
                }
            }
            catch (cGSTSErr) {
                return Promise.resolve({ result: false, data: null });
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getItemCount(tableName) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const countRes = yield this.userDB.query('SELECT COUNT(*) FROM ' + tableName);
                return Promise.resolve(countRes.values[0]['COUNT(*)']);
            }
            catch (countErr) {
                return Promise.reject(countErr);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getTSheetRangeCount(btStartDate, btEndDate) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const countRes = yield this.userDB.query('SELECT COUNT(*) FROM timesheets WHERE StartTime BETWEEN ' + btStartDate + ' AND ' + btEndDate + ';');
                return Promise.resolve(countRes.values[0]['COUNT(*)']);
            }
            catch (countErr) {
                return Promise.reject(countErr);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getAllRosters() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const { values } = yield this.userDB.query('SELECT * FROM `rosters`');
                return Promise.resolve(values);
            }
            catch (gARErr) {
                this.logger.info('[sqlServ|getAllRosters] (Error): ' + JSON.stringify(gARErr));
                return Promise.reject();
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getAllTableItems(tableName) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|getAllTableItems] (' + tableName + ')...');
            try {
                let getAllResult = yield this.userDB.query('SELECT * FROM ' + tableName);
                if (getAllResult.values.length > 0) {
                    this.logger.info('[sqlServ|getAllTableItems] \uD83D\uDD0E (Results): FOUND [' + getAllResult.values.length + '] ' + tableName + ' Items.');
                    return Promise.resolve(getAllResult);
                }
                else {
                    return Promise.resolve([]);
                }
            }
            catch (getAllErr) {
                return Promise.reject(new Error('[sqlServ|getAllTableItems] (ERROR - ' + tableName + '): ' + getAllErr.message));
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getAllPeople() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|getAllPeople] ()...');
            try {
                const gAPRes = (yield this.userDB.query('SELECT * FROM colleagues')).values;
                if (gAPRes.length > 0) {
                    return Promise.resolve(gAPRes);
                }
                else {
                    return Promise.resolve([]);
                }
            }
            catch (gAPErr) {
                this.logger.info('[sqlServ|getAllPeople] (Error): ' + gAPErr.message);
                Promise.resolve(gAPErr.message);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getAllTSheetsOrderId() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|getAllTSheetsOrderId] ()...');
            try {
                let getAllTSOIdRes = yield this.userDB.query('SELECT * FROM timesheets ORDER BY Id DESC');
                if (getAllTSOIdRes.values.length > 0) {
                    this.logger.info('[sqlServ|getAllTSheetsOrderId] \uD83D\uDD0E (Results): Returning [' + getAllTSOIdRes.values.length + '] Sheets ORDERED BY ID DESC.');
                    return Promise.resolve(getAllTSOIdRes.values);
                }
                else {
                    return Promise.resolve([]);
                }
            }
            catch (getAllTSOIdErr) {
                return Promise.reject(new Error('[sqlServ|getAllTSheetsOrderId] (ERROR): ' + getAllTSOIdErr.message));
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getAllPendingTSheetItems() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|getAllPendingTSheetItems] ()...');
            try {
                let getAllPTSRes = yield this.userDB.query('SELECT * FROM timesheets WHERE TimeApproved !=1');
                if (getAllPTSRes.values.length > 0) {
                    this.logger.info('[sqlServ|getAllPendingTSheetItems] \uD83D\uDD0E (Results): FOUND [' + getAllPTSRes.values.length + '] "PENDING" TSheet Items.');
                    return Promise.resolve(getAllPTSRes.values);
                }
                else {
                    return Promise.resolve([]);
                }
            }
            catch (getAllPTSErr) {
                return Promise.reject(new Error('[sqlServ|getAllPendingTSheetItems] (ERROR): ' + getAllPTSErr.message));
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getXTableItems(tableName, order, limit, offset) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            let getXCMD;
            offset === 0 ? getXCMD = 'SELECT * FROM ' + tableName + ' ORDER BY Modified ' + order.toUpperCase() + ' LIMIT ' + limit : getXCMD = 'SELECT * FROM ' + tableName + ' ORDER BY Modified ' + order.toUpperCase() + ' LIMIT ' + limit + ' OFFSET ' + offset;
            try {
                const getXRes = yield this.userDB.query(getXCMD);
                return Promise.resolve(getXRes.values);
            }
            catch (getAllErr) {
                return Promise.reject(new Error('[sqlServ|getXTableItems] (ERROR - ' + tableName + '): ' + getAllErr.message));
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getXTSheetItems(btDates, order, itemLimit, itemOffset) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            let dR;
            let o;
            let oB;
            let oD;
            let iL;
            let iO;
            btDates ? dR = 'WHERE StartTime BETWEEN ' + btDates.start + ' AND ' + btDates.end + ' ' : dR = '';
            if (order && order.by) {
                oB = 'ORDER BY ' + order.by + ' ';
                order.dir ? oD = order.dir.toUpperCase() + ' ' : oD = '';
                o = oB + oD;
            }
            else {
                o = '';
            }
            ;
            itemLimit > 0 ? iL = 'LIMIT ' + itemLimit + ' ' : iL = '';
            itemOffset > 0 ? iO = 'OFFSET ' + itemOffset : iO = '';
            const xCMD = 'SELECT * FROM timesheets ' + dR + o + iL + iO;
            const CMD = xCMD.trim() + ';';
            try {
                const getXTSRes = yield this.userDB.query(CMD);
                return Promise.resolve(getXTSRes.values);
            }
            catch (getXTSErr) {
                return Promise.reject(new Error('[sqlServ|getXTableItems] (ERROR): ' + getXTSErr.message));
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getMinMaxItems(tableName, tableCol) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const fRes = (yield this.userDB.query('SELECT MIN(' + tableCol + ') FROM ' + tableName)).values[0]['MIN(' + tableCol + ')'];
            const lRes = (yield this.userDB.query('SELECT MAX(' + tableCol + ') FROM ' + tableName)).values[0]['MAX(' + tableCol + ')'];
            return Promise.resolve({ first: fRes, last: lRes });
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getTSheetsDateRange() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const minRes = (yield this.userDB.query('SELECT MIN(StartTime) FROM timesheets')).values[0]['MIN(StartTime)'];
            const maxRes = (yield this.userDB.query('SELECT MAX(StartTime) FROM timesheets')).values[0]['MAX(StartTime)'];
            return Promise.resolve({ min: minRes, max: maxRes });
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getTSheetsRangeMinMax(btDates) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const minRes = (yield this.userDB.query('SELECT MIN(StartTime) FROM timesheets WHERE StartTime BETWEEN ' + btDates.start + ' AND ' + btDates.end)).values[0]['MIN(StartTime)'];
            const maxRes = (yield this.userDB.query('SELECT MAX(StartTime) FROM timesheets WHERE StartTime BETWEEN ' + btDates.start + ' AND ' + btDates.end)).values[0]['MAX(StartTime)'];
            return Promise.resolve({ min: minRes, max: maxRes });
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getPerson(empId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const getPRes = yield this.userDB.query('SELECT * FROM colleague WHERE EmpId=' + empId);
                if (getPRes.values.length > 0) {
                    this.logger.info('[sqlServ|getPerson] \uD83D\uDD0E (Results): FOUND [' + getPRes.values.length + '] Employee/Colleague.');
                    return Promise.resolve(getPRes);
                }
                else {
                    return Promise.resolve([]);
                }
            }
            catch (getPErr) {
                return Promise.reject(getPErr);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getTSHistory(searchIds) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            let combinedRes = [];
            const tryCols = ['UsageRecordId', 'BalanceId', 'Id'];
            for (let i = 0; i < searchIds.length; i++) {
                const tryId = searchIds[i];
                for (let c = 0; c < tryCols.length; c++) {
                    const tryCol = tryCols[c];
                    try {
                        const getTSHRes = yield this.userDB.query('SELECT * FROM system_usage_tracking WHERE ' + tryCol + '=' + tryId);
                        if (getTSHRes.values.length > 0) {
                            for (const hI of getTSHRes.values) {
                                combinedRes.push(hI);
                            }
                        }
                    }
                    catch (getTSHErr) {
                        this.logger.info('[sqlServ|getTSHistory] (Error): ' + getTSHErr);
                        return Promise.reject(getTSHErr);
                    }
                }
            }
            if (combinedRes.length > 0) {
                const notDailyArr = combinedRes.filter(h => h.UsageType !== 2);
                return Promise.resolve(notDailyArr);
            }
            else {
                return Promise.resolve([]);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getSelectTSheetItems(tsIds) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            let allTSIs = [];
            for (let i = 0; i < tsIds.length; i++) {
                const thisTSId = tsIds[i];
                try {
                    const tsIRes = (yield this.userDB.query(`SELECT * FROM timesheets WHERE Id='` + thisTSId + `'`))['values'][0];
                    allTSIs.push(tsIRes);
                    console.log(tsIRes);
                }
                catch (tsIErr) {
                    this.logger.info('[sqlServ|getSelectTSheetItems] (ERROR): ' + tsIErr.message);
                }
            }
            if (allTSIs.length > 0) {
                return Promise.resolve(allTSIs);
            }
            else {
                return Promise.resolve([]);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ///// SHIFTS/ROSTERS /////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////
    getXRosterItems(btDates, order, itemLimit, itemOffset) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            let dR;
            let o;
            let oB;
            let oD;
            let iL;
            let iO;
            btDates ? dR = 'WHERE StartTime BETWEEN ' + btDates.start + ' AND ' + btDates.end + ' ' : dR = '';
            if (order && order.by) {
                oB = 'ORDER BY ' + order.by + ' ';
                order.dir ? oD = order.dir.toUpperCase() + ' ' : oD = '';
                o = oB + oD;
            }
            else {
                o = '';
            }
            ;
            itemLimit > 0 ? iL = 'LIMIT ' + itemLimit + ' ' : iL = '';
            itemOffset > 0 ? iO = 'OFFSET ' + itemOffset : iO = '';
            const xCMD = 'SELECT * FROM rosters ' + dR + o + iL + iO;
            const CMD = xCMD.trim() + ';';
            try {
                const getXTSRes = yield this.userDB.query(CMD);
                return Promise.resolve(getXTSRes.values);
            }
            catch (getXTSErr) {
                return Promise.reject(new Error('[sqlServ|getXRosterItems] (ERROR): ' + getXTSErr.message));
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getRosterWeekItems(startOfWeek, endOfWeek) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const weekEvsQ = 'SELECT * FROM rosters WHERE StartTime >= ' + startOfWeek + ' AND StartTime <= ' + endOfWeek + ' ORDER BY StartTime ASC';
            try {
                const weekEvsRes = yield this.userDB.query(weekEvsQ);
                return Promise.resolve(weekEvsRes.values);
            }
            catch (weekEvsErr) {
                return Promise.reject(new Error('[sqlServ|getRosterWeekItems] (ERROR): ' + weekEvsErr));
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getRosterRangeCount(btStartDate, btEndDate) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const countRes = yield this.userDB.query('SELECT COUNT(*) FROM rosters WHERE StartTime BETWEEN ' + btStartDate + ' AND ' + btEndDate + ';');
                return Promise.resolve(countRes.values[0]['COUNT(*)']);
            }
            catch (countErr) {
                return Promise.reject(countErr);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getFutureDueTasks() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const nowUTS = this.dT.getUT(new Date());
            try {
                const gFDTRes = yield this.userDB.query('SELECT * FROM tasks WHERE DueTimestamp > ' + nowUTS + ' AND TsCompleted = -1;');
                if (gFDTRes.values.length > 0) {
                    return Promise.resolve({ result: true, data: gFDTRes.values });
                }
                else {
                    return Promise.resolve({ result: true, data: [] });
                }
            }
            catch (gFDTErr) {
                return Promise.reject(gFDTErr);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getFutureStartShifts() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const nowUTS = this.dT.getUT(new Date());
            try {
                const gFSSRes = yield this.userDB.query('SELECT * FROM rosters WHERE StartTime > ' + nowUTS + ';');
                if (gFSSRes.values.length > 0) {
                    return Promise.resolve({ result: true, data: gFSSRes.values });
                }
                else {
                    return Promise.resolve({ result: true, data: [] });
                }
            }
            catch (gFSSErr) {
                return Promise.reject(gFSSErr);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getFutureShifts() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const nowT = this.dT.gUT();
            try {
                const fSRes = (yield this.userDB.query('SELECT * FROM rosters WHERE StartTime >=' + nowT + ' ORDER BY StartTime ASC')).values;
                if (fSRes.length > 0) {
                    return Promise.resolve(fSRes);
                }
                else {
                    return Promise.resolve([]);
                }
            }
            catch (fSErr) {
                this.logger.info('[sqlServ|getFutureShifts] (Error): ' + fSErr.message);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getRostersRangeMinMax(btDates) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const minRes = (yield this.userDB.query('SELECT MIN(StartTime) FROM rosters WHERE StartTime BETWEEN ' + btDates.start + ' AND ' + btDates.end)).values[0]['MIN(StartTime)'];
            const maxRes = (yield this.userDB.query('SELECT MAX(StartTime) FROM rosters WHERE StartTime BETWEEN ' + btDates.start + ' AND ' + btDates.end)).values[0]['MAX(StartTime)'];
            return Promise.resolve({ min: minRes, max: maxRes });
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getRostersDateRange() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const minRes = (yield this.userDB.query('SELECT MIN(StartTime) FROM rosters')).values[0]['MIN(StartTime)'];
            const maxRes = (yield this.userDB.query('SELECT MAX(StartTime) FROM rosters')).values[0]['MAX(StartTime)'];
            return Promise.resolve({ min: minRes, max: maxRes });
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getWeekDoneHrs(wO) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const wHrsRes = (yield this.userDB.query('SELECT SUM(TotalTime) FROM timesheets WHERE StartTime > ' + wO.s + ' AND StartTime < ' + wO.e)).values[0]['SUM(TotalTime)'];
            return Promise.resolve(wHrsRes);
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    updateRosterTSMatch(rosItems) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            let allURs = [];
            for (let i = 0; i < rosItems.length; i++) {
                const rId = rosItems[i].Id;
                const rTSM = rosItems[i].MatchedByTimesheet;
                try {
                    const updateRes = yield this.userDB.run('UPDATE rosters set MatchedByTimesheet = ' + rTSM + ' WHERE Id = ' + rId + ';');
                    if (updateRes.changes.changes !== -1) {
                        allURs.push({ rId: rId, tId: rTSM });
                        this.logger.info('[sqlServ|updateRosterTSMatch] (SUCCESS) Added MatchedByTimesheet Pty (' + rTSM + ') for Roster Id #' + rId);
                    }
                }
                catch (uRResErr) {
                    this.logger.info('[sqlServ|updateRosterTSMatch] (ERROR):' + uRResErr.message);
                }
            }
            if (allURs.length > 0) {
                return Promise.resolve(allURs);
            }
            else {
                return Promise.resolve([]);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ////// SYNC/UPDATE ///////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////
    initSync() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const syncTbls = ['rosters', 'timesheets', 'tasks', 'memos'];
            const inCMD = yield this.insertItemsCMD('sync');
            let okC = 0;
            for (let i = 0; i < syncTbls.length; i++) {
                const tN = syncTbls[i];
                const tTS = this.dT.getUT(new Date());
                const inVals = [null, tN, tTS, null];
                try {
                    const tsRes = yield this.userDB.run(inCMD, inVals);
                    if (tsRes.changes.changes !== -1) {
                        okC++;
                    }
                }
                catch (err) {
                    this.logger.info('[sqlServ|initSync] (ERROR): ' + err);
                }
            }
            ;
            if (okC > 0) {
                this.logger.info('[sqlServ|initSync] (SUCCESS): Created Sync Table (sync) & Set last_sync UTS For [ALL] DB Tables');
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getSync(tableN) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const monthAgoUTS = this.dT.getUT(this.dT.subWs(new Date(), 4));
            try {
                const { values } = yield this.userDB.query('SELECT last_sync FROM sync WHERE table_name="' + tableN + '"');
                if (values && values.length > 0) {
                    const lS = values[0]['last_sync'];
                    this.logger.info('[sqlServ|getSync] (Found) Last Sync for ' + tableN + '=' + lS);
                    return Promise.resolve(lS);
                }
                else {
                    this.logger.info('[sqlServ|getSync] (NOT FOUND) - Returning Sync UTS NOW less 4x Weeks');
                    return Promise.resolve(monthAgoUTS);
                }
            }
            catch (gSErr) {
                this.logger.info('[sqlServ|getSync] (Error):' + gSErr.message + ' - Returning Sync UTS NOW less 4x Weeks.');
                return Promise.resolve(monthAgoUTS);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    setSync(tableN) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const sUTS = this.dT.getUT(new Date());
            try {
                const sSRes = (yield this.userDB.run('UPDATE sync SET last_sync = ' + sUTS + ' WHERE table_name = "' + tableN + '"')).changes.changes;
                if (sSRes !== -1) {
                    this.logger.info('[sqlServ|setSync] (SUCCESS) Updated last_sync UTS to ' + sUTS + ' for ' + tableN + ' DB Table');
                    return Promise.resolve(true);
                }
            }
            catch (sSErr) {
                this.logger.info('[sqlServ|setSync] (ERROR):' + sSErr.message);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    syncUpdateItem(sql, vals) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const { changes } = (yield this.userDB.run(sql, vals)).changes;
                if (changes !== -1) {
                    return Promise.resolve(true);
                }
                else {
                    return Promise.resolve(false);
                }
            }
            catch (sUIErr) {
                this.logger.info('♻️ [sqlServ|syncUpdateItem] (🔴 ERROR): ' + JSON.stringify(sUIErr));
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    replaceItem(tableN, UID, UIDValue, newItem) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const consM = (r, x) => { let rT, xT; x ? xT = ': ' + x : xT = ''; r === 's' ? rT = '✔️SUCCESS' : rT = '❌ERROR'; return this.logger.info('[sqlServ|replaceItem] 🛠️ (' + rT + ') UPDATE Item (' + UID + ':' + UIDValue + ') in ' + tableN + xT); };
            const dpTblSchema = _baseDB__WEBPACK_IMPORTED_MODULE_2__.DefaultDB.tables.filter(x => x.name === tableN)[0].schema;
            let resEPName;
            for (const [k, v] of Object.entries(_baseDB__WEBPACK_IMPORTED_MODULE_2__.Resources)) {
                if (v === tableN) {
                    resEPName = k;
                }
            }
            ;
            let rawVals = [];
            let updTypes = [];
            for (let i = 0; i < dpTblSchema.length; i++) {
                rawVals.push(newItem[dpTblSchema[i].column]);
                updTypes.push(dpTblSchema[i].value);
            }
            ;
            const updVals = yield this.insDPTypeCheck(rawVals, updTypes);
            const updSQL = yield this.insertItemsCMD(resEPName);
            try {
                const { changes } = (yield this.userDB.run(updSQL, updVals)).changes;
                if (changes !== -1) {
                    consM('s', null);
                    return Promise.resolve({ result: true, id: UIDValue });
                }
                else {
                    consM('e', 'changes===-1');
                    return Promise.resolve({ result: false, id: UIDValue });
                }
            }
            catch (rIErr) {
                consM('e', rIErr.message);
                return Promise.resolve({ result: false, id: UIDValue });
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    insertSingleItem(tableN, rawItem) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|insertSingleItem] (' + tableN + ',' + rawItem + ')...');
            let resName;
            if (tableN === 'rosters') {
                resName = 'Roster';
            }
            else {
                for (const [key, value] of Object.entries(_baseDB__WEBPACK_IMPORTED_MODULE_2__.Resources)) {
                    if (tableN === value) {
                        resName = key.toString();
                    }
                }
            }
            ;
            const tblValTypes = yield this.valueTypes(resName);
            const tblInsertCMD = yield this.insertItemsCMD(resName);
            const noRawObjKeys = Object.keys(rawItem).length;
            let rawKeyCount = 0;
            let wipObj = rawItem;
            for (const [key, value] of Object.entries(rawItem)) {
                rawKeyCount++;
                if (key.includes('_')) {
                    delete wipObj[key];
                }
                else {
                    if (typeof value == 'object') {
                        if (value == null || value == undefined) {
                            if (tblValTypes[key] === 'string') {
                                wipObj[key] = String('');
                            }
                            else {
                                wipObj[key] = Number(-1);
                            }
                        }
                        else {
                            const isArray = () => { return Array.isArray(value) ? true : false; };
                            const isObject = () => { return value == Object(value) && !Array.isArray(value) ? true : false; };
                            const isPlain = () => { let proto = value; while (Object.getPrototypeOf(proto) !== null) {
                                proto = Object.getPrototypeOf(proto);
                            } return Object.getPrototypeOf(value) === proto; };
                            if (isArray || isObject || isPlain) {
                                wipObj[key] = JSON.stringify(value);
                            }
                            ;
                        }
                    }
                    if (value === 'null' || value === 'undefined') {
                        if (tblValTypes[key] === 'string') {
                            wipObj[key] = String('');
                        }
                        else {
                            wipObj[key] = Number(-1);
                        }
                    }
                    ;
                    if (typeof value === 'boolean') {
                        if (value) {
                            wipObj[key] = Number(1);
                        }
                        else {
                            wipObj[key] = Number(0);
                        }
                    }
                    ;
                    if (key === 'Date' || key === 'DateTime') {
                        wipObj[key] = value.toString();
                    }
                    ;
                }
                if (rawKeyCount === noRawObjKeys) {
                    const totalVals = Object.keys(tblValTypes).length;
                    let valCount = 0;
                    let thisValsArr = [];
                    for (const thisPropName of Object.keys(tblValTypes)) {
                        valCount++;
                        thisValsArr.push(wipObj[thisPropName]);
                        if (valCount === totalVals) {
                            try {
                                yield this.userDB.run(tblInsertCMD, thisValsArr);
                                return Promise.resolve(true);
                            }
                            catch (insertIErr) {
                                this.logger.info('[sqlServ|insertSingleItem] (Error): ' + insertIErr);
                                return Promise.resolve(false);
                            }
                        }
                        ;
                    }
                }
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ///// PROFILE - COUNTRIES/STATES /////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////
    createProfile(profileData) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            let insVals = [];
            const insCMD = yield this.insertItemsCMD('deputy_profile');
            const uUKStr = this.deputy.uUK.toString();
            const nowUTS = this.dT.gUT();
            insVals.push(uUKStr);
            for (let i = 0; i < _profileData__WEBPACK_IMPORTED_MODULE_3__.pKeys.length; i++) {
                const fName = _profileData__WEBPACK_IMPORTED_MODULE_3__.pKeys[i];
                let newV;
                const rawV = profileData[fName].value;
                if (rawV === null || rawV === 'null' || rawV === undefined || rawV === 'undefined' || rawV === '') {
                    newV = null;
                }
                else if (fName === 'photo') {
                    newV = JSON.stringify(rawV);
                }
                else {
                    newV = rawV.toString().trim();
                }
                ;
                insVals.push(newV);
            }
            ;
            insVals.push(nowUTS);
            insVals.push(nowUTS);
            try {
                const cPRes = (yield this.userDB.run(insCMD, insVals)).changes.changes;
                if (cPRes !== -1) {
                    return Promise.resolve(true);
                }
                else {
                    return Promise.resolve(false);
                }
            }
            catch (cPErr) {
                return Promise.resolve(false);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    hasProfile() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const hPRes = (yield this.userDB.query('SELECT dp_uuk FROM deputy_profile')).values;
                if (hPRes.length > 0) {
                    for (let i = 0; i < hPRes.length; i++) {
                        const pO = hPRes[i];
                        if (pO['dp_uuk'].toString() === this.deputy.uUK.toString()) {
                            return Promise.resolve(true);
                        }
                    }
                    ;
                    return Promise.resolve(false);
                }
                else {
                    return Promise.resolve(false);
                }
            }
            catch (hPErr) {
                return Promise.resolve(false);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getProfile() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const gPRes = (yield this.userDB.query(`SELECT * FROM deputy_profile WHERE dp_uuk = '` + this.deputy.uUK + `'`)).values;
                if (gPRes.length > 0) {
                    return Promise.resolve({ result: true, data: gPRes[0] });
                }
                else {
                    Promise.resolve({ result: false, data: null });
                }
            }
            catch (gPErr) {
                return Promise.resolve({ result: false, data: gPErr });
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    updateProfile(profileObj) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const delRes = yield this.userDB.run(`DELETE FROM deputy_profile WHERE dp_uuk = '` + this.deputy.uUK + `'`);
                if (delRes.changes.changes !== -1) {
                    this.logger.info('[sqlServ|updateProfile] (STEP #1) [SUCCESS] - DELETED OLD Profile - OK.');
                    const insRes = yield this.createProfile(profileObj);
                    if (insRes) {
                        this.logger.info('[sqlServ|updateProfile] (STEP #2) [SUCCESS] - ADDED NEW Profile - OK.');
                        return Promise.resolve(true);
                    }
                    else {
                        this.logger.info('[sqlServ|updateProfile] (STEP #2) [ERROR] - FAILED TO ADD NEW Profile.');
                    }
                }
                else {
                    this.logger.info('[sqlServ|updateProfile] (STEP #1) [ERROR] - FAILED TO DELETE OLD Profile.');
                    return Promise.resolve(false);
                }
            }
            catch (uPErr) {
                this.logger.info('[sqlServ|updateProfile] (Error) - FAILED TO UPDATE Profile.');
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getStates(countryId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const cId = Number(countryId);
            try {
                const gSRes = (yield this.userDB.query('SELECT * FROM states WHERE Country = ' + cId + ';')).values;
                if (gSRes.length > 0) {
                    return Promise.resolve({ result: true, data: gSRes });
                }
                else {
                    return Promise.resolve({ result: true, data: [] });
                }
            }
            catch (gSErr) {
                return Promise.resolve({ result: false, data: gSErr });
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getSingleState(stateId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const sId = Number(stateId);
            try {
                const gSSRes = (yield this.userDB.query('SELECT * FROM states WHERE Id = ' + sId + ';')).values;
                if (gSSRes.length > 0) {
                    return Promise.resolve({ result: true, data: gSSRes[0] });
                }
                else {
                    return Promise.resolve({ result: true, data: null });
                }
            }
            catch (gSSErr) {
                return Promise.resolve({ result: false, data: gSSErr });
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getSingleCountry(countryId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const cId = Number(countryId);
            try {
                const gSCRes = (yield this.userDB.query('SELECT * FROM countries WHERE Id = ' + cId + ';')).values;
                if (gSCRes.length > 0) {
                    return Promise.resolve({ result: true, data: gSCRes[0] });
                }
                else {
                    return Promise.resolve({ result: true, data: null });
                }
            }
            catch (gSCErr) {
                return Promise.resolve({ result: false, data: gSCErr });
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    qCountry(searchTxt) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const qCRes = (yield this.userDB.query(`SELECT * FROM countries WHERE Country LIKE '%` + searchTxt + `%';`)).values;
                if (qCRes.length > 0) {
                    return Promise.resolve(qCRes);
                }
                else {
                    return Promise.resolve([]);
                }
            }
            catch (qCErr) {
                this.logger.info('[sqlServ|qCountry] (Error): ' + qCErr);
                return Promise.reject(qCErr);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getAllCsOrSs(cOs) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|getAllCsOrSs] (' + cOs + ')...');
            let tblN;
            cOs === 'c' ? tblN = 'countries' : tblN = 'states';
            try {
                const gARes = (yield this.userDB.query('SELECT * FROM ' + tblN)).values;
                if (gARes.length > 0) {
                    return Promise.resolve({ result: true, data: gARes });
                }
                else {
                    return Promise.resolve({ result: false, data: [] });
                }
            }
            catch (gAErr) {
                return Promise.resolve({ result: false, data: gAErr });
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ///// NEWS/MEMOS /////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////
    getXMemoItems(itemLimit, itemOffset) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            let iL;
            let iO;
            itemLimit > 0 ? iL = 'LIMIT ' + itemLimit + ' ' : iL = '';
            itemOffset > 0 ? iO = 'OFFSET ' + itemOffset : iO = '';
            const xCMD = 'SELECT * FROM memos ORDER BY Id DESC ' + iL + iO;
            const CMD = xCMD.trim() + ';';
            try {
                const getXTSRes = yield this.userDB.query(CMD);
                return Promise.resolve(getXTSRes.values);
            }
            catch (getXTSErr) {
                return Promise.reject(new Error('[sqlServ|getXMemoItems] (ERROR): ' + getXTSErr.message));
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    updateTaskSortOrder(taskId, newSortOrder) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const uTSORes = yield this.userDB.run('UPDATE tasks set SortOrder = ' + newSortOrder + ' WHERE Id = ' + taskId + ';');
                if (uTSORes.changes.changes !== -1) {
                    this.logger.info('[sqlServ|updateTaskSortOrder] (SUCCESS) Updated SortOrder (' + newSortOrder + ') for Task Id #' + taskId);
                    return Promise.resolve(true);
                }
            }
            catch (uTSOErr) {
                this.logger.info('[sqlServ|updateTaskSortOrder] (ERROR): ' + uTSOErr.message);
                return Promise.resolve(false);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    ///// SHERIFF SETTINGS ///////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////
    hasSettings() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|hasSettings] ()...');
            try {
                const hSRes = (yield this.userDB.query('SELECT dp_uuk FROM `sheriff_settings`')).values;
                if (hSRes.length > 0) {
                    const matchArr = hSRes.filter(sO => String(sO.dp_uuk) === String(this.deputy.uUK));
                    if (matchArr && matchArr.length > 0) {
                        return Promise.resolve(true);
                    }
                    else {
                        return Promise.resolve(false);
                    }
                }
                else {
                    return Promise.resolve(false);
                }
            }
            catch (_a) {
                return Promise.resolve(false);
            }
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    setSettings(settingsObj) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|setSettings] (setObj)...');
            const uUKStr = this.deputy.uUK.toString();
            const settingsStr = JSON.stringify(settingsObj);
            const inCMD = 'INSERT OR REPLACE INTO `sheriff_settings` (dp_uuk,settings) VALUES (?,?)';
            const inVals = [uUKStr, settingsStr];
            try {
                yield this.userDB.run(inCMD, inVals);
                yield this.dS.setSettings(settingsObj);
                return Promise.resolve(true);
            }
            catch (_a) {
                yield this.dS.setSettings(settingsObj);
                return Promise.resolve(false);
            }
            ;
        });
    }
    //////////////////////////////////////////////////////////////////////////////////////
    getSettings() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.info('[sqlServ|getSettings] ()...');
            const detailRes = yield this.dS.getSettings();
            if (detailRes !== null) {
                return Promise.resolve({ result: true, data: detailRes });
            }
            else {
                try {
                    const gSRes = (yield this.userDB.query('SELECT * FROM `sheriff_settings` WHERE `dp_uuk` = "' + this.deputy.uUK + '"')).values;
                    if (gSRes.length > 0) {
                        if (gSRes[0].hasOwnProperty('settings') && gSRes[0].settings) {
                            const settStr = gSRes[0].settings;
                            if (this.evServ.isValidJSON(settStr)) {
                                const settObj = JSON.parse(settStr);
                                return Promise.resolve({ result: true, data: settObj });
                            }
                            else {
                                return Promise.resolve({ result: false });
                            }
                        }
                        else {
                            return Promise.resolve({ result: false });
                        }
                    }
                    else {
                        return Promise.resolve({ result: false });
                    }
                }
                catch (_a) {
                    return Promise.resolve({ result: false });
                }
            }
        });
    }
};
SQLiteService.ctorParameters = () => [
    { type: _deputy_service__WEBPACK_IMPORTED_MODULE_6__.DeputyService },
    { type: _storage_service__WEBPACK_IMPORTED_MODULE_8__.StorageService },
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_11__.NGXLogger },
    { type: _detail_service__WEBPACK_IMPORTED_MODULE_1__.DetailService },
    { type: _events_service__WEBPACK_IMPORTED_MODULE_5__.EventsService },
    { type: _filesystem_service__WEBPACK_IMPORTED_MODULE_7__.FileSystemService },
    { type: _datetime_service__WEBPACK_IMPORTED_MODULE_0__.DateTimeService }
];
SQLiteService = (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_12__.Injectable)()
    //////////////////////////////////////////////////////////////////////////////////////
], SQLiteService);



/***/ }),

/***/ 71188:
/*!*********************************************!*\
  !*** ./src/app/services/storage.service.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StorageService": function() { return /* binding */ StorageService; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 64762);
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ngx-logger */ 62740);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _capacitor_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @capacitor/storage */ 96628);




////////////////////////////////////////////////////////////////
let StorageService = class StorageService {
    ////////////////////////////////////////////////////////////////
    constructor(logger) {
        this.logger = logger;
    }
    ////////////////////////////////////////////////////////////////
    setObject(setKey, setObj) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {
            yield _capacitor_storage__WEBPACK_IMPORTED_MODULE_0__.Storage.set({ key: setKey, value: JSON.stringify(setObj) })
                .then(() => { this.logger.info('[storeServ|setObj] Object (' + setKey + ') Set - \u2714\uFE0FOK'); return true; })
                .catch(() => { this.logger.info('[storeServ|setObj] Object (' + setKey + ') Set - \u2757ERROR'); });
        });
    }
    ////////////////////////////////////////////////////////////////
    getObject(getKey) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {
            const getO = yield _capacitor_storage__WEBPACK_IMPORTED_MODULE_0__.Storage.get({ key: getKey });
            if (getO.value) {
                this.logger.info('[storeServ|getObj] Object (' + getKey + ') Get - \u2714\uFE0FFOUND');
                return JSON.parse(getO.value);
            }
            else {
                this.logger.info('[storeServ|getObj] Object (' + getKey + ') Get - \u2757NOT FOUND');
                return null;
            }
        });
    }
    ////////////////////////////////////////////////////////////////
    setItem(setKey, setVal) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {
            yield _capacitor_storage__WEBPACK_IMPORTED_MODULE_0__.Storage.set({ key: setKey, value: setVal })
                .then(() => { this.logger.info('[storeServ|setItem] Item (' + setKey + ') Set - \u2714\uFE0FOK'); return true; })
                .catch(() => { this.logger.info('[storeServ|setItem] Item (' + setKey + ') Set - \u2757ERROR'); });
        });
    }
    ////////////////////////////////////////////////////////////////
    getItem(getKey) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {
            const getI = yield _capacitor_storage__WEBPACK_IMPORTED_MODULE_0__.Storage.get({ key: getKey });
            if (getI.value) {
                this.logger.info('[storeServ|getItem] Item (' + getKey + ') Get - \u2714\uFE0FFOUND');
                return getI.value;
            }
            else {
                this.logger.info('[storeServ|getItem] Item (' + getKey + ') Get - \u2757NOT FOUND');
                return null;
            }
        });
    }
    ////////////////////////////////////////////////////////////////
    removeItem(removeKey) {
        _capacitor_storage__WEBPACK_IMPORTED_MODULE_0__.Storage.remove({ key: removeKey })
            .then(() => { this.logger.info('[storeServ|removeItem] Item (' + removeKey + ') Remove - \u2714\uFE0FOK'); })
            .catch(() => { this.logger.info('[storeServ|removeItem] Item (' + removeKey + ') Remove - \u2757ERROR'); });
    }
    ////////////////////////////////////////////////////////////////
    listKeys() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {
            const listK = yield _capacitor_storage__WEBPACK_IMPORTED_MODULE_0__.Storage.keys();
            if (listK.keys) {
                this.logger.info('[storeServ|listKeys] List Keys - \u2714\uFE0FFOUND [' + listK.keys.length + '] Keys');
                return listK.keys;
            }
            else {
                this.logger.info('[storeServ|listKeys] List Keys - \u2757NO KEYS FOUND');
                return null;
            }
        });
    }
    ////////////////////////////////////////////////////////////////
    clearStorage() {
        _capacitor_storage__WEBPACK_IMPORTED_MODULE_0__.Storage.clear()
            .then(() => { this.logger.info('[storeServ|clearStorage] Clear Storage - \u2714\uFE0FDONE!'); })
            .catch(() => { this.logger.info('[storeServ|clearStorage] Clear Storage - \u2757ERROR'); });
    }
};
StorageService.ctorParameters = () => [
    { type: ngx_logger__WEBPACK_IMPORTED_MODULE_2__.NGXLogger }
];
StorageService = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.Injectable)({ providedIn: 'root' })
    ////////////////////////////////////////////////////////////////
], StorageService);



/***/ }),

/***/ 92340:
/*!*****************************************!*\
  !*** ./src/environments/environment.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environment": function() { return /* binding */ environment; }
/* harmony export */ });
/* harmony import */ var ngx_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ngx-logger */ 62740);

/////////////////////////////////////////////////////////////////////////
const environment = {
    production: false, logging: { level: ngx_logger__WEBPACK_IMPORTED_MODULE_0__.NgxLoggerLevel.DEBUG },
    firebase: {
        projectId: 'sherifffb-90311',
        appId: '1:806779609016:web:214578b33e0fd15820f94d',
        storageBucket: 'sherifffb-90311.appspot.com',
        locationId: 'australia-southeast1',
        apiKey: 'AIzaSyAKjQhMIHzgMJWtYhOU51V0BiSIYmVYqqQ',
        authDomain: 'sherifffb-90311.firebaseapp.com',
        messagingSenderId: '806779609016',
    }
};


/***/ }),

/***/ 14431:
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/platform-browser-dynamic */ 24608);
/* harmony import */ var _app_app_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./app/app.module */ 36747);
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environments/environment */ 92340);
/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @capacitor/core */ 68384);





if (_environments_environment__WEBPACK_IMPORTED_MODULE_1__.environment.production) {
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.enableProdMode)();
}
(0,_angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_4__.platformBrowserDynamic)().bootstrapModule(_app_app_module__WEBPACK_IMPORTED_MODULE_0__.AppModule)
    .catch(err => console.log(err));


/***/ }),

/***/ 50863:
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/ lazy ^\.\/.*\.entry\.js$ include: \.entry\.js$ exclude: \.system\.entry\.js$ namespace object ***!
  \******************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var map = {
	"./ion-action-sheet.entry.js": [
		47321,
		"common",
		"node_modules_ionic_core_dist_esm_ion-action-sheet_entry_js"
	],
	"./ion-alert.entry.js": [
		36108,
		"common",
		"node_modules_ionic_core_dist_esm_ion-alert_entry_js"
	],
	"./ion-app_8.entry.js": [
		31489,
		"common",
		"node_modules_ionic_core_dist_esm_ion-app_8_entry_js"
	],
	"./ion-avatar_3.entry.js": [
		10305,
		"common",
		"node_modules_ionic_core_dist_esm_ion-avatar_3_entry_js"
	],
	"./ion-back-button.entry.js": [
		15830,
		"common",
		"node_modules_ionic_core_dist_esm_ion-back-button_entry_js"
	],
	"./ion-backdrop.entry.js": [
		37757,
		"node_modules_ionic_core_dist_esm_ion-backdrop_entry_js"
	],
	"./ion-button_2.entry.js": [
		30392,
		"common",
		"node_modules_ionic_core_dist_esm_ion-button_2_entry_js"
	],
	"./ion-card_5.entry.js": [
		66911,
		"common",
		"node_modules_ionic_core_dist_esm_ion-card_5_entry_js"
	],
	"./ion-checkbox.entry.js": [
		30937,
		"common",
		"node_modules_ionic_core_dist_esm_ion-checkbox_entry_js"
	],
	"./ion-chip.entry.js": [
		78695,
		"common",
		"node_modules_ionic_core_dist_esm_ion-chip_entry_js"
	],
	"./ion-col_3.entry.js": [
		16034,
		"node_modules_ionic_core_dist_esm_ion-col_3_entry_js"
	],
	"./ion-datetime_3.entry.js": [
		68837,
		"common",
		"node_modules_ionic_core_dist_esm_ion-datetime_3_entry_js"
	],
	"./ion-fab_3.entry.js": [
		34195,
		"common",
		"node_modules_ionic_core_dist_esm_ion-fab_3_entry_js"
	],
	"./ion-img.entry.js": [
		41709,
		"node_modules_ionic_core_dist_esm_ion-img_entry_js"
	],
	"./ion-infinite-scroll_2.entry.js": [
		33087,
		"node_modules_ionic_core_dist_esm_ion-infinite-scroll_2_entry_js"
	],
	"./ion-input.entry.js": [
		84513,
		"common",
		"node_modules_ionic_core_dist_esm_ion-input_entry_js"
	],
	"./ion-item-option_3.entry.js": [
		58056,
		"common",
		"node_modules_ionic_core_dist_esm_ion-item-option_3_entry_js"
	],
	"./ion-item_8.entry.js": [
		10862,
		"common",
		"node_modules_ionic_core_dist_esm_ion-item_8_entry_js"
	],
	"./ion-loading.entry.js": [
		7509,
		"common",
		"node_modules_ionic_core_dist_esm_ion-loading_entry_js"
	],
	"./ion-menu_3.entry.js": [
		76272,
		"common",
		"node_modules_ionic_core_dist_esm_ion-menu_3_entry_js"
	],
	"./ion-modal.entry.js": [
		71855,
		"common",
		"node_modules_ionic_core_dist_esm_ion-modal_entry_js"
	],
	"./ion-nav_2.entry.js": [
		38708,
		"common",
		"node_modules_ionic_core_dist_esm_ion-nav_2_entry_js"
	],
	"./ion-popover.entry.js": [
		23527,
		"common",
		"node_modules_ionic_core_dist_esm_ion-popover_entry_js"
	],
	"./ion-progress-bar.entry.js": [
		24694,
		"common",
		"node_modules_ionic_core_dist_esm_ion-progress-bar_entry_js"
	],
	"./ion-radio_2.entry.js": [
		19222,
		"common",
		"node_modules_ionic_core_dist_esm_ion-radio_2_entry_js"
	],
	"./ion-range.entry.js": [
		25277,
		"common",
		"node_modules_ionic_core_dist_esm_ion-range_entry_js"
	],
	"./ion-refresher_2.entry.js": [
		38812,
		"common",
		"node_modules_ionic_core_dist_esm_ion-refresher_2_entry_js"
	],
	"./ion-reorder_2.entry.js": [
		83122,
		"common",
		"node_modules_ionic_core_dist_esm_ion-reorder_2_entry_js"
	],
	"./ion-ripple-effect.entry.js": [
		51602,
		"node_modules_ionic_core_dist_esm_ion-ripple-effect_entry_js"
	],
	"./ion-route_4.entry.js": [
		45174,
		"common",
		"node_modules_ionic_core_dist_esm_ion-route_4_entry_js"
	],
	"./ion-searchbar.entry.js": [
		7895,
		"common",
		"node_modules_ionic_core_dist_esm_ion-searchbar_entry_js"
	],
	"./ion-segment_2.entry.js": [
		76164,
		"common",
		"node_modules_ionic_core_dist_esm_ion-segment_2_entry_js"
	],
	"./ion-select_3.entry.js": [
		20592,
		"common",
		"node_modules_ionic_core_dist_esm_ion-select_3_entry_js"
	],
	"./ion-slide_2.entry.js": [
		27162,
		"node_modules_ionic_core_dist_esm_ion-slide_2_entry_js"
	],
	"./ion-spinner.entry.js": [
		81374,
		"common",
		"node_modules_ionic_core_dist_esm_ion-spinner_entry_js"
	],
	"./ion-split-pane.entry.js": [
		97896,
		"node_modules_ionic_core_dist_esm_ion-split-pane_entry_js"
	],
	"./ion-tab-bar_2.entry.js": [
		25043,
		"common",
		"node_modules_ionic_core_dist_esm_ion-tab-bar_2_entry_js"
	],
	"./ion-tab_2.entry.js": [
		77802,
		"common",
		"node_modules_ionic_core_dist_esm_ion-tab_2_entry_js"
	],
	"./ion-text.entry.js": [
		29072,
		"common",
		"node_modules_ionic_core_dist_esm_ion-text_entry_js"
	],
	"./ion-textarea.entry.js": [
		32191,
		"common",
		"node_modules_ionic_core_dist_esm_ion-textarea_entry_js"
	],
	"./ion-toast.entry.js": [
		40801,
		"common",
		"node_modules_ionic_core_dist_esm_ion-toast_entry_js"
	],
	"./ion-toggle.entry.js": [
		67110,
		"common",
		"node_modules_ionic_core_dist_esm_ion-toggle_entry_js"
	],
	"./ion-virtual-scroll.entry.js": [
		10431,
		"node_modules_ionic_core_dist_esm_ion-virtual-scroll_entry_js"
	]
};
function webpackAsyncContext(req) {
	if(!__webpack_require__.o(map, req)) {
		return Promise.resolve().then(function() {
			var e = new Error("Cannot find module '" + req + "'");
			e.code = 'MODULE_NOT_FOUND';
			throw e;
		});
	}

	var ids = map[req], id = ids[0];
	return Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {
		return __webpack_require__(id);
	});
}
webpackAsyncContext.keys = function() { return Object.keys(map); };
webpackAsyncContext.id = 50863;
module.exports = webpackAsyncContext;

/***/ }),

/***/ 43069:
/*!************************************!*\
  !*** ./src/app/app.component.scss ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhcHAuY29tcG9uZW50LnNjc3MifQ== */");

/***/ }),

/***/ 60372:
/*!******************************************************!*\
  !*** ./src/app/modals/daterange/daterange.page.scss ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJkYXRlcmFuZ2UucGFnZS5zY3NzIn0= */");

/***/ }),

/***/ 34259:
/*!***********************************************************************!*\
  !*** ./src/app/modals/detail/news-detail/news-add/news-add.page.scss ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJuZXdzLWFkZC5wYWdlLnNjc3MifQ== */");

/***/ }),

/***/ 39921:
/*!************************************************************************************!*\
  !*** ./src/app/modals/detail/news-detail/news-add/recipients/recipients.page.scss ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJyZWNpcGllbnRzLnBhZ2Uuc2NzcyJ9 */");

/***/ }),

/***/ 2388:
/*!*****************************************************************!*\
  !*** ./src/app/modals/detail/news-detail/news-detail.page.scss ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJuZXdzLWRldGFpbC5wYWdlLnNjc3MifQ== */");

/***/ }),

/***/ 79497:
/*!***********************************************************!*\
  !*** ./src/app/modals/detail/task-add/task-add.page.scss ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0YXNrLWFkZC5wYWdlLnNjc3MifQ== */");

/***/ }),

/***/ 27379:
/*!****************************************************************************!*\
  !*** ./src/app/modals/detail/task-add/taskassignee/taskassignee.page.scss ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0YXNrYXNzaWduZWUucGFnZS5zY3NzIn0= */");

/***/ }),

/***/ 62301:
/*!*****************************************************************************!*\
  !*** ./src/app/modals/detail/tsheet-detail/tsheet-add/tsheet-add.page.scss ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0c2hlZXQtYWRkLnBhZ2Uuc2NzcyJ9 */");

/***/ }),

/***/ 23943:
/*!***********************************************************************************!*\
  !*** ./src/app/modals/detail/tsheet-detail/tsheet-breaks/tsheet-breaks.page.scss ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0c2hlZXQtYnJlYWtzLnBhZ2Uuc2NzcyJ9 */");

/***/ }),

/***/ 65850:
/*!*********************************************************************!*\
  !*** ./src/app/modals/detail/tsheet-detail/tsheet-detail.page.scss ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0c2hlZXQtZGV0YWlsLnBhZ2Uuc2NzcyJ9 */");

/***/ }),

/***/ 19462:
/*!*************************************************************************************!*\
  !*** ./src/app/modals/detail/tsheet-detail/tsheet-history/tsheet-history.page.scss ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0c2hlZXQtaGlzdG9yeS5wYWdlLnNjc3MifQ== */");

/***/ }),

/***/ 10716:
/*!****************************************************!*\
  !*** ./src/app/modals/firstrun/firstrun.page.scss ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJmaXJzdHJ1bi5wYWdlLnNjc3MifQ== */");

/***/ }),

/***/ 91106:
/*!**************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/app.component.html ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-app>\n    <ion-menu side=\"start\" content-id=\"main-content\" swipeGesture=\"true\" type=\"reveal\" (ionWillOpen)=\"mainMenu('willopen')\" (ionDidOpen)=\"mainMenu('opened')\" (ionWillClose)=\"mainMenu('willclose')\" (ionDidClose)=\"mainMenu('closed')\">\n        <ion-content id=\"app-page-ion-content\" class=\"sheriff-content\">\n            <div class=\"sheriff-mainmenu-main-wrapper\">\n                <div id=\"sheriff-mainmenu-header-wrapper\">\n                    main menu\n                </div>\n                <ion-grid class=\"sheriff-grid sheriff-mainmenu-topper-grid1 person\">\n                    <ion-row class=\"sheriff-row sheriff-mainmenu-topper-row row1\">\n                        <ion-col size=\"3\" class=\"sherrif-col sheriff-mainmenu-col meavatar-col\">\n                            <div id=\"sheriff-mainmenu-personavatar-wrapper\">\n                                <img id=\"tempmeava\" style=\"display: flex;align-content: center;\" src=\"{{meAva}}\">\n                            </div>\n                        </ion-col>\n                        <ion-col size=\"9\" class=\"sherrif-col sheriff-mainmenu-col medetails-col\">\n                            <div id=\"sheriff-mainmenu-topper-person-outter-wrapper\">\n                                <div class=\"sheriff-mainmenu medetails-line name\">{{meName}}</div>\n                                <div class=\"sheriff-mainmenu medetails-line email\">{{meEmail}}</div>\n                                <div class=\"sheriff-mainmenu medetails-line phone\">{{mePhone}}</div>\n                            </div>\n                        </ion-col>\n                    </ion-row>\n                    <ion-row class=\"sheriff-row sheriff-mainmenu-topper-row row2\">\n                        <ion-chip class=\"sheriff-chip mainmenu wp\">\n                            <ion-avatar class=\"sheriff-avatar mainmenu wp\">\n                                <img id=\"mainmenu-workavatar\" style=\"display: flex;align-content: center;\" src=\"{{workAva}}\">\n                            </ion-avatar>\n                            <ion-label class=\"sheriff-label mainmenu wp\">{{workCode}}</ion-label>\n                        </ion-chip>\n                    </ion-row>\n                </ion-grid>\n                <ion-grid class=\"sheriff-grid sheriff-menu-grid pagelinks-grid\">\n                    <ion-row class=\"sheriff-row sheriff-menu-row tab-pagelinks-row\">\n                        <ion-col class=\"sheriff-col sheriff-menu-col tab-pagelinks-col\">\n                            <ion-menu-toggle>\n                                <div *ngIf=\"!shouldSaveShield\" id=\"mainmenu-tabs\" class=\"ion-activatable ripple-parent sheriff-mainmenu-topitem datatabs\" routerLink=\"/tabs\" routerDirection=\"forward\">\n                                    <div id=\"sheriff-mainmenu-topitem-label-datatabs\" class=\"sheriff-mainmenu-topitem-label datatabs\">\n                                        <ion-icon class=\"sheriff-mainmenu-linkico datatabs\" name=\"list\"></ion-icon>records\n                                    </div>\n                                    <ion-ripple-effect></ion-ripple-effect>\n                                </div>\n                                <div *ngIf=\"shouldSaveShield\" (click)=\"promptShouldSave('/tabs')\" id=\"mainmenu-tabs\" class=\"ion-activatable ripple-parent sheriff-mainmenu-topitem datatabs\">\n                                  <div id=\"sheriff-mainmenu-topitem-label-datatabs\" class=\"sheriff-mainmenu-topitem-label datatabs\">\n                                      <ion-icon class=\"sheriff-mainmenu-linkico datatabs\" name=\"list\"></ion-icon>records\n                                  </div>\n                                  <ion-ripple-effect></ion-ripple-effect>\n                                </div>\n                            </ion-menu-toggle>\n                            <ion-menu-toggle>\n                              <div *ngIf=\"!shouldSaveShield\" id=\"mainmenu-pay\" class=\"ion-activatable ripple-parent sheriff-mainmenu-topitem pay\" routerLink=\"/pay\" routerDirection=\"forward\">\n                                  <div id=\"sheriff-mainmenu-topitem-label-pay\" class=\"sheriff-mainmenu-topitem-label pay\">\n                                      <ion-icon class=\"sheriff-mainmenu-linkico pay\" name=\"logo-usd\"></ion-icon>payments\n                                  </div>\n                                  <ion-ripple-effect></ion-ripple-effect>\n                              </div>\n                              <div *ngIf=\"shouldSaveShield\" (click)=\"promptShouldSave('/pay')\" id=\"mainmenu-pay\" class=\"ion-activatable ripple-parent sheriff-mainmenu-topitem pay\">\n                                <div id=\"sheriff-mainmenu-topitem-label-pay\" class=\"sheriff-mainmenu-topitem-label pay\">\n                                    <ion-icon class=\"sheriff-mainmenu-linkico pay\" name=\"logo-usd\"></ion-icon>payments\n                                </div>\n                                <ion-ripple-effect></ion-ripple-effect>\n                              </div>\n                            </ion-menu-toggle>\n                            <ion-menu-toggle>\n                              <div *ngIf=\"!shouldSaveShield\" id=\"mainmenu-people\" class=\"ion-activatable ripple-parent sheriff-mainmenu-topitem people\" routerLink=\"/people\" routerDirection=\"forward\">\n                                  <div id=\"sheriff-mainmenu-topitem-label-people\" class=\"sheriff-mainmenu-topitem-label people\">\n                                      <ion-icon class=\"sheriff-mainmenu-linkico people\" name=\"people\"></ion-icon>people\n                                  </div>\n                                  <ion-ripple-effect></ion-ripple-effect>\n                              </div>\n                              <div *ngIf=\"shouldSaveShield\" (click)=\"promptShouldSave('/people')\" id=\"mainmenu-people\" class=\"ion-activatable ripple-parent sheriff-mainmenu-topitem people\">\n                                <div id=\"sheriff-mainmenu-topitem-label-people\" class=\"sheriff-mainmenu-topitem-label people\">\n                                    <ion-icon class=\"sheriff-mainmenu-linkico people\" name=\"people\"></ion-icon>people\n                                </div>\n                                <ion-ripple-effect></ion-ripple-effect>\n                              </div>\n                            </ion-menu-toggle>\n                            <ion-menu-toggle>\n                                <div *ngIf=\"!shouldSaveShield\" id=\"mainmenu-profile\" class=\"ion-activatable ripple-parent sheriff-mainmenu-topitem profile\" routerLink=\"/profile\" routerDirection=\"forward\">\n                                    <div id=\"sheriff-mainmenu-topitem-label-settings\" class=\"sheriff-mainmenu-topitem-label profile\">\n                                        <ion-icon class=\"sheriff-mainmenu-linkico profile\" name=\"person\"></ion-icon>profile\n                                    </div>\n                                    <ion-ripple-effect></ion-ripple-effect>\n                                </div>\n                                <div *ngIf=\"shouldSaveShield\" (click)=\"promptShouldSave('/profile')\" id=\"mainmenu-profile\" class=\"ion-activatable ripple-parent sheriff-mainmenu-topitem profile\">\n                                  <div id=\"sheriff-mainmenu-topitem-label-settings\" class=\"sheriff-mainmenu-topitem-label profile\">\n                                      <ion-icon class=\"sheriff-mainmenu-linkico profile\" name=\"person\"></ion-icon>profile\n                                  </div>\n                                  <ion-ripple-effect></ion-ripple-effect>\n                              </div>\n                            </ion-menu-toggle>\n                            <ion-menu-toggle>\n                              <div *ngIf=\"!shouldSaveShield\" id=\"mainmenu-serverlog\" class=\"ion-activatable ripple-parent sheriff-mainmenu-topitem serverlog\" routerLink=\"/serverlog\" routerDirection=\"forward\">\n                                  <div id=\"sheriff-mainmenu-topitem-label-serverlog\" class=\"sheriff-mainmenu-topitem-label serverlog\">\n                                      <ion-icon class=\"sheriff-mainmenu-linkico serverlog\" name=\"list\"></ion-icon>server log\n                                  </div>\n                                  <ion-ripple-effect></ion-ripple-effect>\n                              </div>\n                              <div *ngIf=\"shouldSaveShield\" (click)=\"promptShouldSave('/serverlog')\" id=\"mainmenu-serverlog\" class=\"ion-activatable ripple-parent sheriff-mainmenu-topitem serverlog\">\n                                <div id=\"sheriff-mainmenu-topitem-label-serverlog\" class=\"sheriff-mainmenu-topitem-label serverlog\">\n                                    <ion-icon class=\"sheriff-mainmenu-linkico serverlog\" name=\"list\"></ion-icon>serverlog\n                                </div>\n                                <ion-ripple-effect></ion-ripple-effect>\n                            </div>\n                            </ion-menu-toggle>\n                            <ion-menu-toggle>\n                              <div *ngIf=\"!shouldSaveShield\" id=\"mainmenu-snoop\" class=\"ion-activatable ripple-parent sheriff-mainmenu-topitem snoop\" routerLink=\"/snoop\" routerDirection=\"forward\">\n                                  <div id=\"sheriff-mainmenu-topitem-label-snoop\" class=\"sheriff-mainmenu-topitem-label snoop\">\n                                      <ion-icon class=\"sheriff-mainmenu-linkico snoop\" name=\"ear\"></ion-icon>snoop data\n                                  </div>\n                                  <ion-ripple-effect></ion-ripple-effect>\n                              </div>\n                              <div *ngIf=\"shouldSaveShield\" (click)=\"promptShouldSave('/snoop')\" id=\"mainmenu-snoop\" class=\"ion-activatable ripple-parent sheriff-mainmenu-topitem snoop\">\n                                <div id=\"sheriff-mainmenu-topitem-label-snoop\" class=\"sheriff-mainmenu-topitem-label snoop\">\n                                    <ion-icon class=\"sheriff-mainmenu-linkico snoop\" name=\"list\"></ion-icon>snoop data\n                                </div>\n                                <ion-ripple-effect></ion-ripple-effect>\n                            </div>\n                            </ion-menu-toggle>\n                            <ion-menu-toggle>\n                                <div *ngIf=\"!shouldSaveShield\" id=\"mainmenu-settings\" class=\"ion-activatable ripple-parent sheriff-mainmenu-topitem settings\" routerLink=\"/settings\" routerDirection=\"forward\">\n                                    <div id=\"sheriff-mainmenu-topitem-label-settings\" class=\"sheriff-mainmenu-topitem-label settings\">\n                                        <ion-icon class=\"sheriff-mainmenu-linkico settings\" name=\"settings\"></ion-icon>settings\n                                    </div>\n                                    <ion-ripple-effect></ion-ripple-effect>\n                                </div>\n                                <div *ngIf=\"shouldSaveShield\" (click)=\"promptShouldSave('/settings')\" id=\"mainmenu-settings\" class=\"ion-activatable ripple-parent sheriff-mainmenu-topitem settings\">\n                                  <div id=\"sheriff-mainmenu-topitem-label-settings\" class=\"sheriff-mainmenu-topitem-label settings\">\n                                      <ion-icon class=\"sheriff-mainmenu-linkico settings\" name=\"settings\"></ion-icon>settings\n                                  </div>\n                                  <ion-ripple-effect></ion-ripple-effect>\n                              </div>\n                            </ion-menu-toggle>\n                        </ion-col>\n                    </ion-row>\n                </ion-grid>\n\n                <ion-grid class=\"sheriff-grid sheriff-mainmenu-grid sheriff-mainmenu-logoutexitbtn-grid\">\n                    <ion-row class=\"sheriff-row sheriff-menu-row auth-logout-quitlinks-row\">\n                        <ion-col class=\"sheriff-col sheriff-menu-col auth-logout-quitlinks-col\">\n                            <div class=\"sheriff-menu-bottom-btns-wrapper\">\n                                <ion-grid class=\"sheriff-grid sheriff-menu-bottom-btns-grid\">\n                                    <ion-row class=\"sheriff-row sheriff-menu-bottom-row\">\n                                        <ion-col class=\"sheriff-col sheriff-menu-bottom-col logout-col\">\n                                            <ion-button (click)=\"onLogout()\" id=\"sheriff-menu-bottom-logoutbtn\" class=\"sheriff-menu-bottom-btn\" fill=\"solid\" size=\"small\">Logout</ion-button>\n                                        </ion-col>\n                                        <ion-col size=\"6\" class=\"sheriff-col sheriff-menu-bottom-col exit-col\">\n                                            <ion-button (click)=\"onExit(null)\" id=\"sheriff-menu-bottom-switchbtn\" class=\"sheriff-menu-bottom-btn\" fill=\"outline\" color=\"medium\" size=\"small\">Exit App</ion-button> \n                                        </ion-col>\n                                    </ion-row>\n                                    <ion-row class=\"sheriff-row sheriff-mainmenu-topper-row row3\">\n                                        <ion-col size=\"10\" class=\"sheriff-col sheriff-mainmenu-col tokens-col\">\n                                            <div class=\"headerimgdiv deputy\"><div class=\"sheriff-menu-token-image-wrapper deputy\"><img class=\"sheriff-menu-token-image deputy\" src=\"../assets/img/sheriff-deputy-logoname-white-small.png\"></div></div>\n                                            <div><span [ngClass]=\"{'menu-token-refresh-btn-stage-inprog-ico':deputyRefresh==='inprog','menu-token-refresh-btn-stage-fail-ico':deputyRefresh==='fail','menu-token-refresh-btn-stage-success-ico':deputyRefresh==='success'}\" style=\"font-weight:500;color:#ff9800\">T: </span>{{access_token}}</div>\n                                            <div><span [ngClass]=\"{'menu-token-refresh-btn-stage-inprog-ico':deputyRefresh==='inprog','menu-token-refresh-btn-stage-fail-ico':deputyRefresh==='fail','menu-token-refresh-btn-stage-success-ico':deputyRefresh==='success'}\" style=\"font-weight:500;color:#ff9800\">R: </span>{{refresh_token}}</div>\n                                            <div><span [ngClass]=\"{'menu-token-refresh-btn-stage-inprog-ico':deputyRefresh==='inprog','menu-token-refresh-btn-stage-fail-ico':deputyRefresh==='fail','menu-token-refresh-btn-stage-success-ico':deputyRefresh==='success'}\" style=\"font-weight:500;color:#ff9800\">E: </span>{{expires_time}}</div>\n                                        </ion-col>\n                                        <ion-col size=\"2\" class=\"sheriff-col sheriff-mainmenu-col tokens-col refreshbtn-col\">\n                                            <ion-button [disabled]=\"deputyRefresh!==null\" [ngClass]=\"{'menu-token-refresh-btn-stage-inprog':deputyRefresh==='inprog','menu-token-refresh-btn-stage-fail':deputyRefresh==='fail','menu-token-refresh-btn-stage-success':deputyRefresh==='success'}\" id=\"localrefreshbtn\" (click)=\"menuDeputyRefresh()\" class=\"sheriff-btn menu-refresh-btn\">\n                                                <ion-icon *ngIf=\"deputyRefresh===null\" class=\"sheriff-btn-ico menu-refresh-btn-ico\" name=\"refresh\"></ion-icon>\n                                                <ion-icon *ngIf=\"deputyRefresh==='inprog'\" class=\"sheriff-btn-ico menu-refresh-btn-ico menu-token-refresh-btn-stage-inprog-ico\" name=\"ellipsis-horizontal\"></ion-icon>\n                                                <ion-icon *ngIf=\"deputyRefresh==='success'\" class=\"sheriff-btn-ico menu-refresh-btn-ico menu-token-refresh-btn-stage-success-ico\" name=\"checkmark\"></ion-icon>\n                                                <ion-icon *ngIf=\"deputyRefresh==='fail'\" class=\"sheriff-btn-ico menu-refresh-btn-ico menu-token-refresh-btn-stage-fail-ico\" name=\"alert\"></ion-icon>\n                                            </ion-button>\n                                        </ion-col>\n                                    </ion-row>\n                                    <ion-row class=\"sheriff-row sheriff-mainmenu-topper-row row4\">\n                                      <ion-col size=\"10\" class=\"sheriff-col sheriff-mainmenu-col tokens-col\">\n                                        <div class=\"headerimgdiv sserver\"><div class=\"sheriff-menu-token-image-wrapper sheriffserver\"><img class=\"sheriff-menu-token-imagesheriff-server\" src=\"../assets/img/slogo-w.png\"><span class=\"sheriff-menu-token-title-server-txt\">server</span></div></div>\n                                        <div><span [ngClass]=\"{'menu-token-refresh-btn-stage-inprog-ico':sserverRefresh==='inprog','menu-token-refresh-btn-stage-fail-ico':sserverRefresh==='fail','menu-token-refresh-btn-stage-success-ico':sserverRefresh==='success'}\" style=\"font-weight:500;color:#ff9800\">M: </span>{{fb_login_method}}</div>\n                                        <div><span [ngClass]=\"{'menu-token-refresh-btn-stage-inprog-ico':sserverRefresh==='inprog','menu-token-refresh-btn-stage-fail-ico':sserverRefresh==='fail','menu-token-refresh-btn-stage-success-ico':sserverRefresh==='success'}\" style=\"font-weight:500;color:#ff9800\">T: </span>{{fct_token}}</div>\n                                        <div><span [ngClass]=\"{'menu-token-refresh-btn-stage-inprog-ico':sserverRefresh==='inprog','menu-token-refresh-btn-stage-fail-ico':sserverRefresh==='fail','menu-token-refresh-btn-stage-success-ico':sserverRefresh==='success'}\" style=\"font-weight:500;color:#ff9800\">L: </span>{{fe_token}}</div>\n                                        <div><span [ngClass]=\"{'menu-token-refresh-btn-stage-inprog-ico':sserverRefresh==='inprog','menu-token-refresh-btn-stage-fail-ico':sserverRefresh==='fail','menu-token-refresh-btn-stage-success-ico':sserverRefresh==='success'}\" style=\"font-weight:500;color:#ff9800\">E: </span>{{fct_expires}}</div>\n                                      </ion-col>\n                                      <ion-col size=\"2\" class=\"sheriff-col sheriff-mainmenu-col tokens-col refreshbtn-col\">\n                                          <ion-button [disabled]=\"sserverRefresh!==null\" [ngClass]=\"{'menu-token-refresh-btn-stage-inprog':sserverRefresh==='inprog','menu-token-refresh-btn-stage-fail':sserverRefresh==='fail','menu-token-refresh-btn-stage-success':sserverRefresh==='success'}\" id=\"localrefreshbtn\" (click)=\"FCTFns('refresh')\" class=\"sheriff-btn menu-refresh-btn\">\n                                            <ion-icon *ngIf=\"sserverRefresh===null\" class=\"sheriff-btn-ico menu-refresh-btn-ico\" name=\"refresh\"></ion-icon>\n                                            <ion-icon *ngIf=\"sserverRefresh==='inprog'\" class=\"sheriff-btn-ico menu-refresh-btn-ico menu-token-refresh-btn-stage-inprog-ico\" name=\"ellipsis-horizontal\"></ion-icon>\n                                            <ion-icon *ngIf=\"sserverRefresh==='success'\" class=\"sheriff-btn-ico menu-refresh-btn-ico menu-token-refresh-btn-stage-success-ico\" name=\"checkmark\"></ion-icon>\n                                            <ion-icon *ngIf=\"sserverRefresh==='fail'\" class=\"sheriff-btn-ico menu-refresh-btn-ico menu-token-refresh-btn-stage-fail-ico\" name=\"alert\"></ion-icon>\n                                          </ion-button>\n                                      </ion-col>\n                                    </ion-row>\n                                </ion-grid>\n                            </div>\n                        </ion-col>\n                    </ion-row>\n                </ion-grid>\n\n                <div id=\"zer0nebanner\"><img id=\"zer0nemenubanner\" src=\"../../../assets/img/zer0netidybinary.png\"></div>\n\n            </div>\n\n        </ion-content>\n\n    </ion-menu>\n\n    <ion-router-outlet id=\"main-content\"></ion-router-outlet>\n\n    <div id=\"sheriff-custom-splash-wrapper\">\n        <div id=\"sheriff-custom-splash-titletexttop-wrapper\" class=\"splashelegroup1\">\n            SHERIFF\n        </div>\n        <div id=\"sheriff-custom-splash-logo-wrapper\">\n            <ion-grid class=\"sheriff-grid custom-splash-grid\">\n                <ion-row class=\"sheriff-row custom-splash-row toptextrow\">\n                    <ion-col class=\"sheriff-col custom-splash-col toptextcol\">\n                        <div class=\"sheriff-cutom-splash-text-wrapper texttop animate__animated animate__slideInLeft animate__faster\">\n                            Introducing <span class=\"sheriff-sansman-bold-italic custom-splash-top\">SHERIFF</span><span class=\"sheriff-splash-dotdotdot\">,</span>\n                        </div>\n                    </ion-col>\n                </ion-row>\n                <ion-row class=\"sheriff-row custom-splash-row middlelogorow\">\n                    <ion-col class=\"sheriff-col custom-splash-col middlelogocol\">\n                        <div class=\"progress-horizontal top\">\n                            <div class=\"bar-horizontal top\"></div>\n                        </div>\n                        <div class=\"progress-horizontal bottom\">\n                            <div class=\"bar-horizontal bottom\"></div>\n                        </div>\n                        <img class=\"animate__animated animate__headShake animate__infinite\" src=\"../assets/img/slogo-w.png\" id=\"sheriff-custom-splash-logo-img\">\n                    </ion-col>\n                </ion-row>\n                <ion-row class=\"sheriff-row custom-splash-row bottomtextrow\">\n                    <ion-col class=\"sheriff-col custom-splash-col bottomtextcol\">\n                        <div class=\"sheriff-cutom-splash-text-wrapper textbottom animate__animated animate__slideInRight animate__faster\">\n                            <span class=\"sheriff-splash-dotdotdot\">...</span><span class=\"sheriff-sansman-bold-italic custom-splash-bottom\">DEPUTY</span>'s <span class=\"splash-text-superior\">superior</span>.\n                        </div>\n                    </ion-col>\n                </ion-row>\n            </ion-grid>\n        </div>\n        <div id=\"sheriff-custom-splash-zer0ne-wrapper\" class=\"splashelegroup1\">\n            <img src=\"../assets/img/zer0netidybinarywhite.png\" id=\"sheriff-custom-splash-zer0ne-img\">\n        </div>\n    </div>\n    <div *ngIf=\"doShowIAPBubble\" class=\"sheriff-iapnotif-bubble-outter-wrapper animte__animated animate__slideInDown\">\n      <div class=\"sheriff-iapnotif-bubble-inner-wrapper\">\n        <ion-grid class=\"sheriff-grid iapnotif-bubble-grid\">\n          <ion-row class=\"sheriff-row iapnotif-bubble-row title-row\">\n            <ion-col class=\"sheriff-col iapnotif-bubble-col title-col\">\n              <div class=\"sheriff-iapnotif-bubble-title-wrapper\">\n                <ion-icon class=\"sheriff-iapnotif-bubble-title-icon workevent\" name={{iapBubbleData.ico}}></ion-icon>\n                <div class=\"sheriff-iapnotif-bubble-title-txt workevent\"><span class=\"iapnotif-mtitle\">{{iapBubbleData.mTitle}}</span><span class=\"iapnotif-title-slash\">|</span><span class=\"iapnotif-stitle\">{{iapBubbleData.sTitle}}</span></div>\n              </div>\n            </ion-col>\n          </ion-row>\n          <ion-row class=\"sheriff-row iapnotif-bubble-row bodylines-row\">\n            <ion-col class=\"sheriff-col iapnotif-bubble-col bodylines-col\">\n              <div *ngFor=\"let line of iapBubbleData.bodyLines;index as i\" class=\"sheriff-iapnotif-bubble-bodyline line{{i}}\">{{line}}</div>\n            </ion-col>\n          </ion-row>\n        </ion-grid>\n      </div>\n    </div>\n</ion-app>");

/***/ }),

/***/ 29511:
/*!****************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/modals/alertschedule/alertschedule.page.html ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div class=\"pop-alertschedule-main-wrapper\">\n    <ion-grid class=\"sheriff-grid pop-alert-schedule-grid header-grid\">\n        <ion-row class=\"sheriff-row pop-alert-schedule-header-row\">\n            <ion-col size=\"12\" class=\"sheriff-col pop-alert-schedule-header-col title-col\">\n                <div class=\"pop-alert-schedule-header-title-wrapper\">Scheduled Alerts</div> \n            </ion-col>\n        </ion-row>\n    </ion-grid>\n    <ion-grid class=\"sheriff-grid pop-alert-schedule-grid col-label-grid\">\n      <ion-row class=\"sheriff-row pop-alert-schedule-row col-label-row\">\n        <ion-col class=\"sheriff-col pop-alert-schedule-col col-label-col event-type-id\">\n          Event Id\n        </ion-col>\n        <ion-col class=\"sheriff-col pop-alert-schedule-col col-label-col event-date-time\">\n          Event Due\n        </ion-col>\n        <ion-col class=\"sheriff-col pop-alert-schedule-col col-label-col event-alert-at-time\">\n          Alert Time\n        </ion-col>\n        <ion-col size=\"2\" class=\"sheriff-col pop-alert-schedule-col col-label-col event-alert-methods\">\n          Method\n        </ion-col>\n      </ion-row>\n    </ion-grid>\n    <div *ngIf=\"noAlerts!==null&&noAlerts===true\" class=\"pop-alertschedule-noitems-outter-wrapper\">\n      <div class=\"pop-alertschedule-noitems-inner-wrapper\">\n        <ion-icon class=\"pop-alertschedule-noitems-ico\" name=\"warning\"></ion-icon>\n        <div class=\"pop-alertschedule-noitems-txt\">No Alerts Scheduled</div>\n      </div>\n    </div>\n    <ion-list *ngIf=\"noAlerts!==null&&noAlerts===false\" class=\"sheriff-list pop-alert-schedule-item-list\">\n        <ion-item *ngFor=\"let alert of alertsList;let ai=index\" class=\"sheriff-item pop-alert-schedule-item\" id=\"alert-{{alert.id}}\">\n          <ion-grid class=\"sheriff-grid pop-alert-schedule-grid alert-item-grid\">\n            <ion-row class=\"sheriff-row pop-alert-schedule-row alert-item-row\">\n              <ion-col class=\"sheriff-col pop-alert-schedule-col alert-item-col event-type-id\">\n                <div class=\"alertsched-item-line typeline\">\n                  <div *ngIf=\"tMode&&!alert.isTest\" class=\"delete-alert-wrapper\">\n                    <ion-icon (click)=\"deleteAlert(alert.id)\" class=\"del-alert-ico\" style=\"color:var(--ion-color-danger)\" name=\"trash\"></ion-icon>\n                  </div>\n                  <span *ngIf=\"alert.isTest\" style=\"color:var(--ion-color-danger)\">Test</span>\n                  <span *ngIf=\"!alert.isTest\" [ngStyle]=\"{'color':alert.type==='task'?'#b33d18':'var(--ion-color-yellow)'}\">{{alert.uctype}}</span>\n                </div>\n                <div class=\"alertsched-item-line idline\"> \n                  #{{alert.id}}\n                </div>\n              </ion-col>\n              <ion-col class=\"sheriff-col pop-alert-schedule-col alert-item-col event-due\">\n                <div class=\"alertsched-item-line event-at-date-line\">\n                  {{alert.eventatNiceDate}}\n                </div>\n                <div class=\"alertsched-item-line event-at-time-line\">\n                  {{alert.eventatNiceTime}}\n                </div>\n              </ion-col>\n              <ion-col class=\"sheriff-col pop-alert-schedule-col alert-item-col alert-at\">\n                <div class=\"alertsched-item-line alert-at-date-line\">\n                  {{alert.alertatNiceDate}}\n                </div>\n                <div class=\"alertsched-item-line alert-at-time-line\">\n                  {{alert.alertatNiceTime}}\n                </div>\n              </ion-col>\n              <ion-col size=\"2\" class=\"sheriff-col pop-alert-schedule-col alert-item-col alert-methods\">\n                <div *ngIf=\"(!tMode&&!alert.isTest)||(tMode&&alert.isTest)\" class=\"alertmethodsico-wrapper\">\n                  <ion-icon [ngStyle]=\"{'color':alert.methods.phone?'var(--ion-color-success-68)':'#343434'}\" class=\"alertmethod-ico phone\" name=\"phone-portrait\"></ion-icon>\n                  <ion-icon [ngStyle]=\"{'color':alert.methods.calendar?'var(--ion-color-success-68)':'#343434'}\" class=\"alertmethod-ico calendar\" name=\"calendar-number\"></ion-icon>\n                </div>\n                <div *ngIf=\"tMode&&!alert.isTest\" class=\"alertmethodsico-wrapper tmode\">\n                  <ion-button (click)=\"testNote(alert.id)\" class=\"sheriff-btn alertsched-testmode-btn\">\n                    <ion-icon name=\"play\" class=\"sheriff-btn-ico testmode-play-ico\"></ion-icon>\n                  </ion-button>\n                </div>\n              </ion-col>\n            </ion-row>\n          </ion-grid>\n        </ion-item>\n    </ion-list>\n    <ion-grid class=\"sheriff-grid pop-alert-schedule-grid footer-grid\">\n      <ion-row class=\"sheriff-row pop-alert-schedule-footer-row\">\n          <ion-col size=\"6\" class=\"sheriff-col pop-alert-schedule-footer-col closebtn-col\">\n              <ion-button (click)=\"closeModal()\" class=\"sheriff-btn settings-alertschedule-close-btn\">\n                <ion-icon name=\"close\" class=\"sheriff-btn-ico settings-alertschedule-close-btn-ico\"></ion-icon>\n                <div class=\"sheriff-btn-txt settings-alertschedule-close-btn-txt\">close</div>\n              </ion-button>\n          </ion-col>          \n          <ion-col size=\"6\" class=\"sheriff-col pop-alert-schedule-footer-col closebtn-col\">\n            <ion-button *ngIf=\"!tMode&&hasTestable\" (click)=\"testMode()\" class=\"sheriff-btn settings-alertschedule-testmode-btn activate\">\n              <ion-icon name=\"construct\" class=\"sheriff-btn-ico settings-alertschedule-testmode-btn-ico activate\"></ion-icon>\n              <div class=\"sheriff-btn-txt settings-alertschedule-testmode-btn-txt activate\">test</div>\n            </ion-button>\n            <ion-button *ngIf=\"tMode\" (click)=\"testMode()\" class=\"sheriff-btn settings-alertschedule-testmode-btn deactivate\">\n              <ion-icon name=\"stop\" class=\"sheriff-btn-ico settings-alertschedule-testmode-btn-ico deactivate\"></ion-icon>\n              <div class=\"sheriff-btn-txt settings-alertschedule-testmode-btn-txt deactivate\">stop</div>\n            </ion-button>\n        </ion-col>          \n      </ion-row>\n  </ion-grid>\n</div>");

/***/ }),

/***/ 95375:
/*!********************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/modals/daterange/daterange.page.html ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div class=\"ion-page sheriff-component-modal sheriff-daterange-modal outter-wrapper\">\n    <ion-grid class=\"sheriff-grid dr-modal-grid\">\n        <ion-row class=\"sheriff-row dr-modal-row label-row\">\n            <ion-col class=\"sheriff-col\">\n                <div class=\"dr-startend-label-wrapper start\">start date</div>\n                <div *ngIf=\"!sDIsToday\" (click)=\"useTodayDate('sDate')\" class=\"dr-usetoday-btn start ion-activatable ripple-parent\">\n                    today\n                    <img class=\"dr-fillinputtoday-ico\" src=\"../../../assets/img/sheriff-fillinput-ico.png\">\n                    <ion-ripple-effect></ion-ripple-effect>\n                </div>\n                <div *ngIf=\"sDIsToday\" class=\"dr-dateistoday-label start\">today</div>\n            </ion-col>\n            <ion-col class=\"sheriff-col\">\n                <div class=\"dr-startend-label-wrapper end\">end date</div>\n                <div *ngIf=\"!eDIsToday\" (click)=\"useTodayDate('eDate')\" class=\"dr-usetoday-btn end ion-activatable ripple-parent\">\n                    today\n                    <img class=\"dr-fillinputtoday-ico\" src=\"../../../assets/img/sheriff-fillinput-ico.png\">\n                    <ion-ripple-effect></ion-ripple-effect>\n                </div>\n                <div *ngIf=\"eDIsToday\" class=\"dr-dateistoday-label end\">today</div>\n            </ion-col>\n        </ion-row>\n        <ion-row class=\"sheriff-row dr-modal-row input-row\">\n            <ion-col class=\"sheriff-col dr-col start-input-col\">\n                <img src=\"../../../assets/img/sheriff-datefrom-ico.png\" class=\"dr-ico datefrom\">\n                <div (click)=\"openDateRange('start','open','sDateIn','sDate',drStart.value)\" class=\"dr-inputico-wrapper start ion-activatable ripple-parent\">\n                    <ion-datetime ngModel #drStart value={{sDate}} displayFormat=\"D MMM YYYY\" class=\"sheriff-input summary-list-date-input startdate\" mode=\"md\" readonly=\"true\"></ion-datetime>\n                    <ion-ripple-effect></ion-ripple-effect>\n                </div>\n            </ion-col>\n            <ion-col class=\"sheriff-col dr-col end-input-col\">\n                <img src=\"../../../assets/img/sheriff-dateto-ico.png\" class=\"dr-ico dateto\">\n                <div (click)=\"openDateRange('end','open','eDateIn','eDate',drEnd.value)\" class=\"dr-inputico-wrapper end ion-activatable ripple-parent\">\n                    <ion-datetime ngModel #drEnd value={{eDate}} displayFormat=\"D MMM YYYY\" class=\"sheriff-input summary-list-date-input enddate\" mode=\"md\" readonly=\"true\"></ion-datetime>\n                    <ion-ripple-effect></ion-ripple-effect>\n                </div>\n            </ion-col>\n        </ion-row>\n        <ion-row class=\"sheriff-row\">\n            <ion-col size=\"6\" class=\"sheriff-col range-days-col\">\n                <div class=\"dr-rangedays-outter-wrapper\">\n                    <div class=\"dr-rangedays-inner-wrapper\">\n                        <div class=\"dr-rangedays-isvalid-wrapper\">\n                            <span class=\"isvalidrange-label\">Date Range:</span><span *ngIf=\"drIsValid\" class=\"isvalidrangeval valid\">VALID</span><span *ngIf=\"!drIsValid\" class=\"isvalidrangeval invalid\">INVALID</span>\n                        </div>\n                        <div class=\"dr-rangedays-text-wrapper\">\n                            <span *ngIf=\"drIsValid\" class=\"dr-rangedays-text range-dayno\">{{rangeDur}}</span>\n                            <span *ngIf=\"!drIsValid\" class=\"dr-rangedays-text rangeerror\">{{rangeError}}</span>\n                        </div>\n                    </div>\n                </div>\n            </ion-col>\n            <ion-col size=\"2\" class=\"sheriff-col done-btn-col\">\n                <ion-button (click)=\"cancelDateRange()\" class=\"sheriff-btn dr-modal-button cancel\">\n                    <ion-icon class=\"sheriff-ico daterange-btn-ico cancel-ico\" name=\"close\"></ion-icon>\n                </ion-button>\n            </ion-col>\n            <ion-col size=\"4\" class=\"sheriff-col done-btn-col\">\n                <ion-button (click)=\"drModalAction('done')\" class=\"sheriff-btn dr-modal-button done\" [ngStyle]=\"{'border-color':drIsValid?'#2dd36fad':'#e0ac08ad'}\">\n                    <ion-icon *ngIf=\"drIsValid\" name=\"checkmark\"></ion-icon>\n                    <div *ngIf=\"drIsValid\" class=\"dr-update-done-txt\">update</div>\n                    <div *ngIf=\"!drIsValid\" class=\"dr-update-done-txt error\">fix range</div>\n                </ion-button>\n            </ion-col>\n        </ion-row>\n    </ion-grid>\n</div>");

/***/ }),

/***/ 14010:
/*!*************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/modals/detail/news-detail/news-add/news-add.page.html ***!
  \*************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-header class=\"sheriff-header sheriff-tabpage-header\">\n    <ion-toolbar class=\"sheriff-toolbar\">\n        <div class=\"sheriff-header-background-wrapper\">\n            <div class=\"sheriff-header-droidstatus-padding-wrapper\"></div>\n            <div class=\"sheriff-header-background-inner-wrapper\">\n                <ion-grid class=\"sheriff-grid sheriff-page-header-grid addtsheetmodalheader-grid\">\n                    <ion-row class=\"sheriff-row sheriff-page-header-row addtsheetmodalheader-row\">\n                        <ion-col (click)=\"closeAddNews()\" class=\"sheriff-col addtsheet-header-col close-btn-col ion-activatable ripple-parent\">\n                            <div class=\"sheriff-addtsheet-header-btn-wrapper close-btn\">\n                                <ion-icon class=\"sheriff-addtsheet-header-ico close-btn-ico\" name=\"arrow-back\"></ion-icon>\n                            </div>\n                            <ion-ripple-effect></ion-ripple-effect>\n                        </ion-col>\n                        <ion-col class=\"sheriff-col addtsheet-header-col title-col\">\n                            <div class=\"sheriff-addtsheet-header title-wrapper\">\n                                <span class=\"tsaddtsheet-title-prefix\">Create Post</span>\n                            </div>\n                        </ion-col>\n                        <ion-col class=\"sheriff-col addtsheet-header-col save-addtsheet-btn-col\">\n                            <ion-button (click)=\"addRecipients()\" #addPplBtn [disabled]=\"false\" class=\"sheriff-trans-btn header-opt-btn add-ppl-btn\">\n                                <ion-icon class=\"sheriff-trans-btn-ico headder-opt-btn-ico add-ppl-btn-ico\" name=\"person-add\"></ion-icon>\n                            </ion-button>\n                        </ion-col>\n                        <ion-col class=\"sheriff-col addtsheet-header-col save-addtsheet-btn-col\">\n                            <ion-button (click)=\"memoBoxEvent('send',newMemoBox.value.toString())\" #postMemoBtn class=\"sheriff-trans-btn header-opt-btn post-memo-btn\">\n                                <ion-icon class=\"sheriff-trans-btn-ico headder-opt-btn-ico post-memo-btn-ico\" name=\"send\"></ion-icon>\n                                <ion-spinner *ngIf=\"mbStatus.type!==null&&mbStatus.type==='spinner'\" [duration]=\"1500\" class=\"memo-comment-chatbox-sending-btn-spinner\"></ion-spinner>\n                            </ion-button>\n                        </ion-col>\n                    </ion-row>\n                </ion-grid>\n            </div>\n        </div>\n    </ion-toolbar>\n</ion-header>\n\n<ion-content [ngStyle]=\"{'top':isNegH?negH:'0px'}\" class=\"news-addmemo-content\">\n\n    <ion-grid class=\"sheriff-grid news-addmemo-memodata-grid\">\n        <ion-row class=\"sheriff-row news-addmemo-recipient-list-row\">\n            <ion-col size=\"1\" class=\"sheriff-col news-addmemo-recipient-list-col addmemo-label-col\">\n                <div class=\"news-addmemo-memodata-label to\">To:</div>\n            </ion-col>\n            <ion-col size=\"11\" class=\"sheriff-col news-addmemo-recipient-list-col pplchips-col\">\n                <div class=\"news-addmemo-list-outter-wrapper\">\n                    <ion-chip *ngFor=\"let rP of recShowHead;let i=index\" class=\"sheriff-chip news-addmemo-person-chip\">\n                        <ion-avatar class=\"sheriff-avatar news-addmemo-person-chip-avatar\">\n                            <img src=\"{{rP.ava}}\" class=\"news-addmemo-person-chip-avatar-img\">\n                        </ion-avatar>\n                        <div class=\"news-addmemo-person-chip-txt\">{{rP.name}}</div>\n                        <ion-icon (click)=\"removeRP(i)\" class=\"news-addmemo-person-chip-delete-ico namrico\" name=\"close-circle\"></ion-icon>\n                    </ion-chip>\n                    <div class=\"news-addmemo-addbtn-outter-wrapper\">\n                        <div (click)=\"addRecipients()\" class=\"news-addmemo-no-add recipients ion-activatable ripple-parent\">\n                            <ion-icon class=\"sheriff-ico news-addmemo-na-ico\" name=\"add-circle-outline\"></ion-icon>\n                            <div class=\"news-addmemo-nar-text\">Add</div>\n                            <ion-ripple-effect></ion-ripple-effect>\n                        </div>\n                    </div>\n                </div>\n            </ion-col>\n        </ion-row>\n        <ion-row class=\"sheriff-row news-addmemo-addfile-row\">\n            <ion-col size=\"1\" class=\"sheriff-col news-addmemo-addfile-col addmemo-label-col\">\n                <div [ngStyle]=\"{'color':memoFiles.length>0?'var(--ion-color-primary)':'#646464'}\" class=\"news-addmemo-memodata-label\">File:</div>\n            </ion-col>\n            <ion-col size=\"11\" class=\"sheriff-col news-addmemo-addfile-col files-col\">\n                <div class=\"news-addmemo-list-outter-wrapper\">\n                    <div *ngIf=\"memoFiles.length>0\" class=\"news-addmemo-memodata-fileids-wrapper\">\n                        <div class=\"news-addmemo-file-wrapper\" *ngFor=\"let file of memoFiles;let fi=index\">\n                            <ion-icon class=\"news-addmemo-file-ico\" name=\"document\"></ion-icon>\n                            <div class=\"news-addmemo-file-name\">{{file.name}}</div>\n                            <ion-icon (click)=\"removeMemoFile(fi)\" class=\"news-addmemo-removefile-ico namrico\" name=\"close-circle\"></ion-icon>\n                        </div>\n                    </div>\n                    <div class=\"news-addmemo-addbtn-outter-wrapper\">\n                        <div (click)=\"addFiles()\" class=\"news-addmemo-no-add files ion-activatable ripple-parent\">\n                            <ion-icon class=\"sheriff-ico news-addmemo-na-ico\" name=\"add-circle-outline\"></ion-icon>\n                            <div class=\"news-addmemo-nar-text\">Add</div>\n                            <ion-ripple-effect></ion-ripple-effect>\n                        </div>\n                    </div>\n                </div>\n            </ion-col>\n        </ion-row>\n        <ion-row class=\"sheriff-row news-addmemo-addurl-row\">\n            <ion-col size=\"1\" class=\"sheriff-col news-addmemo-addurl-col addmemo-label-col\">\n                <div [ngStyle]=\"{'color':memoUrls.length>0?'var(--ion-color-primary)':'#646464'}\" class=\"news-addmemo-memodata-label\">Url:</div>\n            </ion-col>\n            <ion-col size=\"11\" class=\"sheriff-col news-addmemo-addurl-col url-col\">\n                <div class=\"news-addmemo-list-outter-wrapper\">\n                    <div *ngIf=\"memoUrls.length>0\" class=\"news-addmemo-memodata-urls-wrapper\">\n                        <div class=\"news-addmemo-url\" *ngFor=\"let url of memoUrls;let ui=index\">\n                            <ion-icon class=\"news-addmemo-url-ico\" name=\"link\"></ion-icon>\n                            <div class=\"news-addmemo-url-name\">{{url.name}}</div>\n                            <ion-icon (click)=\"removeMemoUrl(ui)\" class=\"news-addmemo-removeurl-ico namrico\" name=\"close-circle\"></ion-icon>\n                        </div>\n                    </div>\n                    <div class=\"news-addmemo-addbtn-outter-wrapper\">\n                        <div (click)=\"addUrls()\" class=\"news-addmemo-no-add urls ion-activatable ripple-parent\">\n                            <ion-icon class=\"sheriff-ico news-addmemo-na-ico\" name=\"add-circle-outline\"></ion-icon>\n                            <div class=\"news-addmemo-nar-text\">Add</div>\n                            <ion-ripple-effect></ion-ripple-effect>\n                        </div>\n                    </div>\n                </div>\n            </ion-col>\n        </ion-row>\n        <ion-row class=\"sheriff-row news-addmemo-reqconf-row\">\n            <ion-col size=\"1\" class=\"sheriff-col news-addmemo-reqconf-col box-col\">\n                <ion-checkbox (ionChange)=\"reqConfChange()\" [checked]=\"memoReqConf\" [mode]=\"'ios'\" class=\"sheriff-checkbox newmemo-reqconf-checkbox\"></ion-checkbox>\n            </ion-col>\n            <ion-col size=\"11\" class=\"sheriff-col news-addmemo-reqconf-col label-col\">\n                <div *ngIf=\"!memoReqConf\" [ngStyle]=\"{'color':'#646464'}\" class=\"news-addmemo-requireconf-label\">Require Confirmation</div>\n                <div *ngIf=\"memoReqConf\" [ngStyle]=\"{'color':'var(--ion-color-primary)'}\" class=\"news-addmemo-requireconf-label\">Confirmation Required</div>\n            </ion-col>\n        </ion-row>\n    </ion-grid>\n\n    <div class=\"news-addmemo-gradient-div-line top\"></div>\n\n    <ion-grid class=\"sheriff-grid news-addmemo-messagebox-grid\">\n        <ion-row class=\"sheriff-row news-addmemo-messagetitle-row\">\n            <ion-col class=\"sheriff-col news-addmemo-messagetitle-col\">\n                <ion-input class=\"sheriff-input news-addmemo-titleinput\" #newMemoTitle [clearInput]=\"true\" [clearOnEdit]=\"false\" [mode]=\"'md'\" [placeholder]=\"'Subject/Title?'\" [value]=\"''\" (ionBlur)=\"updateMemoTitle(newMemoTitle.value.toString())\"></ion-input>\n            </ion-col>\n        </ion-row>\n        <ion-row class=\"sheriff-row news-addmemo-messagebox-row\">\n            <ion-col size=\"12\" class=\"sheriff-col news-addmemo-messagebox-col\">\n                <div [ngModel] #newMemoBoxWrap [ngStyle]=\"{'min-height':fitH}\" class=\"nadtbwrap\">\n                    <ion-textarea #newMemoBox [autoGrow]=\"true\" [autofocus]=\"false\" [autocapitalize]=\"false\" [clearOnEdit]=\"false\" [cols]=\"12\" [debounce]=\"0\" [disabled]=\"false\" [maxlength]=\"2000\" [mode]=\"'md'\" [placeholder]=\"'Your Post Content...'\" [rows]=\"6\" [value]=\"''\"\n                        (ionInput)=\"memoBoxEvent('input',newMemoBox.value.toString())\" (ionFocus)=\"memoBoxEvent('focus',newMemoBox.value.toString())\" (ionBlur)=\"memoBoxEvent('input',newMemoBox.value.toString())\" class=\"sheriff-textarea news-addmemo-messagebox\"></ion-textarea>\n                </div>\n            </ion-col>\n        </ion-row>\n    </ion-grid>\n\n    <div class=\"news-addmemo-gradient-div-line bottom\"></div>\n\n    <ion-grid class=\"sheriff-grid news-addmemo-typedata-grid\">\n        <ion-row class=\"sheriff-row news-addmemo-messagebox-info-topper-row\">\n            <ion-col size=\"1\" class=\"sheriff-col news-addmemo-messagebox-info-topper-col status-ico-col\">\n                <ion-icon *ngIf=\"mbStatus.type==='icon'\" class=\"addmemo-messagebox-status-ico {{mbStatus.ico}}\" name=\"{{mbStatus.name}}\"></ion-icon>\n                <ion-spinner *ngIf=\"mbStatus.type==='spinner'\" class=\"addmemo-messagebox-status-ico {{mbStatus.ico}}\" name=\"{{mbStatus.name}}\"></ion-spinner>\n            </ion-col>\n            <ion-col size=\"9\" class=\"sheriff-col news-addmemo-messagebox-info-topper-col status-text-col\">\n                <div class=\"addmemo-messagebox-text-wrapper\">{{mbStatus.text}}</div>\n            </ion-col>\n            <ion-col size=\"2\" class=\"sheriff-col sheriff-col news-addmemo-messagebox-info-topper-col charcount-col\">\n                <div *ngIf=\"mbFocus\" [ngStyle]=\"{'color':mbCount===2000?'var(--ion-color-danger)':'#565656'}\" class=\"addmemo-messagebox-charcount-wrapper\">{{2000-mbCount}}</div>\n            </ion-col>\n        </ion-row>\n    </ion-grid>\n\n</ion-content>");

/***/ }),

/***/ 82472:
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/modals/detail/news-detail/news-add/recipients/recipients.page.html ***!
  \**************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-content class=\"modal-recipients-content\">\n    <div class=\"modal-recipients-main-wrapper\">\n        <ion-grid class=\"sheriff-grid modal-recipients-grid header-grid\">\n            <ion-row class=\"sheriff-row modal-recipients-header-row\">\n                <ion-col size=\"8\" class=\"sheriff-col modal-recipients-header-col titletext-col\">\n                    <div class=\"modal-recipients-header-title-wrapper\">Recipients:</div>\n                </ion-col>\n                <ion-col size=\"2\" class=\"sheriff-col modal-recipients-header-col selall-col\">\n                    <div (click)=\"bulkSelectRec('all')\" class=\"mrec-header-allnone-btn-wrapper sel ion-activatable ripple-parent\">\n                        <ion-icon class=\"allnonebtnico sel\" name=\"person-add-outline\"></ion-icon>\n                        <div class=\"allnonebtntxt sel\">All</div>\n                        <ion-ripple-effect></ion-ripple-effect>\n                    </div>\n                </ion-col>\n                <ion-col size=\"2\" class=\"sheriff-col modal-recipients-header-col dselall-col ion-activatable ripple-parent\">\n                    <div (click)=\"bulkSelectRec('none')\" class=\"mrec-header-allnone-btn-wrapper dsel ion-activatable ripple-parent\">\n                        <ion-icon class=\"allnonebtnico dsel\" name=\"person-remove-outline\"></ion-icon>\n                        <div class=\"allnonebtntxt dsel\">All</div>\n                        <ion-ripple-effect></ion-ripple-effect>\n                    </div>\n                </ion-col>\n            </ion-row>\n        </ion-grid>\n        <ion-list class=\"sheriff-list modal-recipients-item-list\">\n            <ion-item *ngFor=\"let mRP of modalRecList;let mRPi=index\" class=\"sheriff-item modal-recipients-item\">\n                <ion-grid class=\"sheriff-grid modal-recipients-grid person-grid\">\n                    <ion-row class=\"sheriff-row modal-recipients-row person-row\">\n                        <ion-col size=\"2\" class=\"sheriff-col modal-recipients-col person-col person-ava-col\">\n                            <div class=\"pop-person-ava-wrapper\">\n                                <img src=\"{{mRP.ava}}\" class=\"pop-person-ava-img\">\n                            </div>\n                        </ion-col>\n                        <ion-col size=\"8\" class=\"sheriff-col modal-recipients-col person-col person-name-col\">\n                            <div class=\"pop-person-name-wrapper\">\n                                {{mRP.name}}\n                            </div>\n                        </ion-col>\n                        <ion-col size=\"2\" class=\"sheriff-col modal-recipients-col person-col person-hasconf-col\">\n                            <ion-checkbox (ionChange)=\"recChange(mRPi)\" [checked]=\"mRP.isChecked\" [mode]=\"'ios'\" class=\"sheriff-checkbox recipients-checkbox\"></ion-checkbox>\n                        </ion-col>\n                    </ion-row>\n                </ion-grid>\n            </ion-item>\n        </ion-list>\n        <ion-grid class=\"sheriff-grid modal-recipients-grid button-grid\">\n            <ion-row class=\"sheriff-row modal-recipients-button-row\">\n                <ion-col size=\"6\" class=\"sheriff-col modal-recipients-button-col cancel-col\">\n                    <ion-button (click)=\"updateCancelList('cancel')\" class=\"sheriff-btn recipients-btn cancel\">\n                        <ion-icon class=\"sheriff-btn-ico\" name=\"close\"></ion-icon>\n                        <div class=\"sheriff-btn-txt\">Cancel</div>\n                    </ion-button>\n                </ion-col>\n                <ion-col size=\"6\" class=\"sheriff-col modal-recipients-button-col ok-col\">\n                    <ion-button (click)=\"updateCancelList('update')\" class=\"sheriff-btn recipients-btn ok\">\n                        <ion-icon class=\"sheriff-btn-ico\" name=\"checkmark\"></ion-icon>\n                        <div class=\"sheriff-btn-txt\">Update</div>\n                    </ion-button>\n                </ion-col>\n            </ion-row>\n        </ion-grid>\n    </div>\n</ion-content>");

/***/ }),

/***/ 61150:
/*!*******************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/modals/detail/news-detail/news-detail.page.html ***!
  \*******************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-header class=\"sheriff-header sheriff-tabpage-header\">\n    <ion-toolbar class=\"sheriff-toolbar\">\n        <div class=\"sheriff-header-background-wrapper\">\n            <div class=\"sheriff-header-droidstatus-padding-wrapper\"></div>\n            <div class=\"sheriff-header-background-inner-wrapper\">\n                <ion-grid class=\"sheriff-grid sheriff-page-header-grid detailmodalheader-grid\">\n                    <ion-row class=\"sheriff-row sheriff-page-header-row detailmodalheader-row\">\n                        <ion-col (click)=\"closeDetail('dismiss')\" class=\"sheriff-col detail-header-col close-btn-col ion-activatable ripple-parent\">\n                            <div class=\"sheriff-detail-header-btn-wrapper close-btn\">\n                                <ion-icon class=\"sheriff-detail-header-ico close-btn-ico\" name=\"arrow-back\"></ion-icon>\n                            </div>\n                            <ion-ripple-effect></ion-ripple-effect>\n                        </ion-col>\n                        <ion-col class=\"sheriff-col detail-header-col title-col\">\n                            <div class=\"sheriff-detail-header title-wrapper\">\n                                <span class=\"memodetail-title-prefix\">Memo</span><span class=\"memodetail-title-hash\">#</span><span class=\"memodetail-title-idno\">{{memo.Id}}</span>\n                                <span *ngIf=\"memo._DPMetaData.RequireConfirmation\" class=\"memodetail-requires-confirmation-main-wrapper\">\n                                  <span class=\"memodetail-confirmstatus-joiner\">-</span>\n                                <span *ngIf=\"!memo._DPMetaData.RequireMyConfirm\" class=\"memodetail-memo-isconfirmed-wrapper\">Confirmed</span>\n                                <span *ngIf=\"memo._DPMetaData.RequireMyConfirm\" class=\"memodetail-memo-isnotconfirmed-wrapper\">Confirm Now</span>\n                                </span>\n                            </div>\n                        </ion-col>\n                        <ion-col *ngIf=\"memo._DPMetaData.RequireMyConfirm\" (click)=\"confirmMemo()\" class=\"sheriff-col detail-header-col confirm-btn-col ion-activatable ripple-parent\">\n                            <div class=\"sheriff-detail-header-btn-wrapper confirm-btn\">\n                                <ion-icon class=\"animate__animated animate__infinite animDur-2000 animate__flash sheriff-detail-header-ico delete-btn-ico\" name=\"thumbs-up\"></ion-icon>\n                            </div>\n                            <ion-ripple-effect></ion-ripple-effect>\n                        </ion-col>\n                        <ion-col (click)=\"deleteMemo()\" class=\"sheriff-col detail-header-col share-btn-col ion-activatable ripple-parent\">\n                            <div [ngStyle]=\"{'opacity':memo._DPMetaData.CanDelete?'1':'0.5'}\" class=\"sheriff-detail-header-btn-wrapper delete-btn\">\n                                <ion-icon class=\"sheriff-detail-header-ico delete-btn-ico\" name=\"trash\"></ion-icon>\n                            </div>\n                            <ion-ripple-effect></ion-ripple-effect>\n                        </ion-col>\n                        <ion-col (click)=\"shareMemo()\" class=\"sheriff-col detail-header-col share-btn-col ion-activatable ripple-parent\">\n                            <div class=\"sheriff-detail-header-btn-wrapper share-btn\">\n                                <ion-icon class=\"sheriff-detail-header-ico share-btn-ico\" name=\"share\"></ion-icon>\n                            </div>\n                            <ion-ripple-effect></ion-ripple-effect>\n                        </ion-col>\n                    </ion-row>\n                </ion-grid>\n            </div>\n        </div>\n    </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"sheriff-content modal-newsdetail-content\">\n\n    <div class=\"sheriff-modal-backer-wrapper\">\n        <ion-grid class=\"sheriff-grid sheriff-newsdetail-modal-grid main-memo-grid\">\n            <ion-row class=\"sheriff-row sheriff-newsdetail-modal-row creator-row\">\n                <ion-col size=\"2\" class=\"sheriff-col sheriff-newsdetail-modal-col creator-ava-col\">\n                    <div class=\"memo-item-ava-img-wrapper detail\">\n                        <div class=\"memo-item-ava-img-value-wrapper detail\">\n                            <img src=\"{{memo._DPMetaData.CreatorInfo.Photo}}\" class=\"memo-item-ava-img detail\">\n                        </div>\n                    </div>\n                </ion-col>\n                <ion-col size=\"10\" class=\"sheriff-col memo-item-content-col creator-col detail\">\n                    <div class=\"memo-item-creator-name detail\">{{memo._DPMetaData.CreatorInfo.DisplayName}}</div>\n                    <div class=\"memo-item-date-item-wrapper created detail\">\n                        <ion-icon class=\"memo-item-date-item-ico created\" name=\"push\"></ion-icon>\n                        <span class=\"memo-item-label-txt created\">Posted:</span>\n                        <span class=\"memo-item-date-item-value created\">{{memo.nCreated}}</span>\n                    </div>\n                    <div *ngIf=\"memo.nModified!==memo.nCreated\" class=\"memo-item-date-item-wrapper modified detail\">\n                        <ion-icon class=\"memo-item-date-item-ico modified\" name=\"create\"></ion-icon>\n                        <span class=\"memo-item-label-txt modified\">Edited:</span>\n                        <span class=\"memo-item-date-item-value modified\">{{memo.nModified}}</span>\n                    </div>\n                </ion-col>\n            </ion-row>\n            <ion-row class=\"sheriff-row memodetail-row dividerline-row\">\n                <ion-col class=\"sheriff-col memodetail-col dividerline-col\">\n                    <div class=\"memo-detail-gradient-div-line top\"></div>\n                </ion-col>\n            </ion-row>\n            <ion-row class=\"sheriff-row memo-item-content-row recipients-row detail\">\n                <ion-col size=\"12\" class=\"sheriff-col memo-item-content-col recipients-col detail\">\n                    <ion-icon class=\"memo-item-sentto-ico sentto\" name=\"send\"></ion-icon>\n                    <div class=\"memo-item-label-txt sentto detail\">Sent to:</div>\n                    <div *ngIf=\"memo._DPMetaData.AssignedUsers.length>1\" class=\"memo-item-sentto-wrapper people detail\">\n                        <div (click)=\"showPeoplePop($event)\" class=\"memo-item-sentto-group-countshow people detail\">\n                            <div class=\"memo-item-senttocount-value\">\n                                {{memo._DPMetaData.AssignedUsers.length}}\n                                <ion-icon class=\"memo-item-sentto-ico people\" name=\"people\"></ion-icon>\n                            </div>\n                        </div>\n                    </div>\n                    <div *ngIf=\"memo._DPMetaData.Companies.length>0\" class=\"memo-item-sentto-wrapper companies detail\">\n                        <div class=\"memo-item-senttocount-value detail\">\n                            {{memo._DPMetaData.Companies.length}}\n                            <ion-icon class=\"memo-item-sentto-ico companies\" name=\"business\"></ion-icon>\n                            <span class=\"memo-senttocompany-wrapper\" *ngFor=\"let c of memo._DPMetaData.Companies;let ci=index\">\n                            <span [ngStyle]=\"{'color':c.Code===this.workName?workColor:'#eee','filter':incBright===true?'brightness(2.5)':'brightness(1)'}\" class=\"memo-senttocompany-name\">{{c.Code}}</span>\n                            </span>\n                        </div>\n                    </div>\n                </ion-col>\n            </ion-row>\n            <ion-row class=\"sheriff-row memo-item-content-row message-text-row detail\">\n                <ion-col *ngIf=\"memo.Title!==null&&memo.Title!==undefined&&memo.Title!==''\" size=\"12\" class=\"sheriff-col memo-item-content-col message-text-title-col detail\">{{memo.Title}}</ion-col>\n                <ion-col size=\"12\" class=\"sheriff-col memo-item-content-col message-text-content-col detail\">\n                    <div class=\"memo-item-content-message-wrapper detail\">\n                        {{memo.Content}}\n                    </div>\n                </ion-col>\n                <ion-col size=\"12\" *ngIf=\"memo.File!==null&&memo.File!==undefined&&memo.File!==''&&memo.File>0\" class=\"sheriff-col memo-item-content-col message-text-file-col\">\n                    <ion-icon class=\"memo-item-ico file-ico\" name=\"document\"></ion-icon>\n                    <span class=\"memo-item-label-txt file\">Files:</span>\n                    <div *ngFor=\"let file of memo._DPMetaData.Files\" class=\"memo-item-file-objects-wrapper\">\n                        <span class=\"memo-item-value-txt file\">{{file.Id}}</span>\n                    </div>\n                </ion-col>\n                <ion-col size=\"12\" *ngIf=\"memo.Url!==null&&memo.Url!==undefined&&memo.Url!==''\" class=\"sheriff-col memo-item-content-col message-text-url-col\">\n                    <ion-icon class=\"memo-item-ico url-ico\" name=\"link\"></ion-icon>\n                    <span class=\"memo-item-label-txt url\">Links:</span>\n                    <span class=\"memo-item-value-txt url\"><a href=\"{{memo.Url}}\">{{memo.Url}}</a></span>\n                </ion-col>\n            </ion-row>\n        </ion-grid>\n\n        <div class=\"sheriff-modal-newsdetail-commentslist-main-wrapper\">\n            <div class=\"memo-detail-gradient-div-line bottom\"></div>\n            <ion-grid class=\"sheriff-grid commentslist-main-grid\">\n                <ion-row class=\"sheriff-grid commentslist-main-row title-row\">\n                    <ion-col size=\"12\" class=\"sheriff-col commentslist-main-col title-col ico-col\">\n                        <div class=\"commentslist-heading-title-txt-wrapper\">\n                            <ion-icon class=\"sheriff-ico commentslist-heading-ico\" name=\"chatbox\"></ion-icon>comments<span class=\"commentslist-heading-count-wrapper\"><span class=\"commentslist-countbrack\">(</span><span class=\"comments-list-count-value\">{{memo._DPMetaData.Comments.length}}</span><span class=\"commentslist-countbrack\">)</span></span>\n                        </div>\n                    </ion-col>\n                </ion-row>\n                <ion-row class=\"sheriff-grid commentslist-main-row commentslist-row\">\n                    <ion-col size=\"12\" class=\"sheriff-col commentslist-main-col commentslist-col\">\n                        <div *ngIf=\"memo._DPMetaData.Comments.length===0\" class=\"sheriff-newsdetail-nocomments-wrapper\">no comments found</div>\n                        <ion-list *ngIf=\"memo._DPMetaData.Comments.length>0\" class=\"sheriff-list modal-newsdetail-comments-list\">\n                            <ion-item *ngFor=\"let comment of memo._DPMetaData.Comments;let i = index\" class=\"sheriff-item news-comment-item memo-comment-{{i}}\">\n                                <ion-grid class=\"sheriff-grid memo-comment-item-grid\">\n                                    <ion-row class=\"sheriff-row memo-comment-item-row whowhen-row\">\n                                        <ion-col size=\"1\" class=\"sheriff-col memo-comment-item-col ava-col\">\n                                            <div class=\"memo-comment-item-ava-img-wrapper\">\n                                                <div class=\"memo-comment-item-ava-img-value-wrapper\">\n                                                    <img src=\"{{comment._DPMetaData.CreatorInfo.Photo}}\" class=\"memo-comment-item-ava-img\">\n                                                </div>\n                                            </div>\n                                        </ion-col>\n                                        <ion-col size=\"11\" class=\"sheriff-col memo-comment-item-col namedate-col\">\n                                            <div class=\"comment-item-date-item-wrapper creator name\">\n                                                {{comment._DPMetaData.CreatorInfo.DisplayName}}\n                                            </div>\n                                            <div class=\"memo-item-date-item-wrapper created detail\">\n                                                <ion-icon class=\"memo-item-date-item-ico created\" name=\"push\"></ion-icon>\n                                                <span class=\"memo-item-label-txt created comment\">Posted:</span>\n                                                <span class=\"memo-item-date-item-value created\">{{comment.Created}}</span>\n                                            </div>\n                                        </ion-col>\n                                    </ion-row>\n                                    <ion-row class=\"sheriff-row memo-comment-item-row what-row\">\n                                        <ion-col size=\"12\" class=\"sheriff-col memo-comment-item-col comment-col\">{{comment.Comment}}</ion-col>\n                                    </ion-row>\n                                </ion-grid>\n                            </ion-item>\n                        </ion-list>\n                    </ion-col>\n                </ion-row>\n            </ion-grid>\n        </div>\n\n        <div [ngStyle]=\"{'bottom':kbO?kbH:'0px'}\" class=\"sheriff-modal-newsdetail-chat-input-wrapper\">\n            <ion-grid class=\"sheriff-grid memo-chat-input-grid\">\n                <ion-row class=\"sheriff-row memo-chat-input-row input-info-topper-row\">\n                    <ion-col size=\"1\" class=\"sheriff-col memo-chat-input-row input-info-topper-col status-ico-col\">\n                        <ion-icon *ngIf=\"cbStatus.type==='icon'\" class=\"memo-chat-input-status-ico {{cbStatus.ico}}\" name=\"{{cbStatus.name}}\"></ion-icon>\n                        <ion-spinner *ngIf=\"cbStatus.type==='spinner'\" class=\"memo-chat-input-status-ico {{cbStatus.ico}}\" name=\"{{cbStatus.name}}\"></ion-spinner>\n                    </ion-col>\n                    <ion-col size=\"9\" class=\"sheriff-col memo-chat-input-col input-info-topper-col status-text-col\">\n                        <div class=\"chatbox-input-status-text-wrapper\">{{cbStatus.text}}</div>\n                    </ion-col>\n                    <ion-col size=\"2\" class=\"sheriff-col memo-chat-input-col input-info-topper-col charcount-col\">\n                        <div *ngIf=\"cbCount>0\" [ngStyle]=\"{'color':cbCount===2000?'var(--ion-color-danger)':'#565656'}\" class=\"chatbox-input-status-charcount-wrapper\">{{2000-cbCount}}</div>\n                    </ion-col>\n                </ion-row>\n                <ion-row class=\"sheriff-row memo-chat-input-row input-component-row\">\n                    <ion-col size=\"10\" class=\"sheriff-col memo-chat-input-col input-component-field-col\">\n                        <ion-input #cbInput [clearInput]=\"true\" [clearOnEdit]=\"false\" [debounce]=\"0\" [disabled]=\"false\" [placeholder]=\"'Post a Comment...'\" [value]=\"''\" (ionBlur)=\"chatBoxInput('blur',cbInput.value.toString())\" (ionFocus)=\"chatBoxInput('focus',cbInput.value.toString())\"\n                            (ionInput)=\"chatBoxInput('input',cbInput.value.toString())\" class=\"sheriff-input memo-chat-input\"></ion-input>\n                    </ion-col>\n                    <ion-col size=\"2\" class=\"sheriff-col memo-chat-input-col input-component-button-col\">\n                        <ion-button *ngIf=\"cbStatus.type!=='spinner'\" (click)=\"chatBoxInput('send',cbInput.value.toString())\" class=\"sheriff-btn news-comment-chatbox-send-btn\">\n                            <ion-icon class=\"sheriff-btn-ico news-comment-chatbox-send-btn-ico\" name=\"send\"></ion-icon>\n                            <div class=\"sheriff-btn-txt news-comment-chatbox-sent-btn-txt\">send</div>\n                        </ion-button>\n                        <ion-spinner *ngIf=\"cbStatus.type!==null&&cbStatus.type==='spinner'\" [duration]=\"1500\" class=\"memo-comment-chatbox-sending-btn-spinner\"></ion-spinner>\n                    </ion-col>\n                </ion-row>\n            </ion-grid>\n        </div>\n\n    </div>\n\n</ion-content>");

/***/ }),

/***/ 4425:
/*!*************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/modals/detail/task-add/task-add.page.html ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-header class=\"sheriff-header sheriff-tabpage-header\">\n    <ion-toolbar class=\"sheriff-toolbar\">\n        <div class=\"sheriff-header-background-wrapper\">\n            <div class=\"sheriff-header-droidstatus-padding-wrapper\"></div>\n            <div class=\"sheriff-header-background-inner-wrapper\">\n                <ion-grid class=\"sheriff-grid sheriff-page-header-grid addtaskmodalheader-grid\">\n                    <ion-row class=\"sheriff-row sheriff-page-header-row addtaskmodalheader-row\">\n                        <ion-col (click)=\"closeAddTask()\" class=\"sheriff-col addtask-header-col close-btn-col ion-activatable ripple-parent\">\n                            <div class=\"sheriff-addtask-header-btn-wrapper close-btn\">\n                                <ion-icon class=\"sheriff-addtask-header-ico close-btn-ico\" name=\"arrow-back\"></ion-icon>\n                            </div>\n                            <ion-ripple-effect></ion-ripple-effect>\n                        </ion-col>\n                        <ion-col class=\"sheriff-col addtask-header-col title-col\">\n                            <div class=\"sheriff-addtask-header title-wrapper\">\n                                <span class=\"tsaddtask-title-prefix\">Add Task</span>\n                            </div>\n                        </ion-col>\n                        <ion-col class=\"sheriff-col addtask-header-col save-addtask-btn-col ion-activatable ripple-parent\">\n                            <ion-grid class=\"sheriff-grid addtask-header-fnbtn-grid\">\n                                <ion-row class=\"sheriff-row addtask-header-fnbtn-row\">\n                                    <ion-col class=\"sheriff-col addtask-header-fnbtn-col tab-header-action-btn-col cancelbtn-col taskcancel\">\n                                        <ion-button (click)=\"closeAddTask()\" class=\"task-add-btn canceladdtaskbtn sheriff-trans-btn\">\n                                            <ion-icon name=\"close\" class=\"task-canceladd-btn-ico sheriff-trans-btn-ico header-opt-btn-ico\"></ion-icon>\n                                        </ion-button>\n                                    </ion-col>\n                                    <ion-col class=\"sheriff-col addtask-header-fnbtn-col submitbtn-col tab-header-action-btn-col tasksubmit\">\n                                        <ion-button (click)=\"submitAddTask()\" [disabled]=\"!submitReady\" [ngStyle]=\"{'filter':!submitReady?'grayscale(1)':'grayscale(0)'}\" class=\"sheriff-trans-btn task-add-btn addtaskbtn\">\n                                            <ion-icon name=\"checkmark\" class=\"sheriff-btn-ico task-add-btn-ico sheriff-trans-btn-ico header-opt-btn-ico\"></ion-icon>\n                                        </ion-button>\n                                    </ion-col>\n                                </ion-row>\n                            </ion-grid>\n                        </ion-col>\n                    </ion-row>\n                </ion-grid>\n            </div>\n        </div>\n    </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"tasks-addtask-content tasks-addtask-modal\">\n    <div class=\"tasks-addtask-bground-wrapper\"></div>\n    <div class=\"tasks-addtask-main-wrapper\">\n        <ion-grid class=\"sheriff-grid tasks-addtask-item-grid heading-grid\">\n            <ion-row class=\"sheriff-row tasks-addtask-item-row heading-row\">\n                <ion-col size=\"2\" class=\"sheriff-col sheriff-addtask-item-grid heading-ico-col\">\n                    <img class=\"sheriff-addtask-heading-ico tasks-heading-ico\" src=\"../../../../assets/img/sheriff-addtsheet-ico.png\">\n                </ion-col>\n                <ion-col size=\"8\" class=\"sheriff-col sheriff-addtask-item-grid heading-text-col\">\n                    <div class=\"sheriff-addtask-heading-txt tasks-heading-txt\">New Task</div>\n                </ion-col>\n                <ion-col size=\"2\" class=\"sheriff-col sheriff-addtask-item-grid heading-ico-col\">\n                    <div style=\"background-image:url({{workAvatar}})\" class=\"sheriff-addtask-workplaceava-wrapper\"></div>\n                </ion-col>\n            </ion-row>\n        </ion-grid>\n\n        <ion-grid class=\"sheriff-grid tasks-add-grid\">\n            <!-- ----- TASK TITLE ----- -->\n            <ion-row class=\"sheriff-row tasks-add-row title-row\">\n                <ion-col size=\"2\" class=\"sheriff-col addtask-col title-ico-col\">\n                    <ion-icon [ngStyle]=\"{'color':addForm.title.focus===true?'var(--ion-color-primary)':'#565656'}\" [ngClass]=\"{'addtaskicovalfade':addForm.title.valid!==null}\" name=\"list\" class=\"addtask-ico title-ico\"></ion-icon>\n                    <div class=\"addtask-ico-validation-wrapper title\">\n                        <ion-icon *ngIf=\"addForm.title.valid!==null&&addForm.title.valid===true\" style=\"color:var(--ion-color-success)\" name=\"checkmark\" class=\"addtask-ico valid-ico title\"></ion-icon>\n                        <ion-icon *ngIf=\"addForm.title.valid!==null&&addForm.title.valid===false\" style=\"color:var(--ion-color-danger)\" name=\"close\" class=\"addtask-ico invalid-ico title\"></ion-icon>\n                    </div>\n                </ion-col>\n                <ion-col size=\"10\" class=\"sheriff-col addtask-col title-input-col\">\n                    <div [ngStyle]=\"{'color':addForm.title.valid!==null&&addForm.title.valid===false?'var(--ion-color-danger)':'#727272'}\" [ngClass]=\"{'taskfauxlabelhlight':addForm.title.focus!==null&&addForm.title.focus===true}\" class=\"addtask-item-label tasktitle-label\">Task Title:</div>\n                    <ion-item class=\"addtask-item tasktitle-item\">\n                        <ion-input #atiTitle (ionFocus)=\"actionATField('focus','title',atiTitle.value)\" (ionBlur)=\"actionATField('blur','title',atiTitle.value)\" [required]=\"true\" [type]=\"'text'\" [clearInput]=\"true\" [inputmode]=\"'text'\" [mode]=\"'md'\" [placeholder]=\"'Required'\"\n                            class=\"addtask-item-input tasktitle-input\"></ion-input>\n                    </ion-item>\n                </ion-col>\n            </ion-row>\n            <!-- ----- ASSIGN TO ----- -->\n            <ion-row class=\"sheriff-row tasks-add-row assign-row\">\n                <ion-col size=\"2\" class=\"sheriff-col addtask-col assign-ico-col\">\n                    <ion-icon [ngStyle]=\"{'color':assSelIsOpen?'var(--ion-color-primary)':'#565656'}\" [ngClass]=\"{'addtaskicovalfade':addForm.assign.valid!==null&&!assSelIsOpen}\" name=\"person-add\" class=\"addtask-ico assign-ico\"></ion-icon>\n                    <div *ngIf=\"!assSelIsOpen\" class=\"addtask-ico-validation-wrapper assign\">\n                        <ion-icon *ngIf=\"addForm.assign.valid!==null&&addForm.assign.valid===true\" style=\"color:var(--ion-color-success)\" name=\"checkmark\" class=\"addtask-ico valid-ico assign\"></ion-icon>\n                        <ion-icon *ngIf=\"addForm.assign.valid!==null&&addForm.assign.valid===false\" style=\"color:var(--ion-color-danger)\" name=\"close\" class=\"addtask-ico invalid-ico assign\"></ion-icon>\n                    </div>\n                </ion-col>\n                <ion-col size=\"10\" class=\"sheriff-col tasks-addedit-formfield-col assignto-col\" [ngStyle]=\"{'border-bottom':assSelIsOpen?'solid 2px var(--ion-color-primary)':'solid 1px #343434'}\">\n                    <ion-grid class=\"sheriff-grid addtask-inner-grid assign\">\n                        <ion-row class=\"sheriff-row addtask-inner-row assign label\">\n                            <ion-col size=\"12\" class=\"sheriff-col addtask-inner-col assign label\">\n                                <div [ngStyle]=\"{'color':addForm.assign.valid!==null&&addForm.assign.valid===false?'var(--ion-color-danger)':'#727272'}\" [ngClass]=\"{'taskfauxlabelhlight':assSelIsOpen}\" class=\"addtask-item-label assigntolabel\">Assign To:</div>\n                            </ion-col>\n                        </ion-row>\n                        <ion-row class=\"sheriff-row addtask-inner-row assign content\">\n                            <ion-col size=\"12\" (click)=\"openAssignSelect()\" class=\"sheriff-col addtask-inner-col assign content input ion-activatable ripple-parent\">\n                                <div *ngIf=\"addForm.assign.value!==null\" class=\"addtask-assign-wrapper\">\n                                    <ion-chip class=\"sheriff-chip addtask-assign-chip\">\n                                        <ion-avatar class=\"sheriff-avatar addtask-assign-chip-avatar\">\n                                            <img class=\"addtask-chip-avatar-img assign-avar-img\" src=\"{{addForm.assign.value.Photo}}\">\n                                        </ion-avatar>\n                                        <ion-label class=\"addtask-chip assign-txt-label\">\n                                            <span *ngIf=\"addForm.assign.value.EmpId===myEmpId\" class=\"assign-chip-txt-label you\">You</span>\n                                            <span *ngIf=\"addForm.assign.value.EmpId!==myEmpId\" class=\"assign-chip-txt-label other\">\n                                    <span *ngIf=\"addForm.assign.value.FirstName.length>0\" class=\"assign-chip-txt-label fname\">{{addForm.assign.value.FirstName}}</span>\n                                            <span *ngIf=\"addForm.assign.value.LastName.length>0\" class=\"assign-chip-txt-label lname\"> {{addForm.assign.value.LastName.charAt(0)}}.</span>\n                                            <span *ngIf=\"addForm.assign.value.FirstName.length<1&&addForm.assign.value.LastName.length<1&&addForm.assign.value.DisplayName.length>0\" class=\"assign-chip-txt-label dname\">{{addForm.assign.value.DisplayName}}</span>\n                                            </span>\n                                        </ion-label>\n                                    </ion-chip>\n                                </div>\n                                <ion-ripple-effect></ion-ripple-effect>\n                            </ion-col>\n                        </ion-row>\n                    </ion-grid>\n                </ion-col>\n            </ion-row>\n            <!-- ----- DUE DATE ----- -->\n            <ion-row class=\"sheriff-row tasks-addedit-row tasks-addedit-duedate-row3\">\n                <ion-col size=\"2\" class=\"sheriff-col addtask-col duedate-ico-col\">\n                    <ion-icon [ngClass]=\"{'addtaskicovalfade':addForm.duedate.valid!==null}\" [ngStyle]=\"{'color':dateSelIsOpen?'var(--ion-color-primary)':'#565656'}\" name=\"calendar\" class=\"addtask-ico duedate-ico\"></ion-icon>\n                    <div class=\"addtask-ico-validation-wrapper duedate\">\n                        <ion-icon *ngIf=\"addForm.duedate.valid!==null&&addForm.duedate.valid===true\" style=\"color:var(--ion-color-success)\" name=\"checkmark\" class=\"addtask-ico valid-ico duedate\"></ion-icon>\n                        <ion-icon *ngIf=\"addForm.duedate.valid!==null&&addForm.duedate.valid===false\" style=\"color:var(--ion-color-danger)\" name=\"close\" class=\"addtask-ico invalid-ico duedate\"></ion-icon>\n                    </div>\n                </ion-col>\n                <ion-col size=\"10\" class=\"sheriff-col tasks-addedit-formfield-col duedate-co\" [ngStyle]=\"{'border-bottom':dateSelIsOpen?'solid 2px var(--ion-color-primary)':'solid 1px #343434'}\">\n                    <ion-grid class=\"sheriff-grid addtask-inner-grid duedate\">\n                        <ion-row class=\"sheriff-row addtask-inner-row duedate label\">\n                            <ion-col size=\"12\" class=\"sheriff-col addtask-inner-col duedate label\">\n                                <div [ngStyle]=\"{'color':addForm.duedate.valid!==null&&addForm.duedate.valid===false?'var(--ion-color-danger)':'#727272'}\" [ngClass]=\"{'taskfauxlabelhlight':dateSelIsOpen}\" class=\"addtask-item-label duedatelabel\">Due Date:</div>\n                            </ion-col>\n                        </ion-row>\n                        <ion-row class=\"sheriff-row addtask-inner-row duedate content\">\n                            <ion-col size=\"10\" (click)=\"openDP()\" class=\"sheriff-col addtask-inner-col duedate content input ion-activatable ripple-parent\">\n                                <div *ngIf=\"addForm.duedate.value!==null\" class=\"addtask-duedate-wrapper hasvalue\">\n                                    {{addForm.duedate.txt}}\n                                    <div class=\"addtask-duedate-od\" *ngIf=\"dateOD\">\n                                        <ion-icon class=\"addtask-duedate-od-ico\" name=\"warning-outline\"></ion-icon>Due</div>\n                                </div>\n                                <div *ngIf=\"addForm.duedate.value===null\" class=\"addtask-duedate-wrapper default\">\n                                    Optional\n                                </div>\n                                <ion-ripple-effect></ion-ripple-effect>\n                            </ion-col>\n                            <ion-col size=\"2\" class=\"sheriff-col addtask-inner-col duedate content clear\">\n                                <div *ngIf=\"addForm.duedate.value!==null\" (click)=\"clearDueDate()\" class=\"addtask-custclearbtn-wrapper duedate ion-activatable ripple-parent\">\n                                    <ion-icon class=\"addtask-custclearbtn-ico duedate\" name=\"close\"></ion-icon>\n                                    <ion-ripple-effect></ion-ripple-effect>\n                                </div>\n                            </ion-col>\n                        </ion-row>\n                    </ion-grid>\n                </ion-col>\n            </ion-row>\n            <!-- ----- NOTES ----- -->\n            <ion-row class=\"sheriff-row tasks-addedit-row tasks-addedit-tasknotes-row4\">\n                <ion-col size=\"2\" class=\"sheriff-col addtask-col notes-ico-col\">\n                    <ion-icon [ngStyle]=\"{'color':addForm.notes.focus===true?'var(--ion-color-primary)':'#565656'}\" name=\"pencil\" [ngClass]=\"{'addtaskicovalfade':addForm.notes.valid!==null}\" class=\"addtask-ico notes-ico\"></ion-icon>\n                    <div class=\"addtask-ico-validation-wrapper notes\">\n                        <ion-icon *ngIf=\"addForm.notes.valid!==null&&addForm.notes.valid===true\" style=\"color:var(--ion-color-success)\" name=\"checkmark\" class=\"addtask-ico valid-ico notes\"></ion-icon>\n                        <ion-icon *ngIf=\"addForm.notes.valid!==null&&addForm.notes.valid===false\" style=\"color:var(--ion-color-danger)\" name=\"close\" class=\"addtask-ico invalid-ico notes\"></ion-icon>\n                    </div>\n                </ion-col>\n                <ion-col size=\"10\" class=\"sheriff-col tasks-addedit-formfield-col notes-col\">\n                    <div class=\"addtask-item-label tasknotes-label\" [ngStyle]=\"{'color':addForm.notes.valid!==null&&addForm.notes.valid===false?'var(--ion-color-danger)':'#727272'}\" [ngClass]=\"{'taskfauxlabelhlight':addForm.notes.focus!==null&&addForm.notes.focus===true}\">Task Notes:</div>\n                    <ion-item class=\"addtask-item tasknotes-item\">\n                        <ion-textarea #atiNotes (ionFocus)=\"actionATField('focus','notes',atiNotes.value)\" (ionBlur)=\"actionATField('blur','notes',atiNotes.value)\" [autoGrow]=\"true\" [required]=\"false\" [mode]=\"'md'\" [placeholder]=\"'Optional'\" class=\"addtask-item-input tasknotes-input\"></ion-textarea>\n                    </ion-item>\n                </ion-col>\n            </ion-row>\n        </ion-grid>\n\n    </div>\n\n</ion-content>");

/***/ }),

/***/ 15295:
/*!******************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/modals/detail/task-add/taskassignee/taskassignee.page.html ***!
  \******************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-content class=\"modal-recipients-content assignee\">\n    <div class=\"modal-recipients-main-wrapper assignee\">\n        <ion-grid class=\"sheriff-grid modal-recipients-grid header-grid assignee\">\n            <ion-row class=\"sheriff-row modal-recipients-header-row assignee\">\n                <ion-col size=\"12\" class=\"sheriff-col modal-recipients-header-col titletext-col assignee\">\n                    <div class=\"modal-recipients-header-title-wrapper assignee\">Assign To:</div>\n                </ion-col>\n            </ion-row>\n        </ion-grid>\n        <ion-list class=\"sheriff-list modal-recipients-item-list assignee\">\n            <ion-item (click)=\"assSelChange(assI)\" [button]=\"true\" *ngFor=\"let ass of modalAssList;let assI=index\" class=\"sheriff-item modal-recipients-item assignee\">\n                <ion-grid class=\"sheriff-grid modal-recipients-grid person-grid assignee\">\n                    <ion-row class=\"sheriff-row modal-recipients-row person-row assignee\">\n                        <ion-col size=\"2\" class=\"sheriff-col modal-recipients-col person-col person-ava-col assignee\">\n                            <div class=\"pop-person-ava-wrapper assignee\">\n                                <img src=\"{{ass.Photo}}\" class=\"pop-person-ava-img assignee\">\n                            </div>\n                        </ion-col>\n                        <ion-col size=\"10\" class=\"sheriff-col modal-recipients-col person-col person-name-col assignee\">\n                            <div class=\"pop-person-name-wrapper assignee\">\n                                {{ass.DisplayName}}\n                            </div>\n                        </ion-col>\n                    </ion-row>\n                </ion-grid>\n            </ion-item>\n        </ion-list>\n        <ion-grid class=\"sheriff-grid modal-recipients-grid button-grid assignee\">\n            <ion-row class=\"sheriff-row modal-recipients-button-row assignee\">\n                <ion-col size=\"12\" class=\"sheriff-col modal-recipients-button-col cancel-col assignee\">\n                    <ion-button (click)=\"assSelCancel()\" class=\"sheriff-btn recipients-btn cancel assignee\">\n                        <ion-icon class=\"sheriff-btn-ico assignee\" name=\"close\"></ion-icon>\n                        <div class=\"sheriff-btn-txt assignee\">Cancel</div>\n                    </ion-button>\n                </ion-col>\n            </ion-row>\n        </ion-grid>\n    </div>\n</ion-content>");

/***/ }),

/***/ 56439:
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/modals/detail/tsheet-detail/tsheet-add/tsheet-add.page.html ***!
  \*******************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-header class=\"sheriff-header sheriff-tabpage-header\">\n    <ion-toolbar class=\"sheriff-toolbar\">\n        <div class=\"sheriff-header-background-wrapper\">\n            <div class=\"sheriff-header-droidstatus-padding-wrapper\"></div>\n            <div class=\"sheriff-header-background-inner-wrapper\">\n                <ion-grid class=\"sheriff-grid sheriff-page-header-grid addtsheetmodalheader-grid\">\n                    <ion-row class=\"sheriff-row sheriff-page-header-row addtsheetmodalheader-row\">\n                        <ion-col (click)=\"closeAddTSheet()\" class=\"sheriff-col addtsheet-header-col close-btn-col ion-activatable ripple-parent\">\n                            <div class=\"sheriff-addtsheet-header-btn-wrapper close-btn\">\n                                <ion-icon class=\"sheriff-addtsheet-header-ico close-btn-ico\" name=\"arrow-back\"></ion-icon>\n                            </div>\n                            <ion-ripple-effect></ion-ripple-effect>\n                        </ion-col>\n                        <ion-col class=\"sheriff-col addtsheet-header-col title-col\">\n                            <div class=\"sheriff-addtsheet-header title-wrapper\">\n                                <span class=\"tsaddtsheet-title-prefix\">Add Timesheet</span>\n                            </div>\n                        </ion-col>\n                        <ion-col (click)=\"saveNewTSheet(false)\" class=\"sheriff-col addtsheet-header-col save-addtsheet-btn-col ion-activatable ripple-parent\">\n                            <div class=\"shouldsave-indic-wrapper\">\n                                <ion-icon *ngIf=\"shouldSave&&!errorSave\" class=\"shouldsave-indic-ico animate__animated animate__fadeIn\" name=\"ellipse\"></ion-icon>\n                                <ion-icon *ngIf=\"errorSave\" class=\"errorsave-indic-ico animate__animated animate__fadeIn\" name=\"ellipse\"></ion-icon>\n                            </div>\n                            <div [class.halfbrightness]=\"errorSave\" class=\"sheriff-addtsheet-header-btn-wrapper save-btn\">\n                                <ion-icon class=\"sheriff-addtsheet-header-ico save-btn-ico\" name=\"save\"></ion-icon>\n                            </div>\n                            <ion-ripple-effect></ion-ripple-effect>\n                        </ion-col>\n                    </ion-row>\n                </ion-grid>\n            </div>\n        </div>\n    </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"tsheet-addtsheet-content tsheet-addtsheet-modal\">\n    <div class=\"tsheet-addtsheet-bground-wrapper\"></div>\n    <div class=\"tsheet-addtsheet-main-wrapper\">\n        <div *ngIf=\"wasChanged&&!errorSave\" class=\"tsheet-addtsheet-updated-banner-wrapper\">{{updateSaveBannerTxt}}</div>\n        <ion-grid class=\"tsheet-addtsheet-item-grid heading-grid\">\n            <ion-row class=\"tsheet-addtsheet-item-row heading-row\">\n                <ion-col size=\"2\" class=\"sheriff-addtsheet-item-grid heading-ico-col\">\n                    <img class=\"sheriff-addtsheet-heading-ico tsheet-heading-ico\" src=\"../../../../assets/img/sheriff-addtsheet-ico.png\">\n                </ion-col>\n                <ion-col size=\"8\" class=\"sheriff-addtsheet-item-grid heading-text-col\">\n                    <div class=\"sheriff-addtsheet-heading-txt tsheet-heading-txt\">New Timesheet</div>\n                </ion-col>\n                <ion-col size=\"2\" class=\"sheriff-addtsheet-item-grid heading-ico-col\">\n                    <div style=\"background-image:url({{workAvatar}})\" class=\"sheriff-addtsheet-workplaceava-wrapper\"></div>\n                </ion-col>\n            </ion-row>\n        </ion-grid>\n\n        <ion-grid class=\"tsheet-addtsheet-item-grid data-grid\">\n            <ion-row (click)=\"editArea(addTSFormData.areaId)\" class=\"tsheet-addtsheet-item-row area-at-workplace ion-activatable ripple-parent\">\n                <ion-col size=\"2\" class=\"sheriff-col tsheet-addtsheet-item-col area-at-workplace-col ico-col\">\n                    <ion-icon class=\"sheriff-ico tsheet-addtsheet-item-main-ico tsheet-detail-item-main-ico areaatworkplace-ico\" name=\"locate\"></ion-icon>\n                </ion-col>\n                <ion-col size=\"8\" class=\"sheriff-col tsheet-addtsheet-item-col area-at-workplace-col data-col\">\n                    <div class=\"tsheet-addtsheet-item-data-label area-at-workplace\">Area at {{addTSFormData.companyName}}</div>\n                    <div class=\"tsheet-addtsheet-item-data-value area-at-workplace\">{{addTSFormData.areaName}}</div>\n                </ion-col>\n                <ion-col size=\"2\" class=\"sheriff-col tsheet-addtsheet-item-col area-at-workplace-col addtsheet-col\">\n                    <ion-icon [ngClass]=\"{'tsheet-warea-asheet-open-ico':aSheetOpen,'tsheet-warea-asheet-close-ico':!aSheetOpen}\" class=\"sheriff-ico tsheet-addtsheet-item-addtsheet-ico area-at-workplace\" name=\"chevron-forward\"></ion-icon>\n                </ion-col>\n                <ion-ripple-effect></ion-ripple-effect>\n            </ion-row>\n            <ion-row class=\"tsheet-addtsheet-item-row date-time\">\n                <ion-col size=\"2\" class=\"sheriff-col tsheet-addtsheet-item-col date-time-col ico-col\">\n                    <img class=\"sheriff-ico tsheet-addtsheet-item-main-ico date-time-ico\" src=\"../../../../../assets/img/sheriff-tsheet-detail-datetime-ico.png\">\n                    <div class=\"tsheet-addtsheet-datetime-icon-wrapper time\">\n                        <ion-icon class=\"sheriff-ico tsheet-addtsheet-item-main-ico startendtime-ico tsheet-detail-item-main-ico \" name=\"stopwatch\"></ion-icon>\n                    </div>\n                    <div class=\"tsheet-addtsheet-datetime-icon-wrapper breaks\">\n                        <ion-icon class=\"sheriff-ico tsheet-addtsheet-item-main-ico tsheet-detail-item-main-ico breaks-ico\" name=\"pause\"></ion-icon>\n                    </div>\n                    <div class=\"tsheet-addtsheet-datetime-icon-wrapper tt\">\n                        <ion-icon class=\"sheriff-ico tsheet-addtsheet-item-main-ico tsheet-detail-item-main-ico tt-ico\" name=\"calculator\"></ion-icon>\n                    </div>\n                </ion-col>\n                <ion-col size=\"10\" class=\"sheriff-col tsheet-addtsheet-item-col date-time-col data-col\">\n                    <ion-grid class=\"tsheet-addtsheet-item-grid datetime-grid\">\n                        <ion-row (click)=\"openDP('date')\" class=\"tsheet-addtsheet-item-row date-time-inner-row date-row\">\n                            <ion-col size=\"10\" class=\"tsheet-addtsheet-item-col date-time-inner-col date-col\">\n                                <div class=\"tsheet-addtsheet-item-data-label date\">Date</div>\n                                <div class=\"tsheet-addtsheet-item-data-value date\">{{addTSFormData.date.txt}}</div>\n                            </ion-col>\n                            <ion-col size=\"2\" class=\"sheriff-col tsheet-addtsheet-item-col date-select-col addtsheet-col\">\n                                <ion-icon [ngClass]=\"{'tsheet-warea-asheet-open-ico':dpDateOpen,'tsheet-warea-asheet-close-ico':!dpDateOpen}\" class=\"sheriff-ico tsheet-addtsheet-item-addtsheet-ico\" name=\"chevron-forward\"></ion-icon>\n                            </ion-col>\n                        </ion-row>\n                        <ion-row class=\"tsheet-addtsheet-item-row date-time-inner-row time-row\">\n                            <ion-col size=\"6\" class=\"tsheet-addtsheet-item-col date-time-inner-col starttime-col\">\n                                <div class=\"tsheet-addtsheet-item-data-label starttime\">Start</div>\n                                <div (click)=\"openDP('stime')\" class=\"tsheet-addtsheet-time-input-wrapper starttime ion-activatable ripple-parent\">\n                                    <div *ngIf=\"addTSFormData.stime.txt!==null\" class=\"tsheet-addtsheet-item-data-value starttime\">{{addTSFormData.stime.txt}}</div>\n                                    <div *ngIf=\"addTSFormData.stime.txt===null\" class=\"tsheet-addtsheet-item-data-value starttime default\">Select Start Time</div>\n                                    <ion-icon *ngIf=\"newTSInputErr==='start'\" class=\"addtsheet-inputerr-ico start\" name=\"alert-circle-outline\"></ion-icon>\n                                    <ion-ripple-effect></ion-ripple-effect>\n                                </div>\n                            </ion-col>\n                            <ion-col size=\"6\" class=\"tsheet-addtsheet-item-col date-time-inner-col endtime-col\">\n                                <div class=\"tsheet-addtsheet-item-data-label endtime\">End</div>\n                                <div (click)=\"openDP('etime')\" class=\"tsheet-addtsheet-time-input-wrapper endtime ion-activatable ripple-parent\">\n                                    <div *ngIf=\"addTSFormData.etime.txt!==null\" class=\"tsheet-addtsheet-item-data-value endtime\">{{addTSFormData.etime.txt}}</div>\n                                    <div *ngIf=\"addTSFormData.etime.txt===null\" class=\"tsheet-addtsheet-item-data-value endtime default\">Select End Time</div>\n                                    <ion-icon *ngIf=\"newTSInputErr==='end'\" class=\"addtsheet-inputerr-ico end\" name=\"alert-circle-outline\"></ion-icon>\n                                    <ion-ripple-effect></ion-ripple-effect>\n                                </div>\n                            </ion-col>\n                        </ion-row>\n                        <ion-row (click)=\"editNewBreaks()\" class=\"tsheet-addtsheet-item-row date-time-inner-row breaks-row ion-activatable ripple-parent\">\n                            <ion-col size=\"10\" class=\"tsheet-addtsheet-item-col date-time-inner-col breakstaken-col\">\n                                <div class=\"tsheet-addtsheet-item-data-label breakstaken\">Breaks</div>\n                                <div class=\"tsheet-addtsheet-item-data-value breakstakencount\">\n                                    <span class=\"tsheet-addtsheet-breaks-value mbreaktotal\">{{addTSFormData.breaks.values.summary.r}}</span>\n                                    <span class=\"tsheet-addtsheet-breaks-type-lbl rest-lbl\">Rest</span>\n                                    <span class=\"tsheet-addtsheet-breaks-sep\">|</span>\n                                    <span class=\"tsheet-addtsheet-breaks-value mbreaktotal\">{{addTSFormData.breaks.values.summary.m}}</span>\n                                    <span class=\"tsheet-addtsheet-breaks-type-lbl rest-lbl\">Meal</span>\n                                    <span class=\"tsheet-addtsheet-breaks-equals\">=</span>\n                                    <span class=\"tsheet-addtsheet-breaks-total-time-value\">\n                                      <span class=\"tsheet-addtsheet-breaks-tt-value\">\n                                        <span *ngIf=\"addTSFormData.breaks.values.summary.dur.hours>0\" class=\"tsheet-detail-tt-value hrs\">\n                                          {{addTSFormData.breaks.values.summary.dur.hours}}\n                                          <span class=\"tt-suffix hrs\">hrs</span>\n                                    </span>\n                                    <span *ngIf=\"addTSFormData.breaks.values.summary.dur.minutes>0\" class=\"tsheet-detail-tt-value mins\">\n                                          {{addTSFormData.breaks.values.summary.dur.minutes}}\n                                          <span class=\"tt-suffix mins\">mins</span>\n                                    </span>\n                                    </span>\n                                    <span *ngIf=\"showTTLBreakMins&&addTSFormData.breaks.values.summary.dur.minutes===0\" class=\"show-ttl-break-mins-span\"><span class=\"defaultzer0\" style=\"font-size:16px\">0</span>mins</span>\n                                    </span>\n                                </div>\n                            </ion-col>\n                            <ion-col size=\"2\" class=\"sheriff-col tsheet-addtsheet-item-col breaks-addtsheet-col\">\n                                <ion-icon class=\"sheriff-ico tsheet-addtsheet-item-addtsheet-ico breaks-addtsheet\" name=\"chevron-forward\"></ion-icon>\n                            </ion-col>\n                            <ion-ripple-effect></ion-ripple-effect>\n                        </ion-row>\n                        <ion-row class=\"tsheet-addtsheet-item-row date-time-inner-row total-time-col\">\n                            <ion-col size=\"12\" class=\"tsheet-addtsheet-item-col date-time-inner-col totaltime-col\">\n                                <div class=\"tsheet-addtsheet-item-data-label totaltime\">Total Time</div>\n                                <div class=\"tsheet-addtsheet-item-data-value totaltime\">\n                                    <div *ngIf=\"newTSInputErr!=='start'&&newTSInputErr!=='end'\" class=\"tsheet-addtsheet-tt-main-wrapper\">\n                                        <span *ngIf=\"!(addTSFormData.ttime.hours===0&&addTSFormData.ttime.minutes===0)\" class=\"tsheet-addtsheet-tt-value\">\n                                    <span *ngIf=\"addTSFormData.ttime.hours>0\" class=\"tsheet-addtsheet-tt-value hrs\">{{addTSFormData.ttime.hours}}<span class=\"tt-suffix hrs\">hrs</span></span>\n                                        <span *ngIf=\"addTSFormData.ttime.minutes>0\" class=\"tsheet-addtsheet-tt-value mins\">{{addTSFormData.ttime.minutes}}<span class=\"tt-suffix mins\">mins</span></span>\n                                        </span>\n                                        <div *ngIf=\"addTSFormData.ttime.hours===0&&addTSFormData.ttime.minutes===0\" class=\"tsheet-addtsheet-tt-default\">Calculated Automatically</div>\n                                    </div>\n                                    <div *ngIf=\"newTSInputErr==='start'||newTSInputErr==='end'\" class=\"tsheet-addtsheet-error-msg-wrapper\">\n                                        <ion-icon class=\"addtsheet-error-ico\" name=\"warning\"></ion-icon>\n                                        <div class=\"addtsheet-err-txt\">\n                                            <span *ngIf=\"newTSInputErr==='start'\" class=\"startafterend\">Start Time<ion-icon name=\"chevron-forward-outline\"></ion-icon>End</span>\n                                            <span *ngIf=\"newTSInputErr==='end'\" class=\"endbeforestart\">End Time<ion-icon name=\"chevron-back-outline\"></ion-icon>Start</span>\n                                        </div>\n                                    </div>\n                                </div>\n                            </ion-col>\n                        </ion-row>\n                    </ion-grid>\n                </ion-col>\n            </ion-row>\n            <ion-row class=\"tsheet-addtsheet-item-row comments\">\n                <ion-col size=\"2\" class=\"sheriff-col tsheet-addtsheet-item-col comments ico-col\">\n                    <ion-icon class=\"sheriff-ico tsheet-addtsheet-item-main-ico comments-ico tsheet-detail-item-main-ico\" name=\"chatbox\"></ion-icon>\n                </ion-col>\n                <ion-col size=\"10\" class=\"sheriff-col tsheet-addtsheet-item-col area-at-workplace-col data-col\">\n                    <div class=\"tsheet-addtsheet-item-data-label comments\">Comments</div>\n                    <div class=\"tsheet-addtsheet-comment-type-wrapper employee\">\n                        <ion-input (ionBlur)=\"updateComments()\" type=\"text\" placeholder={{addTSFormData.comments.pholder}} mode=\"md\" inputmode=\"text\" clearInput=\"true\" clearOnEdit=\"false\" class=\"tsheet-addtsheet-comment-input\" value={{addTSFormData.comments.content}}></ion-input>\n                    </div>\n                </ion-col>\n            </ion-row>\n        </ion-grid>\n\n    </div>\n\n</ion-content>");

/***/ }),

/***/ 51335:
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/modals/detail/tsheet-detail/tsheet-breaks/tsheet-breaks.page.html ***!
  \*************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-header class=\"sheriff-header sheriff-tabpage-header\">\n    <ion-toolbar class=\"sheriff-toolbar\">\n        <div class=\"sheriff-header-background-wrapper\">\n            <div class=\"sheriff-header-droidstatus-padding-wrapper\"></div>\n            <div class=\"sheriff-header-background-inner-wrapper\">\n                <ion-grid class=\"sheriff-grid sheriff-page-header-grid detailmodalheader-grid\">\n                    <ion-row class=\"sheriff-row sheriff-page-header-row detailmodalheader-row\">\n                        <ion-col (click)=\"closeBreaks()\" class=\"sheriff-col detail-header-col close-btn-col ion-activatable ripple-parent\">\n                            <div class=\"sheriff-detail-header-btn-wrapper close-btn\">\n                                <ion-icon class=\"sheriff-detail-header-ico close-btn-ico\" name=\"arrow-back\"></ion-icon>\n                            </div>\n                            <ion-ripple-effect></ion-ripple-effect>\n                        </ion-col>\n                        <ion-col class=\"sheriff-col detail-header-col title-col\">\n                            <div class=\"sheriff-detail-header title-wrapper breaks\">\n                                <span class=\"tsdetail-title-prefix breaks\">Breaks</span>\n                                <span class=\"tsdetail-title-breaks-count title-bc-ani\">({{breaks.length}})</span>\n                                <span class=\"tsdetail-title-breaks-ttime\">\n                                  <span class=\"tsdetail-title-breaks-ttime scolon\">:</span>\n                                <span class=\"tsdetail-title-breaks-ttime value title-bc-ani\">\n                                    <span *ngIf=\"totalTime.hours>0\" class=\"breaks-tt-wrapper hours\">\n                                        <span class=\"breaks-tt-hours-val\">{{totalTime.hours}}</span>\n                                <span class=\"breaks-tt-hours-suffix\">hrs</span>\n                                </span>\n                                <span class=\"breaks-tt-wrapper minutes\">\n                                        <span class=\"breaks-tt-minutes-val\">{{totalTime.minutes}}</span>\n                                <span class=\"breaks-tt-minutes-suffix\">mins</span>\n                                </span>\n                                </span>\n                                </span>\n                            </div>\n                        </ion-col>\n                        <ion-col (click)=\"saveBreaks(false)\" class=\"sheriff-col detail-header-col share-btn-col ion-activatable ripple-parent\">\n                            <div class=\"shouldsave-indic-wrapper\">\n                                <ion-icon *ngIf=\"shouldSave\" class=\"shouldsave-indic-ico animate__animated animate__fadeIn\" name=\"ellipse\"></ion-icon>\n                            </div>\n                            <div class=\"sheriff-detail-header-btn-wrapper share-btn\">\n                                <ion-icon class=\"sheriff-detail-header-ico save-btn-ico\" name=\"save\"></ion-icon>\n                            </div>\n                            <ion-ripple-effect></ion-ripple-effect>\n                        </ion-col>\n                    </ion-row>\n                </ion-grid>\n            </div>\n        </div>\n    </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"tsheet-detail-content tsheet-detail-breaksmodal\">\n\n    <div class=\"tsheet-detail-bground-wrapper\"></div>\n    <div *ngIf=\"breaks.length===0&&newBreaks.length===0\" class=\"tsheet-detail-breaks nobreaks-wrapper\">\n        <div *ngIf=\"mode==='details'\" class=\"tsheet-detail-breaks no-breaks-txt\">\n            No Breaks Found\n        </div>\n        <div *ngIf=\"mode==='addtsheet'\" class=\"tsheet-detail-breaks no-breaks-txt\">\n            Add New Breaks\n        </div>\n    </div>\n\n    <div *ngIf=\"breaks.length>0||newBreaks.length>0\" class=\"tsheet-detail-added-breaks-main-wrapper\">\n        <ion-grid *ngFor=\"let break of breaks; let i = index\" [class.halfbrightness]=\"newBreakActive\" class=\"tsheet-detail-breaks-item-grid taken-grid {{mode}} break{{i}}\">\n            <ion-row class=\"sheriff-row tsheet-breaks-row taken-detail-row break-title-row\">\n                <ion-col size=\"6\" class=\"sheriff-col tsheet-breaks-col taken-detail-col break-title-col\">\n                    <div class=\"break-item-title\">\n                        <span class=\"break-item-title name-value save-data\">{{break.typeName}}</span>\n                        <span *ngIf=\"break.type==='Paid'||break.type==='Unpaid'\" class=\"break-item-title type-value save-data\">({{break.type}})</span>\n                    </div>\n                </ion-col>\n                <ion-col size=\"6\" class=\"sheriff-col tsheet-breaks-col taken-detail-col break-status-col\">\n                    <div *ngIf=\"break.status==='taken'\" class=\"break-item-status taken save-data\">Taken</div>\n                    <div *ngIf=\"break.status==='nottaken'\" class=\"break-item-status nottaken save-data\">Not Taken</div>\n                    <div *ngIf=\"break.status==='mandatory'\" class=\"break-item-status auto save-data\">Mandatory</div>\n                </ion-col>\n            </ion-row>\n            <ion-row class=\"sheriff-row tsheet-breaks-row taken-detail-row break-duration-row\">\n                <ion-col size=\"12\" class=\"sheriff-col tsheet-breaks-col taken-detail-col break-duration-col\">\n                    <div class=\"tsheet-breaks-subtitle-div breaktime\">\n                        Duration\n                    </div>\n                    <div class=\"tsheet-breaks-val break-duration save-data isnew\">\n                        <span class=\"tsheets-breaks-val save-data duration-value new-break calcdur\">\n                        <span *ngIf=\"break.duration.hours>0\" class=\"newbreak calcdur hours-wrap\">\n                          <span class=\"newbreak calcdur val-span hours-val\">{{break.duration.hours}}</span>\n                        <span class=\"newbreak calcdur suf-span hours-suffix\">hrs</span>\n                        </span>\n                        <span class=\"newbreak calcdur minutes-wrap\">\n                          <span class=\"newbreak calcdur val-span minutes-val\">{{break.duration.minutes}}</span>\n                        <span class=\"newbreak calcdur suf-span minutes-suffix\">mins</span>\n                        </span>\n                        </span>\n                    </div>\n                </ion-col>\n            </ion-row>\n            <ion-row class=\"sheriff-row tsheet-breaks-row taken-detail-row break-startend-row\">\n                <ion-col size=\"6\" class=\"sheriff-col tsheet-breaks-col taken-detail-col break-startend-col start-col\">\n                    <div class=\"tsheet-breaks-subtitle-div break-startend-sub start-sub\">\n                        Start Time\n                    </div>\n                    <div class=\"tsheet-breaks-data-div break-startend-data start-data tsheet-breaks-val save-data\">\n                        {{break.startNice}}\n                    </div>\n                </ion-col>\n                <ion-col size=\"6\" class=\"sheriff-col tsheet-breaks-col taken-detail-col break-startend-col end-col\">\n                    <div class=\"tsheet-breaks-subtitle-div break-startend-sub end-sub\">\n                        End Time\n                    </div>\n                    <div class=\"tsheet-breaks-data-div break-startend-data end-data tsheet-breaks-val save-data\">\n                        {{break.endNice}}\n                    </div>\n                </ion-col>\n            </ion-row>\n            <ion-row class=\"sheriff-row tsheet-breaks-row taken-detail-row break-type-list-row\">\n                <ion-col size=\"12\" class=\"sheriff-col tsheet-breaks-col taken-detail-col break-breaktype-col breaktype-col\">\n                    <div class=\"tsheet-breaks-subtitle-div break-breaktype-sub\">\n                        Type\n                    </div>\n                    <div class=\"tsheet-breaks-data-div breaks-type-list-wrapper\">\n                        <div *ngIf=\"break.breakType==='R'\" class=\"tsheet-detail-breaks break-type-item rest-break\">\n                            <span class=\"tsheet-detail-breaks break-type-item-label rest-break-label\">\n                              <ion-icon class=\"tsheet-detail-breaks break-type-item-ico\" name=\"radio-button-on\"></ion-icon>\n                              <span class=\"tsheet-detail-breaks break-type-item-label-txt rest-break\">Rest Break</span>\n                            <span *ngIf=\"break.type==='Paid'||break.type==='Unpaid'\" class=\"paidtypecode\">({{break.type}})</span>\n                            </span>\n                        </div>\n                        <div *ngIf=\"break.breakType==='M'\" class=\"tsheet-detail-breaks break-type-item meal-break\">\n                            <span class=\"tsheet-detail-breaks break-type-item-label meal-break-label\">\n                              <ion-icon class=\"tsheet-detail-breaks break-type-item-ico\" name=\"radio-button-on\"></ion-icon>\n                              <span class=\"tsheet-detail-breaks break-type-item-label-txt meal-break\">Meal Break</span>\n                            <span *ngIf=\"break.type==='Paid'||break.type==='Unpaid'\" class=\"paidtypecode\">({{break.type}})</span>\n                            </span>\n                        </div>\n                    </div>\n                </ion-col>\n            </ion-row>\n\n        </ion-grid>\n\n        <ion-grid *ngFor=\"let newBreak of newBreaks; let i = index\" class=\"tsheet-detail-breaks-item-grid new-break-grid {{mode}} break{{i}}\">\n            <ion-row class=\"sheriff-row tsheet-breaks-row taken-detail-row break-title-row new-break-row\">\n                <ion-col size=\"6\" class=\"sheriff-col tsheet-breaks-col taken-detail-col break-title-col new-break-col\">\n                    <div class=\"break-item-title\">\n                        <span class=\"break-item-title name-value save-data new-break\">{{newBreak.typeName}}</span>\n                    </div>\n                </ion-col>\n                <ion-col size=\"6\" class=\"sheriff-col tsheet-breaks-col taken-detail-col break-status-col new-break\">\n                    <div *ngIf=\"newBreak.status==='taken'\" class=\"break-item-status taken save-data new-break\">Taken</div>\n                    <div *ngIf=\"newBreak.status==='nottaken'\" class=\"break-item-status nottaken save-data new-break\">Not Taken</div>\n                    <div *ngIf=\"newBreak.status==='mandatory'\" class=\"break-item-status auto save-data new-break\">Mandatory</div>\n                </ion-col>\n            </ion-row>\n            <ion-row class=\"sheriff-row tsheet-breaks-row taken-detail-row break-duration-row new-break\">\n                <ion-col size=\"12\" class=\"sheriff-col tsheet-breaks-col taken-detail-col break-duration-col new-break\">\n                    <div class=\"tsheet-breaks-subtitle-div breaktime\">\n                        Duration\n                    </div>\n                    <div class=\"tsheet-breaks-val break-duration save-data\">\n                        <span *ngIf=\"newBreak.duration==='-'\" class=\"tsheets-breaks-val save-data duration-value new-break defaultdur\">{{newBreak.duration}}</span>\n                        <span *ngIf=\"newBreak.duration!=='-'\" class=\"tsheets-breaks-val save-data duration-value new-break calcdur\">\n                          <span *ngIf=\"newBreak.duration.hours>0\" class=\"newbreak calcdur hours-wrap\">\n                            <span class=\"newbreak calcdur val-span hours-val\">{{newBreak.duration.hours}}</span>\n                        <span class=\"newbreak calcdur suf-span hours-suffix\">hrs</span>\n                        </span>\n                        <span class=\"newbreak calcdur minutes-wrap\">\n                            <span class=\"newbreak calcdur val-span minutes-val\">{{newBreak.duration.minutes}}</span>\n                        <span class=\"newbreak calcdur suf-span minutes-suffix\">mins</span>\n                        </span>\n                        </span>\n                    </div>\n                </ion-col>\n            </ion-row>\n            <ion-row class=\"sheriff-row tsheet-breaks-row taken-detail-row break-startend-row\">\n                <ion-col size=\"6\" class=\"sheriff-col tsheet-breaks-col taken-detail-col break-startend-col start-col\">\n                    <div class=\"tsheet-breaks-subtitle-div break-startend-sub start-sub\">\n                        Start Time\n                    </div>\n                    <div *ngIf=\"newBreak.startNice==='Select Time'\" (click)=\"openTimeSelect(newBreak.index,'start')\" class=\"tsheet-breaks-data-div break-startend-data start-data tsheet-breaks-val save-data new-break selecttime ion-activatable ripple-parent\">\n                        <img src=\"../../../../../assets/img/sheriff-touch-ico.png\" class=\"tsheet-details-breaks-newbreak-tapico start\"> {{newBreak.startNice}}\n                        <ion-ripple-effect></ion-ripple-effect>\n                    </div>\n                    <div *ngIf=\"newBreak.startNice!=='Select Time'\" (click)=\"openTimeSelect(newBreak.index,'start')\" class=\"tsheet-breaks-data-div break-startend-data start-data tsheet-breaks-val save-data new-break ion-activatable ripple-parent\">\n                        {{newBreak.startNice}}\n                        <ion-icon *ngIf=\"newBInputErr==='start'\" class=\"newbreak-inputerr-ico start\" name=\"alert-circle-outline\"></ion-icon>\n                        <ion-ripple-effect></ion-ripple-effect>\n                    </div>\n                </ion-col>\n                <ion-col size=\"6\" class=\"sheriff-col tsheet-breaks-col taken-detail-col break-startend-col end-col\">\n                    <div class=\"tsheet-breaks-subtitle-div break-startend-sub end-sub\">\n                        End Time\n                    </div>\n                    <div *ngIf=\"newBreak.endNice==='Select Time'\" (click)=\"openTimeSelect(newBreak.index,'end')\" class=\"tsheet-breaks-data-div break-startend-data end-data tsheet-breaks-val save-data new-break selecttime ion-activatable ripple-parent\">\n                        <img src=\"../../../../../assets/img/sheriff-touch-ico.png\" class=\"tsheet-details-breaks-newbreak-tapico end\"> {{newBreak.endNice}}\n                        <ion-ripple-effect></ion-ripple-effect>\n                    </div>\n                    <div *ngIf=\"newBreak.endNice!=='Select Time'\" (click)=\"openTimeSelect(newBreak.index,'end')\" class=\"tsheet-breaks-data-div break-startend-data end-data tsheet-breaks-val save-data new-break ion-activatable ripple-parent\">\n                        {{newBreak.endNice}}\n                        <ion-icon *ngIf=\"newBInputErr==='end'\" class=\"newbreak-inputerr-ico end\" name=\"alert-circle-outline\"></ion-icon>\n                        <ion-ripple-effect></ion-ripple-effect>\n                    </div>\n                </ion-col>\n            </ion-row>\n            <ion-row class=\"sheriff-row tsheet-breaks-row taken-detail-row break-startend-row\">\n                <ion-col size=\"12\" class=\"sheriff-col tsheet-breaks-col taken-detail-col break-breaktype-col breaktype-col\">\n                    <div class=\"tsheet-breaks-subtitle-div break-breaktype-sub\">\n                        Type\n                    </div>\n                    <div class=\"tsheet-breaks-data-div breaks-type-list-wrapper\">\n                        <ion-radio-group ngModal #breakTypeRG (ionChange)=\"selectBreakType(newBreak.index,breakTypeRG.value)\" allowEmptySelection=\"false\" name=\"breakNameTypeVal\" value={{newBreak.breakType}} class=\"sheriff-radio-group tsheet-detail-breaks break-type-radio-group-{{newBreak.index}}\">\n                            <ion-item button=\"true\" (click)=\"breakTypeBtn(newBreak.index,'R')\" class=\"tsheet-detail-breaks break-type-radio-item rest-break\">\n                                <ion-label class=\"tsheet-detail-breaks break-type-radio-item-label rest-break-label\">Rest Break</ion-label>\n                                <ion-radio disabled=\"false\" value=\"R\" class=\"tsheet-detail-breaks break-type-radio rest-break-radio\"></ion-radio>\n                            </ion-item>\n                            <ion-item button=\"true\" (click)=\"breakTypeBtn(newBreak.index,'M')\" class=\"tsheet-detail-breaks break-type-radio-item meal-break\">\n                                <ion-label class=\"tsheet-detail-breaks break-type-radio-item-label meal-break-label\">Meal Break</ion-label>\n                                <ion-radio disabled=\"false\" value=\"M\" class=\"tsheet-detail-breaks break-type-radio meal-break-radio\"></ion-radio>\n                            </ion-item>\n                        </ion-radio-group>\n                    </div>\n                </ion-col>\n            </ion-row>\n            <ion-row class=\"sheriff-row tsheet-breaks-row newbreak-row delete-newbreak-row\">\n                <ion-col size=\"6\" class=\"sheriff-col tsheet-breaks-col newbreak-col delete-newbreak-col filler-col\">\n                    <div *ngIf=\"newBInputErr==='start'||newBInputErr==='end'\" class=\"tsheet-breaks-error-msg-wrapper\">\n                        <ion-icon class=\"break-error-ico\" name=\"warning\"></ion-icon>\n                        <div class=\"break-err-txt\">\n                            <span *ngIf=\"newBInputErr==='start'\" class=\"startafterend\">Start Time<ion-icon name=\"chevron-forward-outline\"></ion-icon>End</span>\n                            <span *ngIf=\"newBInputErr==='end'\" class=\"endbeforestart\">End Time<ion-icon name=\"chevron-back-outline\"></ion-icon>Start</span>\n                        </div>\n                    </div>\n                </ion-col>\n                <ion-col size=\"6\" class=\"sheriff-col tsheet-breaks-col newbreak-col delete-newbreak-col btns-col\">\n                    <ion-button (click)=\"deleteNewBreak(newBreak.index)\" class=\"newbreak-btn delete-newbreak-btn\">\n                        <div class=\"new-break-btn-txt delete-txt\">Delete</div>\n                    </ion-button>\n                    <ion-button disabled=\"true\" (click)=\"addBreak(newBreak.index)\" class=\"newbreak-btn save-newbreak-btn\">\n                        <div class=\"new-break-btn-txt save-txt\">Add</div>\n                    </ion-button>\n                </ion-col>\n            </ion-row>\n        </ion-grid>\n\n    </div>\n\n    <ion-fab (click)=\"newBreak()\" *ngIf=\"ts.nTimeApproved!==true\" class=\"sheriff-fab addbreak-fab\" vertical=\"bottom\" horizontal=\"end\" slot=\"fixed\">\n        <ion-fab-button class=\"sheriff-fab-button addtsheet-fab-btn\">\n            <img class=\"sheriff-fab-btn-img addbreak-fab-btn-img\" src=\"../../../assets/img/sheriff-fab-addtsheetbreak-ico.png\">\n        </ion-fab-button>\n    </ion-fab>\n\n</ion-content>");

/***/ }),

/***/ 79649:
/*!***********************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/modals/detail/tsheet-detail/tsheet-detail.page.html ***!
  \***********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-header class=\"sheriff-header sheriff-tabpage-header\">\n    <ion-toolbar class=\"sheriff-toolbar\">\n        <div class=\"sheriff-header-background-wrapper\">\n            <div class=\"sheriff-header-droidstatus-padding-wrapper\"></div>\n            <div class=\"sheriff-header-background-inner-wrapper\">\n                <ion-grid class=\"sheriff-grid sheriff-page-header-grid detailmodalheader-grid\">\n                    <ion-row class=\"sheriff-row sheriff-page-header-row detailmodalheader-row\">\n                        <ion-col (click)=\"closeDetail()\" class=\"sheriff-col detail-header-col close-btn-col ion-activatable ripple-parent\">\n                            <div class=\"sheriff-detail-header-btn-wrapper close-btn\">\n                                <ion-icon class=\"sheriff-detail-header-ico close-btn-ico\" name=\"arrow-back\"></ion-icon>\n                            </div>\n                            <ion-ripple-effect></ion-ripple-effect>\n                        </ion-col>\n                        <ion-col class=\"sheriff-col detail-header-col title-col\">\n                            <div class=\"sheriff-detail-header title-wrapper\">\n                                <span class=\"tsdetail-title-prefix\">Timesheet</span><span class=\"tsdetail-title-hash\">#</span><span class=\"tsdetail-title-idno\">{{ts.Id}}</span>\n                            </div>\n                        </ion-col>\n                        <ion-col *ngIf=\"!ts.nIsInProgress&&!ts.nTimeApproved&&!ts.nDisputed&&!ts.nDiscarded\" (click)=\"openPop($event)\" class=\"sheriff-col detail-header-col share-btn-col ion-activatable ripple-parent\">\n                            <div class=\"shouldsave-indic-wrapper\">\n                                <ion-icon *ngIf=\"shouldSave\" class=\"shouldsave-indic-ico animate__animated animate__fadeIn\" name=\"ellipse\"></ion-icon>\n                            </div>\n                            <div *ngIf=\"!popOpen\" class=\"sheriff-detail-header-btn-wrapper edit-btn\">\n                                <ion-icon class=\"sheriff-detail-header-ico share-btn-ico\" name=\"create\"></ion-icon>\n                            </div>\n                            <ion-ripple-effect></ion-ripple-effect>\n                        </ion-col>\n                        <ion-col (click)=\"shareTS()\" class=\"sheriff-col detail-header-col share-btn-col ion-activatable ripple-parent\">\n                            <div class=\"sheriff-detail-header-btn-wrapper share-btn\">\n                                <ion-icon class=\"sheriff-detail-header-ico share-btn-ico\" name=\"share\"></ion-icon>\n                            </div>\n                            <ion-ripple-effect></ion-ripple-effect>\n                        </ion-col>\n                    </ion-row>\n                </ion-grid>\n            </div>\n        </div>\n    </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"tsheet-detail-content tsheet-detail-modal\">\n    <div class=\"tsheet-detail-bground-wrapper\"></div>\n    <div class=\"tsheet-detail-main-wrapper\">\n        <div *ngIf=\"wasChanged\" class=\"tsheet-detail-updated-banner-wrapper\">{{updateSaveBannerTxt}}</div>\n        <ion-grid class=\"tsheet-detail-item-grid heading-grid\">\n            <ion-row class=\"tsheet-detail-item-row heading-row\">\n                <ion-col size=\"2\" class=\"sheriff-detail-item-grid heading-ico-col\">\n                    <img class=\"sheriff-detail-heading-ico tsheet-heading-ico\" src=\"../../../../assets/img/sheriff-totaltimespan-ico-white.png\">\n                </ion-col>\n                <ion-col size=\"8\" class=\"sheriff-detail-item-grid heading-text-col\">\n                    <div class=\"sheriff-detail-heading-txt tsheet-heading-txt\">timesheet details</div>\n                </ion-col>\n                <ion-col size=\"2\" class=\"sheriff-detail-item-grid heading-ico-col\">\n                    <img class=\"sheriff-detail-heading-avatar tsheet-heading-avatar\" src=\"{{meAvatar}}\">\n                </ion-col>\n            </ion-row>\n        </ion-grid>\n\n        <ion-grid class=\"tsheet-detail-item-grid data-grid\">\n            <ion-row class=\"tsheet-detail-item-row status\">\n                <ion-col size=\"12\" class=\"sheriff-col tsheet-detail-item-col status\">\n                    <span *ngIf=\"!ts.nIsInProgress&&!ts.nTimeApproved&&!ts.nDisputed&&!ts.nDiscarded\" style=\"color:#ff9800db\" class=\"tsheet-status pending\">Pending</span>\n                    <span *ngIf=\"ts.nIsInProgress\" style=\"color:#ff9800db\" class=\"tsheet-status inprog\">Underway</span>\n                    <span *ngIf=\"ts.nTimeApproved\" style=\"color:#2dd36fdb\" class=\"tsheet-status approved\">Approved</span>\n                    <span *ngIf=\"ts.nDisputed\" style=\"color:#f44034db\" class=\"tsheet-status disputed\">Disputed</span>\n                    <span *ngIf=\"ts.nDiscarded\" style=\"color:#f44034db\" class=\"tsheet-status discarded\">Discarded</span>\n                </ion-col>\n            </ion-row>\n            <ion-row (click)=\"editArea(ts.OperationalUnit)\" class=\"tsheet-detail-item-row area-at-workplace ion-activatable ripple-parent\">\n                <ion-col size=\"2\" class=\"sheriff-col tsheet-detail-item-col area-at-workplace-col ico-col\">\n                    <ion-icon class=\"sheriff-ico tsheet-detail-item-main-ico areaatworkplace-ico\" name=\"locate\"></ion-icon>\n                </ion-col>\n                <ion-col size=\"8\" class=\"sheriff-col tsheet-detail-item-col area-at-workplace-col data-col\">\n                    <div class=\"tsheet-detail-item-data-label area-at-workplace\">Area at {{ts.nCompanyName}}</div>\n                    <div class=\"tsheet-detail-item-data-value area-at-workplace\">{{ts.nOperationalUnit}}</div>\n                </ion-col>\n                <ion-col size=\"2\" class=\"sheriff-col tsheet-detail-item-col area-at-workplace-col detail-col\">\n                    <ion-icon *ngIf=\"!ts.nTimeApproved\" [ngClass]=\"{'tsheet-warea-asheet-open-ico':aSheetOpen,'tsheet-warea-asheet-close-ico':!aSheetOpen}\" class=\"sheriff-ico tsheet-detail-item-detail-ico area-at-workplace\" name=\"chevron-forward\"></ion-icon>\n                </ion-col>\n                <ion-ripple-effect></ion-ripple-effect>\n            </ion-row>\n            <ion-row class=\"tsheet-detail-item-row date-time\">\n                <ion-col size=\"2\" class=\"sheriff-col tsheet-detail-item-col date-time-col ico-col\">\n                    <img class=\"sheriff-ico tsheet-detail-item-main-ico date-time-ico\" src=\"../../../../assets/img/sheriff-tsheet-detail-datetime-ico.png\">\n                    <div class=\"tsheet-detail-datetime-icon-wrapper time\">\n                        <ion-icon class=\"sheriff-ico tsheet-detail-item-main-ico startendtime-ico\" name=\"stopwatch\"></ion-icon>\n                    </div>\n                    <div class=\"tsheet-detail-datetime-icon-wrapper breaks\">\n                        <ion-icon class=\"sheriff-ico tsheet-detail-item-main-ico breaks-ico\" name=\"pause\"></ion-icon>\n                    </div>\n                    <div class=\"tsheet-detail-datetime-icon-wrapper tt\">\n                        <ion-icon class=\"sheriff-ico tsheet-detail-item-main-ico tt-ico\" name=\"calculator\"></ion-icon>\n                    </div>\n                </ion-col>\n                <ion-col size=\"10\" class=\"sheriff-col tsheet-detail-item-col date-time-col data-col\">\n                    <ion-grid class=\"tsheet-detail-item-grid datetime-grid\">\n                        <ion-row class=\"tsheet-detail-item-row date-time-inner-row date-row\">\n                            <ion-col size=\"12\" class=\"tsheet-detail-item-col date-time-inner-col date-col\">\n                                <div class=\"tsheet-detail-item-data-label date\">Date</div>\n                                <div class=\"tsheet-detail-item-data-value date\">{{ts.nDate}}</div>\n                            </ion-col>\n                        </ion-row>\n                        <ion-row class=\"tsheet-detail-item-row date-time-inner-row time-row\">\n                            <ion-col size=\"6\" class=\"tsheet-detail-item-col date-time-inner-col starttime-col\">\n                                <div class=\"tsheet-detail-item-data-label starttime\">Start</div>\n                                <div class=\"tsheet-detail-item-data-value starttime\">{{ts.nStartTime}}</div>\n                            </ion-col>\n                            <ion-col size=\"6\" class=\"tsheet-detail-item-col date-time-inner-col endtime-col\">\n                                <div class=\"tsheet-detail-item-data-label endtime\">End</div>\n                                <div class=\"tsheet-detail-item-data-value endtime\">{{ts.nEndTime}}</div>\n                            </ion-col>\n                        </ion-row>\n                        <ion-row (click)=\"editBreaks()\" class=\"tsheet-detail-item-row date-time-inner-row breaks-row ion-activatable ripple-parent\">\n                            <ion-col size=\"10\" class=\"tsheet-detail-item-col date-time-inner-col breakstaken-col\">\n                                <div class=\"tsheet-detail-item-data-label breakstaken\">Breaks Taken</div>\n                                <div class=\"tsheet-detail-item-data-value breakstakencount\">\n                                    <span class=\"tsheet-detail-breaks-value mbreaktotal\">{{rBreakCount}}</span>\n                                    <span class=\"tsheet-detail-breaks-type-lbl rest-lbl\">Rest</span>\n                                    <span class=\"tsheet-detail-breaks-sep\">|</span>\n                                    <span class=\"tsheet-detail-breaks-value mbreaktotal\">{{mBreakCount}}</span>\n                                    <span class=\"tsheet-detail-breaks-type-lbl rest-lbl\">Meal</span>\n                                    <span class=\"tsheet-detail-breaks-equals\">=</span>\n                                    <span class=\"tsheet-detail-breaks-total-time-value\">{{breaksTtlDur}}<span *ngIf=\"showTTLBreakMins\" class=\"show-ttl-break-mins-span\">mins</span></span>\n                                </div>\n                            </ion-col>\n                            <ion-col size=\"2\" class=\"sheriff-col tsheet-detail-item-col breaks-detail-col\">\n                                <ion-icon class=\"sheriff-ico tsheet-detail-item-detail-ico breaks-detail\" name=\"chevron-forward\"></ion-icon>\n                            </ion-col>\n                            <ion-ripple-effect></ion-ripple-effect>\n                        </ion-row>\n                        <ion-row class=\"tsheet-detail-item-row date-time-inner-row total-time-col\">\n                            <ion-col size=\"12\" class=\"tsheet-detail-item-col date-time-inner-col totaltime-col\">\n                                <div class=\"tsheet-detail-item-data-label totaltime\">Total Time</div>\n                                <div class=\"tsheet-detail-item-data-value totaltime\">\n                                    <span class=\"tsheet-detail-tt-value\">\n                                      <span *ngIf=\"shiftDurObj.hours>0\" class=\"tsheet-detail-tt-value hrs\">{{shiftDurObj.hours}}<span class=\"tt-suffix hrs\">hrs</span></span>\n                                    <span *ngIf=\"shiftDurObj.minutes>0\" class=\"tsheet-detail-tt-value mins\">{{shiftDurObj.minutes}}<span class=\"tt-suffix mins\">mins</span></span>\n                                    </span>\n                                    <span class=\"tsheet-detail-tt-sep\">|</span>\n                                    <span *ngIf=\"TTPerformance!==0\" class=\"tsheet-detail-tt-plusminusroster\">\n                                      <div *ngIf=\"TTPerformance===1\" class=\"tt-pm-icons-wrapper plus\">\n                                        <ion-icon class=\"tsheet-detail-plusminusroster-ico plus upcaret\" name=\"caret-up\"></ion-icon>\n                                        <ion-icon class=\"tsheet-detail-plusminusroster-ico plus plussymbol\" name=\"add\"></ion-icon>\n                                      </div>\n                                      <div *ngIf=\"TTPerformance===-1\" class=\"tt-pm-icons-wrapper minus\">\n                                        <ion-icon class=\"tsheet-detail-plusminusroster-ico minus downcaret\" name=\"caret-down\"></ion-icon>\n                                        <ion-icon class=\"tsheet-detail-plusminusroster-ico minus minussymbol\" name=\"remove\"></ion-icon>\n                                      </div>\n                                      <span class=\"tsheet-detail-ttperformance-value-main-wrapper\">\n                                        <span [ngStyle]=\"{'color':TTPerformance===1?'#2dd36fad':'#f44336ad'}\" *ngIf=\"TTPerfValObj.hours!==0\">{{TTPerfValObj.hours}}<span class=\"tt-pm-suffix hrs\" [ngStyle]=\"{'color':TTPerformance===1?'#2dd36fad':'#f44336ad'}\">hrs</span></span>\n                                    <span [ngStyle]=\"{'color':TTPerformance===1?'#2dd36fad':'#f44336ad'}\" *ngIf=\"TTPerfValObj.minutes!==0\">{{TTPerfValObj.minutes}}<span class=\"tt-pm-suffix mins\" [ngStyle]=\"{'color':TTPerformance===1?'#2dd36fad':'#f44336ad'}\">mins</span></span>\n                                    </span>\n                                    </span>\n                                    <span *ngIf=\"TTPerformance===0\" class=\"tsheet-detail-tt-performance equal\">\n                                      <ion-icon class=\"tt-performance-equals-ico\" name=\"reorder-two\"></ion-icon>\n                                    </span>\n                                </div>\n                            </ion-col>\n                        </ion-row>\n                        <ion-row *ngIf=\"showIncome\" class=\"tsheet-detail-item-row date-time-inner-row income-row\">\n                            <ion-col size=\"12\" class=\"tsheet-detail-item-col date-time-inner-col income-row\">\n                                <div class=\"tsheet-detail-item-data-value income-wrapper\">\n                                    <span class=\"tsheet-detail income value-wrapper total\">\n                                      <span class=\"tsheet-detail income symbol-val dollar\">$</span>\n                                    <span class=\"tsheet-detail income income-val total\">{{ts.nIncome.t}}</span>\n                                    </span>\n                                    <span *ngIf=\"ts.nIncome.p>0\" class=\"tsheet-detail income value-wrapper breakdown\">\n                                      <span class=\"tsheet-detail income symbol-val brack\">(</span>\n                                    <span class=\"tsheet-detail income symbol-val v-label base\">B:</span>\n                                    <span class=\"tsheet-detail income income-val base\">{{ts.nIncome.b}}</span>\n                                    <span class=\"tsheet-detail income symbol-val plus\">+</span>\n                                    <span class=\"tsheet-detail income symbol-val v-label penalty\">P:</span>\n                                    <span class=\"tsheet-detail income income-val base\">{{ts.nIncome.p}}</span>\n                                    <span class=\"tsheet-detail income symbol-val brack\">)</span>\n                                    </span>\n                                </div>\n                            </ion-col>\n                        </ion-row>\n                    </ion-grid>\n                </ion-col>\n            </ion-row>\n            <ion-row class=\"tsheet-detail-item-row history\">\n                <ion-col size=\"12\" class=\"tsheet-detail-item-col history-col\">\n                    <ion-button (click)=\"viewHistory()\" class=\"sheriff-btn tsheet-detail-history-btn\">\n                        <div class=\"tsheet-detail-history-btn-wrapper\">\n                            <ion-icon class=\"tsheet-detail-history-btn-ico\" name=\"receipt\"></ion-icon>\n                            <div class=\"tsheet-detail-history-btn-txt\">View History</div>\n                        </div>\n                    </ion-button>\n                </ion-col>\n            </ion-row>\n            <ion-row class=\"tsheet-detail-item-row comments\">\n                <ion-col size=\"2\" class=\"sheriff-col tsheet-detail-item-col comments ico-col\">\n                    <ion-icon class=\"sheriff-ico tsheet-detail-item-main-ico comments-ico\" name=\"chatbox\"></ion-icon>\n                </ion-col>\n                <ion-col size=\"10\" class=\"sheriff-col tsheet-detail-item-col area-at-workplace-col data-col\">\n                    <div class=\"tsheet-detail-item-data-label comments\">Comments</div>\n                    <div *ngIf=\"noComments\" class=\"tsheet-detail-nocomments-wrapper\">\n                        <div class=\"tsheet-detail-nocomments-txt\">No Comments</div>\n                    </div>\n                    <div *ngIf=\"hasEmployeeComment\" class=\"tsheet-detail-comment-type-wrapper employee\">\n                        <div class=\"tsheet-detail-type-and-avatar-wrapper employee\">\n                            <div class=\"tsheet-detail-comment-type-label employee\">Employee</div>\n                            <ion-chip class=\"tsheet-detail-comment-avatar-chip employee\">\n                                <ion-avatar class=\"tsheet-detail-comment-avatar employee\">\n                                    <img class=\"tsheet-detail-comment-avatar-img employee\" src=\"{{meAvatar}}\">\n                                </ion-avatar>\n                                <ion-label class=\"tsheet-detail-comment-avatar-label employee\">You</ion-label>\n                            </ion-chip>\n                        </div>\n                        <div class=\"tsheet-detail-comment-text employee\">{{ts.EmployeeComment}}</div>\n                    </div>\n                    <div *ngIf=\"hasSupervisorComment\" class=\"tsheet-detail-comment-type-wrapper supervisor\">\n                        <div class=\"tsheet-detail-type-and-avatar-wrapper supervisor\">\n                            <div class=\"tsheet-detail-comment-type-label supervisor\">Supervisor</div>\n                            <ion-chip class=\"tsheet-detail-comment-avatar-chip supervisor\">\n                                <ion-avatar class=\"tsheet-detail-comment-avatar supervisor\">\n                                    <img [ngStyle]=\"{'opacity':(sVNK)?'.68':'1'}\" class=\"tsheet-detail-comment-avatar-img supervisor\" src=\"{{supervisorObj.avatar}}\">\n                                </ion-avatar>\n                                <ion-label class=\"tsheet-detail-comment-avatar-label supervisor\">{{supervisorObj.label}}</ion-label>\n                            </ion-chip>\n                        </div>\n                        <div class=\"tsheet-detail-comment-text employee\">{{ts.SupervisorComment}}</div>\n                    </div>\n                    <div *ngIf=\"hasInvoiceComment\" class=\"tsheet-detail-comment-type-wrapper invoice\">\n                        <div class=\"tsheet-detail-type-and-avatar-wrapper invoice\">\n                            <div class=\"tsheet-detail-comment-type-label supervisor\">Invoice</div>\n                            <ion-chip class=\"tsheet-detail-comment-avatar-chip invoice\">\n                                <ion-avatar class=\"tsheet-detail-comment-avatar invoice\">\n                                    <img class=\"tsheet-detail-comment-avatar-img invoice\" src=\"../../../../assets/img/sheriff-tsheet-detail-invoice-avatar-ico.png\">\n                                </ion-avatar>\n                                <ion-label class=\"tsheet-detail-comment-avatar-label supervisor\">Payroll</ion-label>\n                            </ion-chip>\n                        </div>\n                        <div class=\"tsheet-detail-comment-text invoice\">{{ts.InvoiceComment}}</div>\n                    </div>\n                </ion-col>\n            </ion-row>\n        </ion-grid>\n\n    </div>\n\n</ion-content>");

/***/ }),

/***/ 72249:
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/modals/detail/tsheet-detail/tsheet-history/tsheet-history.page.html ***!
  \***************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-header class=\"sheriff-header sheriff-tabpage-header\">\n    <ion-toolbar class=\"sheriff-toolbar\">\n        <div class=\"sheriff-header-background-wrapper\">\n            <div class=\"sheriff-header-droidstatus-padding-wrapper\"></div>\n            <div class=\"sheriff-header-background-inner-wrapper\">\n                <ion-grid class=\"sheriff-grid sheriff-page-header-grid detailmodalheader-grid\">\n                    <ion-row class=\"sheriff-row sheriff-page-header-row detailmodalheader-row\">\n                        <ion-col (click)=\"closeHistory()\" class=\"sheriff-col detail-header-col close-btn-col ion-activatable ripple-parent\">\n                            <div class=\"sheriff-detail-header-btn-wrapper close-btn\">\n                                <ion-icon class=\"sheriff-detail-header-ico close-btn-ico\" name=\"arrow-back\"></ion-icon>\n                            </div>\n                            <ion-ripple-effect></ion-ripple-effect>\n                        </ion-col>\n                        <ion-col class=\"sheriff-col detail-header-col title-col\">\n                            <div class=\"sheriff-detail-header title-wrapper history\">\n                                <span class=\"tsdetail-title-prefix history\">History</span>\n                            </div>\n                        </ion-col>\n                    </ion-row>\n                </ion-grid>\n            </div>\n        </div>\n    </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"tsheet-detail-content tsheet-detail-historymodal\">\n\n    <div class=\"tsheet-detail-bground-wrapper\"></div>\n\n    <div *ngIf=\"noHistory\" class=\"tsheet-detail-history nohistory-wrapper\">\n        <div class=\"tsheet-detail-history no-history-txt\">No History Found</div>\n    </div>\n\n    <div class=\"tsheet-detail-main-wrapper\">\n        <!-- ROSTER SECTION -->\n        <ion-grid class=\"tsheet-detail-history-item-grid roster-grid\">\n            <ion-row class=\"sheriff-row tsheet-detail-history-row roster-row\">\n                <ion-col size=\"2\" class=\"sheriff-col tsheet-detail-history-col roster-icon-col history-2-icon-col\">\n                    <ion-icon class=\"tsheet-history-main-ico rospub-ico\" name=\"star\"></ion-icon>\n                </ion-col>\n                <ion-col size=\"10\" class=\"sheriff-col tsheet-detail-history-col roster-value-col whowhat\">\n                    <div class=\"ts-history-value history-header-value roster publishernk\">Roster Published</div>\n                    <div *ngIf=\"rosPubDate!==null\" class=\"ts-history-value history-header-subvalue roster-date\">{{rosPubDate}}</div>\n                    <div *ngIf=\"rosPubDate===null\" class=\"ts-history-value history-header-subvalue roster-date nk\">-</div>\n                </ion-col>\n            </ion-row>\n        </ion-grid>\n        <!-- DATE SECTION -->\n        <ion-grid class=\"tsheet-detail-history-item-grid date-grid\">\n            <ion-row class=\"sheriff-row tsheet-detail-history-row date-row\">\n                <ion-col size=\"2\" class=\"sheriff-col tsheet-detail-history-col date-icon-col history-2-icon-col\">\n                    <ion-icon class=\"tsheet-history-main-ico date-ico\" name=\"calendar\"></ion-icon>\n                </ion-col>\n                <ion-col size=\"10\" class=\"sheriff-col tsheet-detail-history-col date-value-col\">\n                    <div class=\"ts-history-value history-header-value roster shift\">Shift Time Entries</div>\n                    <div class=\"ts-history-value date-value\">{{this.ts.nDate}}</div>\n                </ion-col>\n            </ion-row>\n            <ion-row class=\"sheriff-row tsheet-detail-history-row timeentries-row\">\n                <ion-col class=\"sheriff-col tsheet-detail-history-col timeentries-col\">\n                    <!-- SYSTEM SECTION -->\n                    <ion-grid class=\"tsheet-detail-history-item-grid system-grid\">\n                        <!-- Heading -->\n                        <ion-row class=\"sheriff-row tsheet-detail-history-row history-header-row system\">\n                            <ion-col size=\"2\" class=\"sheriff-col tsheet-detail-history-col history-header-col system-icon-col history-2-icon-col\">\n                                <ion-icon class=\"tsheet-history-main-ico system-ico\" name=\"business\"></ion-icon>\n                            </ion-col>\n                            <ion-col size=\"8\" class=\"sheriff-col tsheet-detail-history-col history-header-col system-value-col\">\n                                <div class=\"ts-history-value history-header-value system\">System</div>\n                                <div class=\"ts-history-value history-header-subvalue system\">Timesheet Updated</div>\n                            </ion-col>\n                            <ion-col size=\"2\" class=\"sheriff-col tsheet-detail-history-col history-header-col system-timeval-col\">\n                                <div class=\"ts-history-value history-header-timevalue system\">{{sLastUpdate}}</div>\n                            </ion-col>\n                        </ion-row>\n                        <!-- Shift End Time -->\n                        <ion-row class=\"sheriff-row tsheet-detail-history-row history-event-row\">\n                            <ion-col size=\"2\" class=\"sheriff-col tsheet-detail-history-col history-event-col timeicon-col\">\n                                <ion-icon class=\"tsheet-history-time-ico system\" name=\"time\"></ion-icon>\n                            </ion-col>\n                            <ion-col size=\"10\" class=\"sheriff-col tsheet-detail-history-col history-event-col system-value-col\">\n                                <ion-grid class=\"sheriff-grid ts-history-event-detail-grid\">\n                                    <ion-row class=\"sheriff-row ts-history-event-detail-row event-name-row\">\n                                        <ion-col size=\"12\" class=\"sheriff-col ts-history-event-detail-col event-name-col\">\n                                            End Time\n                                        </ion-col>\n                                    </ion-row>\n                                    <ion-row class=\"sheriff-row ts-history-event-detail-row event-rawtime-row\">\n                                        <ion-col class=\"sheriff-col ts-history-event-detail-col event-rawtime-col\">\n                                            {{sETimeRaw}}\n                                        </ion-col>\n                                        <ion-col size=\"1\" class=\"sheriff-col ts-history-event-detail-col event-arrowico-col\">\n                                            <ion-icon class=\"tsheet-history-arrow-ico\" name=\"arrow-forward\"></ion-icon>\n                                        </ion-col>\n                                        <ion-col class=\"sheriff-col ts-history-event-detail-col event-roundtime-col\">\n                                            {{sETimeRound}}\n                                        </ion-col>\n                                    </ion-row>\n                                </ion-grid>\n                            </ion-col>\n                        </ion-row>\n                        <!-- Shift Start Time -->\n                        <ion-row class=\"sheriff-row tsheet-detail-history-row history-event-row\">\n                            <ion-col size=\"2\" class=\"sheriff-col tsheet-detail-history-col history-event-col timeicon-col\">\n                                <ion-icon class=\"tsheet-history-time-ico system\" name=\"time\"></ion-icon>\n                            </ion-col>\n                            <ion-col size=\"10\" class=\"sheriff-col tsheet-detail-history-col history-event-col system-value-col\">\n                                <ion-grid class=\"sheriff-grid ts-history-event-detail-grid\">\n                                    <ion-row class=\"sheriff-row ts-history-event-detail-row event-name-row\">\n                                        <ion-col size=\"12\" class=\"sheriff-col ts-history-event-detail-col event-name-col\">\n                                            Start Time\n                                        </ion-col>\n                                    </ion-row>\n                                    <ion-row class=\"sheriff-row ts-history-event-detail-row event-rawtime-row\">\n                                        <ion-col class=\"sheriff-col ts-history-event-detail-col event-rawtime-col\">\n                                            {{sSTimeRaw}}\n                                        </ion-col>\n                                        <ion-col size=\"1\" class=\"sheriff-col ts-history-event-detail-col event-arrowico-col\">\n                                            <ion-icon class=\"tsheet-history-arrow-ico\" name=\"arrow-forward\"></ion-icon>\n                                        </ion-col>\n                                        <ion-col class=\"sheriff-col ts-history-event-detail-col event-roundtime-col\">\n                                            {{sSTimeRound}}\n                                        </ion-col>\n                                    </ion-row>\n                                </ion-grid>\n                            </ion-col>\n                        </ion-row>\n                        <!-- Total Time -->\n                        <ion-row class=\"sheriff-row tsheet-detail-history-row history-event-row\">\n                            <ion-col size=\"2\" class=\"sheriff-col tsheet-detail-history-col history-event-col timeicon-col\">\n                                <ion-icon class=\"tsheet-history-equals-ico system\" name=\"reorder-two\"></ion-icon>\n                            </ion-col>\n                            <ion-col size=\"10\" class=\"sheriff-col tsheet-detail-history-col history-event-col system-value-col\">\n                                <ion-grid class=\"sheriff-grid ts-history-event-detail-grid\">\n                                    <ion-row class=\"sheriff-row ts-history-event-detail-row event-name-row\">\n                                        <ion-col size=\"12\" class=\"sheriff-col ts-history-event-detail-col event-name-col\">\n                                            Total Time\n                                        </ion-col>\n                                    </ion-row>\n                                    <ion-row class=\"sheriff-row ts-history-event-detail-row event-rawtime-row\">\n                                        <ion-col class=\"sheriff-col ts-history-event-detail-col event-rawtime-col\">\n                                            <span class=\"tsheet-detail-tt-value sysraw\">\n                                              <span *ngIf=\"sTTRaw.hours>0\" class=\"tsheet-history-tt-value hrs\">{{sTTRaw.hours}}<span class=\"tt-suffix hrs\">hrs</span></span>\n                                            <span *ngIf=\"sTTRaw.minutes>0\" class=\"tsheet-history-tt-value mins\">{{sTTRaw.minutes}}<span class=\"tt-suffix mins\">mins</span></span>\n                                            </span>\n                                        </ion-col>\n                                        <ion-col size=\"1\" class=\"sheriff-col ts-history-event-detail-col event-arrowico-col\">\n                                            <ion-icon class=\"tsheet-history-arrow-ico\" name=\"arrow-forward\"></ion-icon>\n                                        </ion-col>\n                                        <ion-col class=\"sheriff-col ts-history-event-detail-col event-roundtime-col\">\n                                            <span class=\"tsheet-detail-tt-value sysround\">\n                                            <span *ngIf=\"sTTRound.hours>0\" class=\"tsheet-history-tt-value hrs\">{{sTTRound.hours}}<span class=\"tt-suffix hrs\">hrs</span></span>\n                                            <span *ngIf=\"sTTRound.minutes>0\" class=\"tsheet-history-tt-value mins\">{{sTTRound.minutes}}<span class=\"tt-suffix mins\">mins</span></span>\n                                            </span>\n                                        </ion-col>\n                                    </ion-row>\n                                </ion-grid>\n                            </ion-col>\n                        </ion-row>\n                    </ion-grid>\n                    <!-- USER SECTION -->\n                    <ion-grid class=\"tsheet-detail-history-item-grid user-grid\">\n                        <!-- Heading -->\n                        <ion-row class=\"sheriff-row tsheet-detail-history-row history-header-row user\">\n                            <ion-col size=\"2\" class=\"sheriff-col tsheet-detail-history-col history-header-col user-icon-col history-2-icon-col\">\n                                <img class=\"sheriff-detail-heading-avatar tsheet-heading-avatar history-ava\" src=\"{{meAvatar}}\">\n                            </ion-col>\n                            <ion-col size=\"8\" class=\"sheriff-col tsheet-detail-history-col history-header-col user-value-col\">\n                                <div class=\"ts-history-value history-header-value user\">{{myDisplayName}}</div>\n                                <div class=\"ts-history-value history-header-subvalue user\">Timesheet Updated</div>\n                            </ion-col>\n                            <ion-col size=\"2\" class=\"sheriff-col tsheet-detail-history-col history-header-col user-timeval-col\">\n                                <div class=\"ts-history-value history-header-timevalue user\">{{uLastUpdate}}</div>\n                            </ion-col>\n                        </ion-row>\n                        <!-- Shift End Time -->\n                        <ion-row class=\"sheriff-row tsheet-detail-history-row history-event-row\">\n                            <ion-col size=\"2\" class=\"sheriff-col tsheet-detail-history-col history-event-col timeicon-col\">\n                                <ion-icon class=\"tsheet-history-time-ico user\" name=\"time\"></ion-icon>\n                            </ion-col>\n                            <ion-col size=\"10\" class=\"sheriff-col tsheet-detail-history-col history-event-col user-value-col\">\n                                <ion-grid class=\"sheriff-grid ts-history-event-detail-grid\">\n                                    <ion-row class=\"sheriff-row ts-history-event-detail-row event-name-row\">\n                                        <ion-col size=\"12\" class=\"sheriff-col ts-history-event-detail-col event-name-col\">\n                                            End Time\n                                        </ion-col>\n                                    </ion-row>\n                                    <ion-row class=\"sheriff-row ts-history-event-detail-row event-rawtime-row\">\n                                        <ion-col class=\"sheriff-col ts-history-event-detail-col event-rawtime-col\">\n                                            {{uETimeRaw}}\n                                        </ion-col>\n                                        <ion-col size=\"1\" class=\"sheriff-col ts-history-event-detail-col event-arrowico-col\">\n                                            <ion-icon class=\"tsheet-history-arrow-ico\" name=\"arrow-forward\"></ion-icon>\n                                        </ion-col>\n                                        <ion-col class=\"sheriff-col ts-history-event-detail-col event-roundtime-col\">\n                                            {{uETimeRound}}\n                                        </ion-col>\n                                    </ion-row>\n                                </ion-grid>\n                            </ion-col>\n                        </ion-row>\n                        <!-- Shift Start Time -->\n                        <ion-row class=\"sheriff-row tsheet-detail-history-row history-event-row\">\n                            <ion-col size=\"2\" class=\"sheriff-col tsheet-detail-history-col history-event-col timeicon-col\">\n                                <ion-icon class=\"tsheet-history-time-ico user\" name=\"time\"></ion-icon>\n                            </ion-col>\n                            <ion-col size=\"10\" class=\"sheriff-col tsheet-detail-history-col history-event-col user-value-col\">\n                                <ion-grid class=\"sheriff-grid ts-history-event-detail-grid\">\n                                    <ion-row class=\"sheriff-row ts-history-event-detail-row event-name-row\">\n                                        <ion-col size=\"12\" class=\"sheriff-col ts-history-event-detail-col event-name-col\">\n                                            Start Time\n                                        </ion-col>\n                                    </ion-row>\n                                    <ion-row class=\"sheriff-row ts-history-event-detail-row event-rawtime-row\">\n                                        <ion-col class=\"sheriff-col ts-history-event-detail-col event-rawtime-col\">\n                                            {{uSTimeRaw}}\n                                        </ion-col>\n                                        <ion-col size=\"1\" class=\"sheriff-col ts-history-event-detail-col event-arrowico-col\">\n                                            <ion-icon class=\"tsheet-history-arrow-ico\" name=\"arrow-forward\"></ion-icon>\n                                        </ion-col>\n                                        <ion-col class=\"sheriff-col ts-history-event-detail-col event-roundtime-col\">\n                                            {{uSTimeRound}}\n                                        </ion-col>\n                                    </ion-row>\n                                </ion-grid>\n                            </ion-col>\n                        </ion-row>\n                        <!-- Total Time -->\n                        <ion-row class=\"sheriff-row tsheet-detail-history-row history-event-row\">\n                            <ion-col size=\"2\" class=\"sheriff-col tsheet-detail-history-col history-event-col timeicon-col\">\n                                <ion-icon class=\"tsheet-history-equals-ico user\" name=\"reorder-two\"></ion-icon>\n                            </ion-col>\n                            <ion-col size=\"10\" class=\"sheriff-col tsheet-detail-history-col history-event-col user-value-col\">\n                                <ion-grid class=\"sheriff-grid ts-history-event-detail-grid\">\n                                    <ion-row class=\"sheriff-row ts-history-event-detail-row event-name-row\">\n                                        <ion-col size=\"12\" class=\"sheriff-col ts-history-event-detail-col event-name-col\">\n                                            Total Time\n                                        </ion-col>\n                                    </ion-row>\n                                    <ion-row class=\"sheriff-row ts-history-event-detail-row event-rawtime-row\">\n                                        <ion-col class=\"sheriff-col ts-history-event-detail-col event-rawtime-col\">\n                                            <span class=\"tsheet-detail-tt-value userraw\">\n                                              <span *ngIf=\"uTTRaw.hours>0\" class=\"tsheet-history-tt-value hrs\">{{uTTRaw.hours}}<span class=\"tt-suffix hrs\">hrs</span></span>\n                                            <span *ngIf=\"uTTRaw.minutes>0\" class=\"tsheet-history-tt-value mins\">{{uTTRaw.minutes}}<span class=\"tt-suffix mins\">mins</span></span>\n                                            </span>\n                                        </ion-col>\n                                        <ion-col size=\"1\" class=\"sheriff-col ts-history-event-detail-col event-arrowico-col\">\n                                            <ion-icon class=\"tsheet-history-arrow-ico\" name=\"arrow-forward\"></ion-icon>\n                                        </ion-col>\n                                        <ion-col class=\"sheriff-col ts-history-event-detail-col event-roundtime-col\">\n                                            <span class=\"tsheet-detail-tt-value userround\">\n                                              <span *ngIf=\"uTTRound.hours>0\" class=\"tsheet-history-tt-value hrs\">{{uTTRound.hours}}<span class=\"tt-suffix hrs\">hrs</span></span>\n                                            <span *ngIf=\"uTTRound.minutes>0\" class=\"tsheet-history-tt-value mins\">{{uTTRound.minutes}}<span class=\"tt-suffix mins\">mins</span></span>\n                                            </span>\n                                        </ion-col>\n                                    </ion-row>\n                                </ion-grid>\n                            </ion-col>\n                        </ion-row>\n                    </ion-grid>\n                </ion-col>\n            </ion-row>\n        </ion-grid>\n    </div>\n\n</ion-content>");

/***/ }),

/***/ 39625:
/*!******************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/modals/firstrun/firstrun.page.html ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-content id=\"sheriff-frmodal-slider-content\">\n\n    <div class=\"sheriff-frmodal-slider-section-wrapper slides\">\n        <ion-grid class=\"sheriff-grid frmodal-slider-main-grid\">\n            <ion-row class=\"sheriff-row frmodal-slider-main-row1 slides\">\n                <ion-col size=\"12\" class=\"sheriff-col sheriff-frmodal-slider-main-col1 slides\">\n                    <ion-slides id=\"frslidesid\" class=\"sheriff-slides fr-slides\" [scrollbar]=\"false\" [mode]=\"'md'\" [pager]=doShowPager [options]=slideOptions #slideWithNav (ionSlideWillChange)=\"ionSlideEvent($event)\" (ionSlideDidChange)=\"slideDidChange(slideWithNav)\" (ionSlidesDidLoad)=\"ionSlideEvent($event)\">\n                        <!-- /////////////////////////////////////////////////////////////////// -->\n                        <!-- SLIDE ONE ///////////////////////////////////////////////////////// -->\n                        <!-- /////////////////////////////////////////////////////////////////// -->\n                        <ion-slide class=\"frs-slide\" id=\"frslide1-yourworkplace\">\n                            <div class=\"fr-slide-flexy-wrap slide1\">\n                                <div class=\"frs-slide-grid-wrapper title-grid workplace\">\n                                    <ion-grid class=\"sheriff-grid modal-grid firstrun-grid heading-grid workplace\">\n                                        <ion-row class=\"sheriff-row modal-row mainheading-row workplace\">\n                                            <ion-col class=\"sheriff-col modal-col mainheading-col workplace\">\n                                                <div class=\"fr-slidetitle-wrapper-div workplace\">\n                                                    <div class=\"fr-your\">your</div>\n                                                    <div class=\"fr-titlebig workplace\">workplace</div>\n                                                </div>\n                                            </ion-col>\n                                        </ion-row>\n                                    </ion-grid>\n                                </div>\n                                <div *ngIf=\"epTestsDone\" class=\"infoandcontent-grid-wrapper-div workplace\">\n                                    <ion-grid class=\"sheriff-grid modal-grid firstrun-grid infocontent-grid workplace\">\n                                        <ion-row class=\"sheriff-row modal-row firstrun-row infocontent-row workplace\">\n                                            <ion-col class=\"sheriff-col modal-col firstrun-col infocontent-col workplace\">\n                                                <!-- No WP --------------------------------------------------- -->\n                                                <div *ngIf=\"wpNoOf===0\" id=\"fr-s1-workplace-none\">\n                                                    <p class=\"notop-para nowps dimable\"><span class=\"sheriff-brand-txt smaller\">Sheriff</span> found <span class=\"sheriff-red\">no workplaces</span> currently linked to your account.</p>\n                                                    <ion-grid class=\"sheriff-grid fr-grid nowps-grid\">\n                                                        <ion-row class=\"sheriff-row fr-row nowps-row notright-row dimable\">\n                                                            <ion-col size=\"12\" class=\"sheriff-col fr-col nowps-col notright-col\">\n                                                                <div class=\"fr-nowps notright-wrapper\">Double check the email address you just used to sign into <span class=\"sheriff-brand-txt smaller\">Sheriff</span> (<span style=\"font-variant: all-small-caps;color:var(--ion-color-success)\">{{userEmail}}</span>) is the <span style=\"font-style: italic;color:#eee\">original email address</span> used to activate your <span class=\"deputy-brand-txt smaller\">deputy</span> account.</div>\n                                                            </ion-col>\n                                                            <ion-col size=\"6\" class=\"sheriff-col fr-col nowps-col checkaccount-col checkaccount-content-col content-col left\">\n                                                                <p class=\"notrightpara para2\" style=\"color:#ff9800\">If not, tap to logout and</p>\n                                                            </ion-col>\n                                                            <ion-col size=\"6\" class=\"sheriff-col fr-col nowps-col checkaccount-col checkaccount-content-col content-col button\">\n                                                                <div (click)=\"logoutAndSwitch()\" class=\"firstrun-btn firstrun-corenavbtn nowps signoutandswitch ion-activatable ripple-parent\" id=\"firstrun-searchformissing-workplace-btn\">\n                                                                    <ion-icon class=\"fr-searchagain-ico\" name=\"swap-horizontal-outline\"></ion-icon>Switch Login\n                                                                    <ion-ripple-effect></ion-ripple-effect>\n                                                                </div>\n                                                            </ion-col>\n                                                        </ion-row>\n                                                        <ion-row class=\"sheriff-row fr-row nowps-row ordividerrow dimable\">\n                                                          <ion-col class=\"sheriff-col fr-col nowps-col orderdivider-col\">\n                                                              <div id=\"fr-or-divider-wrapper\" class=\"nowps dimable\">\n                                                                  <div id=\"fr-or-divider-text\" class=\"nowps dimable nowpor\">OR REFRESH</div>\n                                                              </div>\n                                                          </ion-col>\n                                                        </ion-row>\n                                                        <ion-row *ngIf=\"wpSearchAgain\" class=\"sheriff-row fr-row nowps-row refreshlist-row\">\n                                                            <ion-col size=\"12\" class=\"sheriff-col fr-col nowps-col searchagain-col searchagain-results-col\">\n                                                              <ion-grid class=\"sheriff-grid workplace-searchagain-grid\">\n                                                                <ion-row class=\"sheriff-row workplace-searchagain-row\">\n                                                                  <ion-col class=\"sheriff-col workplace-searchagain-col\">\n                                                                    <div *ngIf=\"wpSearchAgain\" class=\"fr-workplace-searchagain-wrapper\">\n                                                                        <div *ngIf=\"wpSearchAgainStage==='waiting'\">\n                                                                          <div id=\"fr-workplace-searchagain-spinner-wrapper\">\n                                                                            <ion-spinner id=\"fr-workplace-searchagain-spinner\" name=\"dots\"></ion-spinner>\n                                                                            <div class=\"fr-workplace-searchagain-spinner-txt\">Refreshing Workplaces</div>\n                                                                          </div>\n                                                                        </div>\n                                                                        <div *ngIf=\"wpSearchAgainStage==='nonew'\" class=\"wpsearchagainresult-txt nonew\">\n                                                                            <ion-icon class=\"wpsearchagainresult-ico sheriff-red\" name=\"close-circle\"></ion-icon>No New Workplaces Found\n                                                                        </div>\n                                                                        <div *ngIf=\"wpSearchAgainStage==='gotnew'\" class=\"wpsearchagainresult-txt gotnew\">\n                                                                            <ion-icon class=\"wpsearchagainresult-ico sheriff-green\" name=\"checkmark-circle\"></ion-icon>{{newWPNo}} New Workplaces Found\n                                                                        </div>\n                                                                    </div>\n                                                                  </ion-col>\n                                                                </ion-row>\n                                                              </ion-grid>\n                                                            </ion-col>\n                                                        </ion-row>\n                                                        <ion-row class=\"sheriff-row fr-row nowps-row refreshlist-row dimable\">\n                                                            <ion-col size=\"12\" class=\"sheriff-col fr-col nowps-col searchagain-col searchagain-content-col content-col top\">\n                                                                <p class=\"searchagaininfo para1\">If you are expecting an invite from a new employer or experiencing issues with your data connection:</p>\n                                                            </ion-col>\n                                                            <ion-col size=\"6\" class=\"sheriff-col fr-col nowps-col searchagain-col searchagain-content-col content-col left\">\n                                                                <div style=\"color:#ff9800\" class=\"fr-nowps searchagaininfo-wrapper try-refreshingwp dimable\">\n                                                                    Try refreshing your\n                                                                </div>\n                                                            </ion-col>\n                                                            <ion-col size=\"6\" class=\"sheriff-col fr-col nowps-col searchagain-col searchagain-content-col content-col btn dimable\">\n                                                                <div (click)=\"searchForMissingWP()\" class=\"firstrun-btn firstrun-corenavbtn nowps skip ion-activatable ripple-parent\" id=\"firstrun-searchformissing-workplace-btn\">\n                                                                    <ion-icon class=\"fr-searchagain-ico\" name=\"search-outline\"></ion-icon>\n                                                                    workplaces\n                                                                    <ion-ripple-effect></ion-ripple-effect>\n                                                                </div>\n                                                            </ion-col>\n                                                        </ion-row>\n                                                        <ion-row class=\"sheriff-row fr-row nowps-row ordividerrow dimable\">\n                                                            <ion-col class=\"sheriff-col fr-col nowps-col orderdivider-col\">\n                                                                <div id=\"fr-or-divider-wrapper\" class=\"nowps dimable\">\n                                                                    <div id=\"fr-or-divider-text\" class=\"nowps dimable nowpor\">OR IMPORT</div>\n                                                                </div>\n                                                            </ion-col>\n                                                        </ion-row>\n                                                        <ion-row class=\"sheriff-row fr-row nowps-row archiveoffline-row dimable\">\n                                                            <ion-col size=\"12\" class=\"sheriff-col fr-col nowps-col archiveoffline-col openimportbtn-col open\">\n                                                                <div (click)=\"skipWorkplaceImport()\" class=\"ion-activatable ripple-parent nowps-saveddatabtn openlocaldb-btn\">\n                                                                    <ion-icon class=\"fr-searchagain-ico\" name=\"server-outline\"></ion-icon>\n                                                                    Database Cloud Backup\n                                                                    <ion-ripple-effect></ion-ripple-effect>\n                                                                </div>\n                                                            </ion-col>\n                                                        </ion-row>\n                                                    </ion-grid>\n                                                </div>\n                                                <!-- Mult WPs -------------------------------------------------------- -->\n                                                <div *ngIf=\"wpNoOf>1\" id=\"fr-s1-workplace-multiple\">\n                                                    <p class=\"notop-para multiple dimable\"><span class=\"sheriff-brand-txt smaller\">Sheriff</span> found <span class=\"sheriff-gold\">{{wpNoOf}} linked workplaces</span>.</p>\n                                                    <p class=\"dimable multiple-wp-lastpara\" style=\"text-align:left\">To help us streamline access to the data you use most, select your <span style=\"font-weight:500;color:#eee\">primary/most-used workplace</span> below:</p>\n                                                    <ion-grid class=\"sheriff-grid modal-grid firstrun-grid froptions-grid workplace dimable\">\n                                                        <ion-row *ngFor=\"let workplace of wpWorkplaces; let i=index\" class=\"sheriff-row modal-row multiple-workplace multiple-workplace{{i}}\" (click)=\"toggleWPCB(i,workplace.id)\">\n                                                            <ion-col size=\"1\" class=\"sheriff-col modal-col firstrun-col froptions-col workplace{{i}} checkbox-col\">\n                                                                <ion-checkbox mode=\"ios\" checked=\"{{workplace.ischecked}}\" class=\"sheriff-checkbox fr-workplace-cb workplace{{i}}-cb\"></ion-checkbox>\n                                                            </ion-col>\n                                                            <ion-col class=\"sheriff-col fr-multipleworkplace-col block-col\">\n                                                                <div [ngStyle]=\"{background:workplace.color}\" class=\"fr-workplace-portfolio-block\">\n                                                                    <ion-icon [ngStyle]=\"{color:workplace.labelcolor}\" class=\"fr-workplace-ico\" name=\"business-outline\"></ion-icon>\n                                                                </div>\n                                                            </ion-col>\n                                                            <ion-col class=\"sheriff-col fr-multipleworkplace-col deets-col\">\n                                                                <div class=\"fr-multipleworkplace-nameandaddress-wrapper\">\n                                                                    <div class=\"fr-multipleworkplace-name-wrapper\">{{workplace.name}} <span class=\"fr-wp-code-span\" *ngIf=\"workplace.code !== null\">({{workplace.code}})</span></div>\n                                                                    <div *ngIf=\"workplace.address!==null\" class=\"fr-singleworkplace-address-wrapper\">{{workplace.address}}</div>\n                                                                </div>\n                                                            </ion-col>\n                                                        </ion-row>\n                                                    </ion-grid>\n                                                    <div *ngIf=\"wpSearchAgain&&!wpOneIsChecked\" class=\"fr-workplace-searchagain-wrapper multiple\">\n                                                      <ion-grid class=\"sheriff-grid workplace-searchagain-grid\">\n                                                        <ion-row class=\"sheriff-row workplace-searchagain-row\">\n                                                          <ion-col class=\"sheriff-col workplace-searchagain-col\">\n                                                            <div *ngIf=\"wpSearchAgain\" class=\"fr-workplace-searchagain-wrapper\">\n                                                                  <div *ngIf=\"wpSearchAgainStage==='waiting'\">\n                                                                    <div id=\"fr-workplace-searchagain-spinner-wrapper\">\n                                                                      <ion-spinner id=\"fr-workplace-searchagain-spinner\" name=\"dots\"></ion-spinner>\n                                                                      <div class=\"fr-workplace-searchagain-spinner-txt\">Refreshing Workplaces</div>\n                                                                    </div>\n                                                                  </div>\n                                                                  <div *ngIf=\"wpSearchAgainStage==='nonew'\" class=\"wpsearchagainresult-txt nonew\">\n                                                                      <ion-icon class=\"wpsearchagainresult-ico sheriff-red\" name=\"close-circle\"></ion-icon>No New Workplaces Found\n                                                                  </div>\n                                                                  <div *ngIf=\"wpSearchAgainStage==='gotnew'\" class=\"wpsearchagainresult-txt gotnew\">\n                                                                      <ion-icon class=\"wpsearchagainresult-ico sheriff-green\" name=\"checkmark-circle\"></ion-icon>{{newWPNo}} New Workplaces Found\n                                                                  </div>\n                                                            </div>\n                                                          </ion-col>\n                                                        </ion-row>\n                                                      </ion-grid>\n                                                    </div>\n                                                    <div *ngIf=\"!wpOneIsChecked\" (click)=\"searchForMissingWP()\" class=\"firstrun-btn firstrun-corenavbtn multiple skip ion-activatable ripple-parent\" id=\"firstrun-searchformissing-workplace-btn\">\n                                                        <ion-icon class=\"fr-searchagain-ico\" name=\"search-outline\"></ion-icon>workplaces\n                                                        <ion-ripple-effect></ion-ripple-effect>\n                                                    </div>\n                                                    <div *ngIf=\"wpOneIsChecked\" class=\"fr-swipe2continue-wrapper dimable multiple animate__animated animate__fadeIn\">\n                                                       <div *ngIf=\"wpNoOf>0||(hasBUDB&&mustRestoreStatus==='success')\" class=\"sheriff-slider-bodynav-nextarrow-div-wrapper\">\n                                                          <div class=\"sheriff-slider-bodynav-nextarrow-btn-inner sheriff-btn sheriff-fr-nextbtn ion-activatable ripple-parent\" (click)=\"slideNext(slideWithNav)\">\n                                                            <div class=\"sheriff-btn-txt sheriff-nextbtn-txt\">SWIPE/TAP TO CONTINUE</div>\n                                                            <ion-icon class=\"sheriff-fr-btn-ico sheriff-fr-nextbtn-ico\" name=\"arrow-forward-outline\"></ion-icon>\n                                                            <ion-ripple-effect></ion-ripple-effect>\n                                                          </div>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <!-- 1 WP ------------------------------------------------------------ -->\n                                                <div *ngIf=\"wpNoOf===1\" id=\"fr-s1-workplace-single\">\n                                                    <p class=\"notop-para dimable\"><span class=\"sheriff-brand-txt smaller\">Sheriff</span> has set your <span class=\"fr-primarywp\">primary workplace</span> to:</p>\n                                                    <ion-grid class=\"fr-singleworkplace-wrapper dimable\">\n                                                        <ion-row class=\"sheriff-row fr-singleworkplace-row\">\n                                                            <ion-col class=\"sheriff-col fr-singleworkplace-col block-col\">\n                                                                <div [ngStyle]=\"{background:wpWorkplaces[0].color}\" class=\"fr-workplace-portfolio-block\">\n                                                                    <ion-icon [ngStyle]=\"{color:wpWorkplaces[0].labelcolor}\" class=\"fr-workplace-ico\" name=\"business-outline\"></ion-icon>\n                                                                </div>\n                                                            </ion-col>\n                                                            <ion-col class=\"sheriff-col fr-singleworkplace-col deets-col\">\n                                                                <div class=\"fr-singleworkplace-nameandaddress-wrapper\">\n                                                                    <div class=\"fr-singleworkplace-name-wrapper\">{{wpWorkplaces[0].name}} <span class=\"fr-wp-code-span\" *ngIf=\"wpWorkplaces[0].code!==null\">({{wpWorkplaces[0].code}})</span></div>\n                                                                    <div *ngIf=\"wpWorkplaces[0].address!==null\" class=\"fr-singleworkplace-address-wrapper\">{{wpWorkplaces[0].address}}</div>\n                                                                </div>\n                                                            </ion-col>\n                                                        </ion-row>\n                                                    </ion-grid>\n                                                    <ion-grid class=\"sheriff-grid workplace-searchagain-grid\">\n                                                      <ion-row class=\"sheriff-row workplace-searchagain-row\">\n                                                        <ion-col class=\"sheriff-col workplace-searchagain-col\">\n                                                          <div *ngIf=\"wpSearchAgain\" class=\"fr-workplace-searchagain-wrapper\">\n                                                              <div *ngIf=\"wpSearchAgainStage==='waiting'\">\n                                                                <div id=\"fr-workplace-searchagain-spinner-wrapper\">\n                                                                  <ion-spinner id=\"fr-workplace-searchagain-spinner\" name=\"dots\"></ion-spinner>\n                                                                  <div class=\"fr-workplace-searchagain-spinner-txt\">Refreshing Workplaces</div>\n                                                                </div>\n                                                              </div>\n                                                              <div *ngIf=\"wpSearchAgainStage==='nonew'\" class=\"wpsearchagainresult-txt nonew\">\n                                                                  <ion-icon class=\"wpsearchagainresult-ico sheriff-red\" name=\"close-circle\"></ion-icon>No New Workplaces Found\n                                                              </div>\n                                                              <div *ngIf=\"wpSearchAgainStage==='gotnew'\" class=\"wpsearchagainresult-txt gotnew\">\n                                                                  <ion-icon class=\"wpsearchagainresult-ico sheriff-green\" name=\"checkmark-circle\"></ion-icon>{{newWPNo}} New Workplaces Found\n                                                              </div>\n                                                          </div>\n                                                        </ion-col>\n                                                      </ion-row>\n                                                    </ion-grid>\n                                                    <div class=\"fr-swipe2continue-wrapper dimable\"> \n                                                        <div *ngIf=\"wpNoOf>0||(hasBUDB&&mustRestoreStatus==='success')\" class=\"sheriff-slider-bodynav-nextarrow-div-wrapper\">\n                                                          <div class=\"sheriff-slider-bodynav-nextarrow-btn-inner sheriff-btn sheriff-fr-nextbtn ion-activatable ripple-parent\" (click)=\"slideNext(slideWithNav)\">\n                                                            <div class=\"sheriff-btn-txt sheriff-nextbtn-txt\">SWIPE/TAP TO CONTINUE</div>\n                                                            <ion-icon class=\"sheriff-fr-btn-ico sheriff-fr-nextbtn-ico\" name=\"arrow-forward-outline\"></ion-icon>\n                                                            <ion-ripple-effect></ion-ripple-effect>\n                                                          </div>\n                                                        </div>\n                                                    </div>\n                                                    <div id=\"fr-or-divider-wrapper dimable\">\n                                                        <div id=\"fr-or-divider-text\">OR</div>\n                                                    </div>\n                                                    <div class=\"fr-searchformissing-workplace-wrapper\">\n                                                        <ion-grid class=\"sheriff-grid fr-missingwp-grid\">\n                                                            <ion-row class=\"sheriff-row fr-missingwp-row\">\n                                                                <ion-col class=\"sheriff-col fr-missingwp-col1\">\n                                                                    <span *ngIf=\"!wpSearchAgain\" class=\"sheriff-search-again-red\">SEARCH AGAIN</span>\n                                                                    <span *ngIf=\"wpSearchAgain\" class=\"sheriff-search-again-red\">SEARCHING...</span>\n                                                                    <ion-icon class=\"fr-s2c-ico bad\" name=\"remove-outline\"></ion-icon>\n                                                                </ion-col>\n                                                                <ion-col class=\"sheriff-col fr-missingwp-col2\">\n                                                                    <div (click)=\"searchForMissingWP()\" class=\"firstrun-btn firstrun-corenavbtn skip ion-activatable ripple-parent\" id=\"firstrun-searchformissing-workplace-btn\">\n                                                                        <ion-icon class=\"fr-searchagain-ico\" name=\"search-outline\"></ion-icon>workplaces\n                                                                        <ion-ripple-effect></ion-ripple-effect>\n                                                                    </div>\n                                                                </ion-col>\n                                                            </ion-row>\n                                                        </ion-grid>\n                                                    </div>\n                                                </div>\n                                                <!-- ------------------------------------------------------------------- -->\n                                            </ion-col>\n                                        </ion-row>\n                                    </ion-grid>\n                                </div>\n                            </div>\n                        </ion-slide>\n                        <!-- /////////////////////////////////////////////////////////////////// -->\n                        <!-- SLIDE TWO ///////////////////////////////////////////////////////// -->\n                        <!-- /////////////////////////////////////////////////////////////////// -->\n                        <ion-slide class=\"frs-slide\" id=\"frslide2-yourrecords\">\n                            <div class=\"fr-slide-flexy-wrap slide2\" [ngClass]=\"{'frxtraoptsadjust':showMoreOpts,'alreadydone':dlDidComplete}\">\n                                <!-- ------------------------------------------------------------------- -->\n                                <div *ngIf=\"!showMoreOpts\" class=\"fr-top-mainslidetitle slide2-records\">\n                                    <ion-grid class=\"sheriff-grid modal-grid firstrun-grid heading-grid records\">\n                                      <ion-row class=\"sheriff-row modal-row mainheading-row records\">\n                                          <ion-col class=\"sheriff-col modal-col mainheading-col records\">\n                                              <div class=\"fr-slidetitle-wrapper-div records\">\n                                                  <div class=\"fr-your\">your</div>\n                                                  <div class=\"fr-titlebig workplace\">records</div>\n                                              </div>\n                                          </ion-col>\n                                      </ion-row>\n                                    </ion-grid>\n                                </div>\n                                <div *ngIf=\"backupCheckIsDone&&!dlDidComplete\" class=\"fr-backupcheck-hasfinished-wrapper\">\n                                    <!-- ------------------------------------------------------------------- -->\n                                    <div class=\"fr-top-infoblurb-wrapper slide2-records\">\n                                        <ion-grid *ngIf=\"!showMoreOpts&&!dloadInProgress&&!dlDidComplete&&!noBackupWillFail&&startFreshChecked\" class=\"sheriff-grid modal-grid firstrun-grid infocontent-grid records infoparagridtop\">\n                                            <ion-row class=\"sheriff-row modal-row firstrun-row infocontent-row records intro1\">\n                                                <ion-col class=\"sheriff-col modal-col firstrun-col infocontent-col records\">\n                                                    <p class=\"fr-rec-intro-p1\">By <span style=\"color:#ff9800\">default </span><span class=\"sheriff-brand-txt smaller\">Sheriff</span> will download and save <span style=\"color:#ff9800\">all</span> of your existing Deputy data so that your\n                                                        records are always available, even if you offline or leave your job.</p>\n                                                    <p class=\"fr-rec-intro-p2\">That said, if you want to <span style=\"color:#ff9800\">limit/change</span> the scope of the intial default download, you can do that too.</p>\n                                                </ion-col>\n                                            </ion-row>\n                                        </ion-grid>\n                                    </div>\n                                    <!-- ------------------------------------------------------------------- -->\n                                    <div *ngIf=\"!dloadInProgress&&!dlDidComplete&&!showMoreOpts&&!startFreshChecked\" class=\"backupdbfound-div-wrapper\">\n                                      <div class=\"fr-rec-budb-found-titletext\">\n                                        <span class=\"fr-records-bufound sheriff-brand-txt\">Sheriff</span><span class=\"fr-records-bufound hasfounda\"> has found a</span><span class=\"fr-records-bufound records-backup\"> Records Backup</span><span class=\"fr-records-bufound normal-txt\">:</span>\n                                      </div>\n                                      <ion-grid class=\"sheriff-grid fr-grid backupdbfound-grid\">\n                                        <ion-row class=\"sheriff-row fr-grid-row backupfound-row main-row\">\n                                          <ion-col class=\"sheriff-col fr-grid-col backupfound-col main-ico-col\">\n                                            <div [ngStyle]=\"{background:wpWorkplaces[0].color}\" class=\"fr-backupfound-ico-block\">\n                                              <ion-icon [ngStyle]=\"{color:wpWorkplaces[0].labelcolor}\" class=\"fr-backupfound-ico\" name=\"cloud-done\"></ion-icon>\n                                            </div>\n                                          </ion-col>\n                                          <ion-col class=\"sheriff-col fr-grid-col backupfound-col main-details-txt-block\">\n                                            <div class=\"budb-details-line1\">\n                                              <div class=\"budbfname\">{{buDBNiceFName}}</div>\n                                              <div class=\"budbbrackdeet budbfsize\"> ({{buDBFSize}})</div>\n                                            </div>\n                                            <div class=\"budb-details-line2\">\n                                              <div class=\"budbmoddate\">{{buDBModDate}}</div>\n                                              <div class=\"budbbrackdeet budbmodago\"> {{buDBModAgo}}</div>\n                                            </div>\n                                          </ion-col>\n                                        </ion-row>\n                                      </ion-grid>\n                                    </div>\n                                    <!-- ------------------------------------------------------------------- -->\n                                    <div *ngIf=\"!dloadInProgress&&!dlDidComplete&&!showMoreOpts&&!noBackupWillFail\" class=\"fr-backuporrefresh-choice-paratext-div\">\n                                      How should <span class=\"fr-records-bufound sheriff-brand-txt\">Sheriff</span> proceed?\n                                    </div>\n                                    <ion-grid *ngIf=\"!dloadInProgress&&!dlDidComplete&&!showMoreOpts&&!noBackupWillFail\" class=\"sheriff-grid fr-grid backuporfresh1-grid\">\n                                      <ion-row *ngIf=\"!noBackupWillFail\" class=\"sheriff-row fr-grid-row backupdbfound-row restoreorfresh-row restorerow\">\n                                        <ion-col [ngStyle]=\"{'opacity':startFreshChecked?'0.5':'1'}\" class=\"sheriff-col fr-grid-col backupfound-col restoreorfresh-col restorecb-col\">\n                                          <div class=\"fr-founddbbackup-restoreopt-wrapper restorebudbopt\" [ngClass]=\"{'fr-rec-opt-active':buDBChecked}\">\n                                            <ion-checkbox #restoreBUDBCB mode=\"ios\" checked={{buDBChecked}} class=\"sheriff-checkbox recordsrestoreorfresh-cb fr-restorebudbcb\"></ion-checkbox>\n                                            <div (click)=\"toggleBUDB(restoreBUDBCB.checked)\" class=\"restorebuorfreshlabel restore-label ion-activatable ripple-parent\" [ngStyle]=\"{'color':buDBChecked?'#ff9800':'#848484'}\">\n                                              <div class=\"resorfres-label-txt restore\">LOAD BACKUP</div>\n                                              <ion-ripple-effect></ion-ripple-effect>\n                                            </div>\n                                          </div>\n                                        </ion-col>\n                                        <ion-col [ngStyle]=\"{'opacity':buDBChecked||startFreshChecked?'0.5':'1'}\" size=\"1\" class=\"sheriff-col fr-grid-col backupfound-col restoreorfresh-col or-col\">\n                                          <div class=\"recordoptsorwrap\">OR</div>\n                                        </ion-col>\n                                        <ion-col [ngStyle]=\"{'opacity':buDBChecked?'0.5':'1'}\" class=\"sheriff-col fr-grid-col backupfound-col restoreorfresh-col freshstart-col\">\n                                          <div class=\"fr-founddbbackup-restoreopt-wrapper freshopt\" [ngClass]=\"{'fr-rec-opt-active':startFreshChecked}\">\n                                            <ion-checkbox #startFreshCB mode=\"ios\" checked={{startFreshChecked}} class=\"sheriff-checkbox recordsrestoreorfresh-cb fr-startfreshcb\"></ion-checkbox>\n                                            <div (click)=\"toggleStartFresh(startFreshCB.checked)\" class=\"restorebuorfreshlabel fresh-label ion-activatable ripple-parent\" [ngStyle]=\"{'color':startFreshChecked?'#ff9800':'#848484'}\">\n                                              <div class=\"resorfres-label-txt fresh\">START FRESH</div>\n                                              <ion-ripple-effect></ion-ripple-effect>\n                                            </div>\n                                          </div>\n                                        </ion-col>\n                                      </ion-row>\n                                    </ion-grid>\n                                    <!-- ------------------------------------------------------------------------- -->\n                                    <ion-grid *ngIf=\"buDBChecked&&!dloadInProgress&&!dlDidComplete&&!showMoreOpts\" class=\"sheriff-grid fr-grid restorebu-nextbtn-grid\">\n                                      <ion-row class=\"sheriff-row fr-grid restorebu-nextbtn-row\">\n                                        <ion-col size=\"12\" class=\"sheriff-col fr-grid-col backupfound-col restoreorfresh-col swipetapnext-col\">\n                                          <div class=\"sheriff-slider-bodynav-nextarrow-btn-inner sheriff-btn sheriff-fr-nextbtn ion-activatable ripple-parent restorebunextbtn\" (click)=\"restoreBUStart()\">\n                                            <ion-icon class=\"sheriff-fr-btn-ico sheriff-fr-nextbtn-ico\" name=\"download-outline\"></ion-icon>\n                                            <div class=\"sheriff-btn-txt sheriff-nextbtn-txt restorebutxt\">RESTORE BACKUP</div>\n                                            <ion-ripple-effect></ion-ripple-effect>\n                                          </div>\n                                        </ion-col>\n                                      </ion-row>\n                                    </ion-grid>\n                                    <!-- ------------------------------------------------------------------------- -->\n                                    <ion-grid *ngIf=\"startFreshChecked&&!dloadInProgress&&!dlDidComplete&&!showMoreOpts\" class=\"sheriff-grid fr-grid freshoptions-grid\">\n                                      <ion-row class=\"sheriff-row fr-grid-row freshoptions-row linediv-row\">\n                                        <ion-col class=\"sheriff-row fr-grid-row freshoptions-row linediv-col\">\n                                          <div class=\"sheriff-recopts-divline-div\"></div>\n                                        </ion-col>\n                                      </ion-row>\n                                      <ion-row class=\"sheriff-row fr-grid-row freshoptions-row usedefaults-btn-row\">\n                                        <ion-col size=\"12\" class=\"sheriff-col fr-grid-col freshoptions-col usedefaults-btn-col\">\n                                          <div class=\"sheriff-slider-bodynav-nextarrow-btn-inner sheriff-btn sheriff-fr-nextbtn ion-activatable ripple-parent usedefaultsbtn\" (click)=\"freshStartDLStart('all')\">\n                                            <ion-icon class=\"sheriff-fr-btn-ico sheriff-fr-nextbtn-ico\" name=\"file-tray-full-outline\"></ion-icon>\n                                            <div class=\"sheriff-btn-txt sheriff-nextbtn-txt allrecordstxt\">ALL RECORDS<span class=\"freshoptlabelbrack all\">(Default)</span></div>\n                                            <ion-ripple-effect></ion-ripple-effect>\n                                          </div>\n                                        </ion-col>\n                                      </ion-row>\n                                      <ion-row class=\"sheriff-row fr-grid-row freshoptions-row or-title-row\">\n                                        <ion-col class=\"sheriff-col fr-grid-col freshoptions-col or-title-col\">\n                                          <div class=\"ortitlewrapperdiv\">OR</div>\n                                        </ion-col>\n                                      </ion-row>\n                                      <ion-row class=\"sheriff-row fr-grid-row freshoptions-row moreopt-btn-row\">\n                                        <ion-col class=\"sheriff-col fr-grid-col freshoptions-col moreopt-btn-col\">\n                                          <div class=\"fr-records-options-limit-btn ion-activatable ripple-parent showmoreoptions\" (click)=\"showMoreOptions(true)\">\n                                            <ion-icon class=\"sheriff-fr-btn-ico sheriff-fr-nextbtn-ico optsico\" name=\"options-outline\"></ion-icon>\n                                            <div class=\"sheriff-btn-txt sheriff-dllimitopts-txt limitrecords\">LIMIT RECORDS<span class=\"freshoptlabelbrack options\">(Options)</span></div>\n                                            <ion-ripple-effect></ion-ripple-effect>\n                                          </div>\n                                        </ion-col>\n                                      </ion-row>\n                                    </ion-grid>\n                                    <!-- MUST RESTORE / NO API --------------------------------------------- -->\n                                    <div *ngIf=\"noBackupWillFail&&hasBUDB\" class=\"fr-records-maindiv-backupfound-wrapper\">\n                                      <ion-grid class=\"sheriff-grid mustrestorebu-grid\">\n                                        <ion-row class=\"sheriff-row mustrestorebu-row status-row\">\n                                          <ion-col size=\"12\" class=\"sheriff-col mustrestorebu-col status-col\">\n                                            <span *ngIf=\"mustRestoreStatus==='loading'\" style=\"color:var(--ion-color-primary-68)\">LOADING</span>\n                                            <span *ngIf=\"mustRestoreStatus==='loaded'\" style=\"color:var(--ion-color-primary)\">LOADED</span>\n                                            <span *ngIf=\"mustRestoreStatus==='failed'\" style=\"color:var(--ion-color-danger)\">FAILED</span>\n                                            <span *ngIf=\"mustRestoreStatus==='success'\" style=\"color:var(--ion-color-success)\">SUCCESS</span>\n                                          </ion-col>\n                                        </ion-row>\n                                        <ion-row class=\"sheriff-row mustrestorebu-row dbwplist-row\">\n                                          <ion-col *ngIf=\"mustRestoreStatus==='failed'\" size=\"12\" class=\"sheriff-col mustrestorebu-col importres-col failed-col\">\n                                            <div class=\"mustrestorebu-txt fail-l1\">Import Cloud Backup Failed</div>\n                                            <div class=\"mustrestorebu-txt fail-l2\">No Workplaces Detected</div>\n                                            <div class=\"mustrestorebu-txt fail-l3\"><span class=\"sheriff-brand-txt\">Sheriff</span> Setup Cannot Continue.</div>\n                                          </ion-col>\n                                          <ion-col *ngIf=\"mustRestoreStatus==='loaded'\" size=\"12\" class=\"sheriff-col mustrestorebu-col importres-col loaded-col\">\n                                            <div class=\"mustrestorebu-txt loaded-l1\"> Searching for Workplaces...</div>\n                                          </ion-col>    \n                                          <ion-col *ngIf=\"mustRestoreStatus==='success'\" size=\"12\" class=\"sheriff-col mustrestorebu-col importres-col success-col\">\n                                            <div class=\"mustrestorebu-txt success-count\"><span style=\"color:var(--ion-color-primary);font-weight:500\">{{forceRestoreWPArr.length}}</span> Workplaces Found</div>\n                                            <div class=\"mustrestorebu-txt success-wpitem-name\"><span style=\"font-weight:500;color:#eee\">{{forceRestoreWPName}}</span><span style=\"text-transform:uppercase\" *ngIf=\"forceRestoreWP.Code\"> ({{forceRestoreWP.Code}})</span></div>\n                                          </ion-col>                                      \n                                        </ion-row>\n                                      </ion-grid>\n                                    </div>                                   \n                                    <!-- ------------------------------------------------------------------- -->\n                                    <div *ngIf=\"dloadInProgress||dlDidComplete\" class=\"animate__animated animate__flipInX animate__faster\" id=\"downloading-selected-data-progress-wrapper-div records\">\n                                        <div *ngIf=\"dbImportDone\" class=\"dbimportdonebox\">\n                                            <ion-icon class=\"dbimportdone-ico\" name=\"shield-checkmark-outline\"></ion-icon>BACKUP RESTORED\n                                        </div>\n                                        <div class=\"fr-dl-startfreshmode-div-wrapper\">\n                                          <div class=\"fr-dl-startfreshmode-txt-div\">\n                                              <span class=\"dl-scope-txt label\">Download Scope:</span><span *ngIf=\"selectDataScope==='all'\" class=\"dl-scope-txt value default\">Default</span><span *ngIf=\"selectDataScope==='moreopts'\" class=\"dl-scope-txt value custom\">Custom</span>\n                                          </div> \n                                        </div>\n                                        <ion-grid *ngIf=\"!dbImportDone\" class=\"sheriff-grid modal-grid firstrun-grid dlprogress-grid records\">\n                                            <ion-row [ngStyle]=\"{'color': (dlBoxError) ? 'var(--ion-color-danger)' : 'var(--ion-color-success)'}\" class=\"sheriff-row modal-row firstrun-row dlprogress-row0 subheader records\">\n                                                <ion-col size=\"12\" class=\"sheriff-col modal-col firstrun-col dlprogress-colsubheader-col records\">\n                                                    <div class=\"dlprogress-subheader-wrapper\">\n                                                        <ion-icon *ngIf=\"dlBoxInProgress\" class=\"fr-inprogico first-run-btn getmyrecords-btn-ico subheader\" name=\"cloud-download\"></ion-icon>\n                                                        <ion-icon *ngIf=\"dlBoxError\" class=\"first-run-btn getmyrecords-btn-ico subheader\" name=\"alert-circle\"></ion-icon>\n                                                        <ion-icon *ngIf=\"dlBoxSuccess\" class=\"animate__animated animate__flipInX animate__faster first-run-btn getmyrecords-btn-ico subheader\" name=\"checkmark-circle\"></ion-icon>\n                                                        <span *ngIf=\"dlBoxInProgress\"><span id=\"ipt\"> {{dlInProgText}}</span></span>\n                                                        <span *ngIf=\"dlBoxError\"> failed</span>\n                                                        <span *ngIf=\"dlBoxSuccess\" class=\"animate__animated animate__flipInX animate__faster\"> success</span>\n                                                    </div>\n                                                </ion-col>\n                                            </ion-row>\n                                            <ion-row class=\"sheriff-row modal-row firstrun-row dlprogress-row1 statustexttop records\">\n                                                <ion-col size=\"12\" class=\"sheriff-col modal-col firstrun-col dlprogress-col statustexttop-action-mode-col records\">\n                                                    <div *ngIf=\"!dlBoxSuccess\">\n                                                        <span class=\"statustexttop-action-txt\" id=\"fr-dl-action-target\">{{nowDataTarget}}</span>\n                                                        <span *ngIf=\"!dlMyRunning&&thisDataValue!==-1&&thisDataMax!==-1\" class=\"statustexttop-action-txt lilsep\"> - </span>\n                                                        <span *ngIf=\"!dlMyRunning&&thisDataValue!==-1&&thisDataMax!==-1\" class=\"statustexttop-action-txt nowvalue\">{{thisDataValue}}</span>\n                                                        <span *ngIf=\"!dlMyRunning&&thisDataValue!==-1&&thisDataMax!==-1\" class=\"statustexttop-action-txt lilslash\">/</span>\n                                                        <span *ngIf=\"!dlMyRunning&&thisDataValue!==-1&&thisDataMax!==-1\" class=\"statustexttop-action-txt nowmax\">{{thisDataMax}}</span>\n                                                    </div>\n                                                    <div style=\"color:var(--ion-color-success)\" *ngIf=\"dlBoxSuccess\">All Records Completed</div>\n                                                </ion-col>\n                                            </ion-row>\n                                            <ion-row class=\"sheriff-row modal-row firstrun-row dlprogress-row1 progressbar-row\">\n                                                <ion-col size=\"12\" class=\"sheriff-col modal-col firstrun-col dlprogress-col progressbar-col\">\n                                                    <div id=\"fr-data-progressbar-wrapper-div\">\n                                                        <ion-progress-bar class=\"frpbar\" id=\"fr-dl-getthis-pbar\" value={{getThisPBar}} type=\"determinate\"></ion-progress-bar>\n                                                        <ion-progress-bar class=\"frpbar\" id=\"fr-dl-getall-pbar\" value={{getAllPBar}} type=\"determinate\"></ion-progress-bar>\n                                                        <div id=\"firstrun-download-progress-bar-perc-overlay\">{{getAllPerc}}<span id=\"fr-dl-getallpersign\">%</span></div>\n                                                    </div>\n                                                </ion-col>\n                                            </ion-row>\n                                            <ion-row class=\"sheriff-row modal-row firstrun-row dlprogress-row1 statustextbottom\">\n                                                <ion-col size=\"6\" class=\"sheriff-col modal-col firstrun-col dlprogress-col statustextbottom-1 xoutofy\">\n                                                    <div id=\"statustextbottom-xoutofy-wrapper\">\n                                                        <span class=\"xoy done\">{{getAllCount}}</span><span class=\"xoy sep\"> / </span><span class=\"xoy total\">{{getAllTotal}}</span>\n                                                    </div>\n                                                </ion-col>\n                                                <ion-col size=\"6\" class=\"sheriff-col modal-col firstrun-col dlprogress-col statustextbottom timeremain\">\n                                                    <div *ngIf=\"!dlBoxSuccess\" id=\"statustextbottom-timeremain-txt-wrapper\">Running</div>\n                                                    <div *ngIf=\"dlBoxSuccess\" style=\"color:var(--ion-color-success)\" id=\"statustextbottom-timeremain-txt-wrapper\">DONE</div>\n                                                </ion-col>\n                                            </ion-row>\n                                            <ion-row class=\"sheriff-row modal-row firstrun-row dlprogress-images images-bottom\">\n                                                <ion-col size=\"12\" class=\"sheriff-col fr-dl-images-col title-col\">\n                                                  <div class=\"fr-dl-images-col title-txt-wrap\"><span class=\"title-txt-wrap-label-span\">saved images:</span><span class=\"title-txt-wrap-label-count-span\">{{convImgs.length}}</span></div>\n                                                </ion-col>\n                                                <ion-col size=\"12\" class=\"sheriff-col fr-dl-images-col images-col\">\n                                                    <div class=\"fr-dl-images-wrapper\">\n                                                        <img *ngFor=\"let convImgUri of convImgs; let i = index\" src=\"{{convImgUri}}\" class=\"fr-conv-image fr-conv-img-{{i}} animate__animated animate__zoomIn animDel-{{((i+1)*50)+100}} animDur-200\">\n                                                    </div>\n                                                    <div class=\"fr-cl-images-gradient-cover-div\"></div>\n                                                </ion-col>\n                                            </ion-row>\n                                        </ion-grid>\n                                    </div>\n                                    <!-- ------------------------------------------------------------------- -->\n                                    <ion-grid *ngIf=\"showMoreOpts&&!dloadInProgress&&!dlDidComplete\" class=\"sheriff-grid firstrun-grid records-grid select-moreopts-grid\">\n                                        <ion-row class=\"sheriff-row firstrun-row records-row select-moreopts-row backbtnrow\">\n                                          <ion-col size=\"6\" class=\"sheriff-col firstrun-col records-col select-moreopts-col backbtn-col\">\n                                            <ion-button (click)=\"showMoreOptions(false)\" class=\"sheriff-btn sheriff-fr-moreopts-backbtn\">\n                                              <ion-icon class=\"sheriff-btn-ico sheriff-fr-moreopts-backbtn-ico\" name=\"arrow-back-outline\"></ion-icon>\n                                              <div class=\"sheriff-btn-txt sheriff-fr-moreopts-backbtn-txt\">cancel/back</div>\n                                            </ion-button>\n                                          </ion-col>\n                                          <ion-col size=\"6\" class=\"sheriff-col firstrun-col records-col select-moreopts-col startdl-col\">\n                                            <ion-button (click)=\"freshStartDLStart('moreopts')\" class=\"sheriff-btn sheriff-fr-moreopts-startdl\">\n                                              <div class=\"sheriff-btn-txt sheriff-fr-moreopts-startdl-txt\">save/start</div>\n                                              <ion-icon class=\"sheriff-btn-ico sheriff-fr-moreopts-startdl-ico\" name=\"play\"></ion-icon>\n                                            </ion-button>\n                                          </ion-col>\n                                        </ion-row>\n                                        <ion-row class=\"sheriff-row firstrun-row records-row select-moreopts-row row0\">\n                                            <ion-col size=\"2\" class=\"sheriff-col modal-col firstrun-col selectdata-col moreopts-col subheading-col skipoff\">\n                                                <div class=\"moreopts-subheading-wrapper recordtype\">skip</div>\n                                            </ion-col>\n                                            <ion-col size=\"4\" class=\"sheriff-col modal-col firstrun-col selectdata-col moreopts-col subheading-col recordtype\">\n                                                <div class=\"moreopts-subheading-wrapper recordtype\">limit by type</div>\n                                            </ion-col>\n                                            <ion-col size=\"6\" class=\"sheriff-col modal-col firstrun-col selectdata-col moreopts-col subheading-col itemlimit\">\n                                                <div class=\"moreopts-subheading-wrapper recordtype\">limit by no.</div>\n                                            </ion-col>\n                                        </ion-row>\n                                        <ion-row *ngFor=\"let record of recordsUserOptsArr;let i=index\" class=\"sheriff-row firstrun-row records-row select-moreopts-row row{{i+1}} {{record.ep}} animate__animated animate__zoomIn animDel-{{((i+1)*100)+200}} animDur-400 {{record.checked}}\">\n                                            <ion-col size=\"2\" class=\"sheriff-col modal-col firstrun-col selectdata-col moreopts-col dltype-toggle-col {{record.ep}}\">\n                                                <ion-toggle disabled=\"{{record.disabled}}\" (ionChange)=\"recordMOToggleChange(i,record.ep)\" checked=\"{{record.checked}}\" mode=\"ios\" class=\"sheriff-toggle firstrun-toggle records-toggle {{record.ep}}\"></ion-toggle>\n                                            </ion-col>\n                                            <ion-col size=\"4\" class=\"sheriff-col modal-col firstrun-col selectdata-col moreopts-col dltype-label-col {{record.ep}}\">\n                                                <span class=\"fr-records-moreopts-itemtypelabel {{record.checked}}\">{{record.ep}}</span>\n                                                <div *ngIf=\"!record.disabled&&record.checked\" class=\"fr-records-moreopts-itemcount-floater {{record.ep}} gotval\">\n                                                    <span [ngStyle]=\"{'color':(record.value<record.max)?'#ff9800':'var(--ion-color-success)'}\">{{record.value}}</span>\n                                                    <span style=\"color:#eee;font-weight:300\" class=\"dlnosdiv\"> / </span>{{record.max}}\n                                                </div>\n                                                <div *ngIf=\"record.disabled||!record.checked\" class=\"fr-records-moreopts-itemcount-floater {{record.ep}} noaccesszero\">\n                                                    <span style=\"color:#848484;font-weight:300\">0 / {{record.max}}</span>\n                                                </div>\n                                            </ion-col>\n                                            <ion-col size=\"6\" class=\"sheriff-col modal-col firstrun-col selectdata-col moreopts-col dltype-range-col {{record.ep}}\">\n                                                <ion-range *ngIf=\"!record.disabled&&record.checked\" pin=\"true\" (ionChange)=\"recordMORangeChange(i,record.ep)\" mode=\"ios\" class=\"swiper-no-swiping sheriff-range firstrun-range records-range {{record.ep}}\" min=\"{{record.min}}\" max=\"{{record.max}}\" value=\"{{record.value}}\"></ion-range>\n                                                <div class=\"records-range offlabel\" *ngIf=\"!record.checked&&record.max>=1\">off / skip</div>\n                                                <div class=\"records-range offlabel\" *ngIf=\"record.disabled&&record.max===0\">no access/records</div>\n                                            </ion-col>\n                                        </ion-row>\n                                    </ion-grid>\n                                    <!-- ------------------------------------------------------------------- -->\n                                </div>\n                                <div *ngIf=\"dlDidComplete\" class=\"fr-records-alreadydone-notice-wrapper\">\n                                    <div class=\"fr-records-alreadydone-notice-inner\">\n                                        <div class=\"fr-records-alreadydone-notice-text\">\n                                            <img class=\"fr-records-alreadydone-img completedstamp\" src=\"../../../assets/img/sheriff-fr-completed-stamp.svg\">\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </ion-slide>\n                        <!-- /////////////////////////////////////////////////////////////////// -->\n                        <!-- SLIDE THREE /////////////////////////////////////////////////////// -->\n                        <!-- /////////////////////////////////////////////////////////////////// -->\n                        <ion-slide class=\"frs-slide\" id=\"frslide3-youralerts\">\n                            <div class=\"fr-slide-flexy-wrap slide3\">\n                                <div class=\"frs-slide-grid-wrapper title-grid alerts\">\n                                    <ion-grid class=\"sheriff-grid modal-grid firstrun-grid heading-grid alerts\">\n                                        <ion-row class=\"sheriff-row modal-row mainheading-row alerts\">\n                                            <ion-col class=\"sheriff-col modal-col mainheading-co alerts\">\n                                                <div class=\"sheriff-modal-mainheading-title-txt alerts\"><span class=\"fr-your\">your</span>ALERTS</div>\n                                            </ion-col>\n                                        </ion-row>\n                                    </ion-grid>\n                                </div>\n                                <div class=\"infoandcontent-grid-wrapper-div alerts\">\n                                    <ion-grid class=\"sheriff-grid modal-grid firstrun-grid infocontent-grid alerts\">\n                                        <ion-row class=\"sheriff-row modal-row firstrun-row infocontent-row alerts\">\n                                            <ion-col class=\"sheriff-col modal-col firstrun-col infocontent-col alerts\">\n                                                <p class=\"fr-alerts-p1\">Notifications can be genuinely <span style=\"color:#ff9800\">helpful </span>but, done wrong, they can also be<span style=\"color:#ff9800\"> infuriating.</span>\n                                                    <p class=\"fr-alerts-p2\">You can always<span style=\"color:#ff9800\"> adjust </span><span class=\"sheriff-brand-txt smaller\">Sheriff</span> alerts via <span style=\"font-style:italic;color:#ff9800\">Settings</span> but, for a start,\n                                                        confirm or change our defaults:</p>\n                                            </ion-col>\n                                        </ion-row>\n                                    </ion-grid>\n                                </div>\n                                <div class=\"alertopts-grid-wrapper-div alerts methods\">\n                                    <ion-grid class=\"sheriff-grid modal-grid firstrun-grid alerts-grid alertmethods-grid\">\n                                        <ion-row class=\"sheriff-row modal-row firstrun-row alertssubheader-row alertmethods\">\n                                            <ion-col size=\"12\" class=\"sheriff-col modal-col firstrun-col alertssubheader-col\">\n                                                <div class=\"fr-alerts-subheader-text alertmethods\">alert methods</div>\n                                            </ion-col>\n                                        </ion-row>\n                                        <ion-row class=\"sheriff-row modal-row firstrun-row alerts-cb-row alertmethods phone\">\n                                            <ion-col size=\"4\" class=\"sheriff-col firstrun-col alertmethods-col phone\">\n                                                <div (click)=\"toggleAlertM($event,'phone')\" class=\"fr-alertmethods-wrapper phone {{finalModalData.alertOpts.alertMethods.value.phone}}\">\n                                                    <ion-checkbox class=\"sheriff-checkbox fr-alertmethods-cb\" [mode]=\"'ios'\" [checked]=\"finalModalData.alertOpts.alertMethods.value.phone\"></ion-checkbox>\n                                                    <ion-icon class=\"alertmethods-ico phone {{finalModalData.alertOpts.alertMethods.value.phone}}\" name=\"notifications\"></ion-icon>\n                                                    <div class=\"alertmethods-label phone {{finalModalData.alertOpts.alertMethods.value.phone}}\">Phone</div>\n                                                </div>\n                                            </ion-col>\n                                            <ion-col size=\"4\" class=\"sheriff-col firstrun-col alertmethods-col calendar\">\n                                              <div (click)=\"toggleAlertM($event,'calendar')\" class=\"fr-alertmethods-wrapper calendar {{finalModalData.alertOpts.alertMethods.value.calendar}}\">\n                                                  <ion-checkbox class=\"sheriff-checkbox fr-alertmethods-cb calendar\" [mode]=\"'ios'\" [checked]=\"finalModalData.alertOpts.alertMethods.value.calendar\"></ion-checkbox>\n                                                  <ion-icon class=\"alertmethods-ico calendar {{finalModalData.alertOpts.alertMethods.value.calendar}}\" name=\"calendar\"></ion-icon>\n                                                  <div class=\"alertmethods-label calendar {{finalModalData.alertOpts.alertMethods.value.calendar}}\">Calendar</div>\n                                              </div>\n                                          </ion-col>\n                                          <ion-col size=\"4\" class=\"sheriff-col firstrun-col alertmethods-col email\">\n                                            <div (click)=\"toggleAlertM($event,'email')\" class=\"fr-alertmethods-wrapper email {{finalModalData.alertOpts.alertMethods.value.email}}\">\n                                                <ion-checkbox class=\"sheriff-checkbox fr-alertmethods-cb email\" [mode]=\"'ios'\" [checked]=\"finalModalData.alertOpts.alertMethods.value.email\"></ion-checkbox>\n                                                <ion-icon class=\"alertmethods-ico email {{finalModalData.alertOpts.alertMethods.value.email}}\" name=\"mail\"></ion-icon>\n                                                <div class=\"alertmethods-label email {{finalModalData.alertOpts.alertMethods.value.email}}\">Email</div>\n                                            </div>\n                                          </ion-col>\n                                        </ion-row>\n                                    </ion-grid>\n                                </div>\n                                <div class=\"alertopts-grid-wrapper-div alerts events\">\n                                    <ion-grid class=\"sheriff-grid modal-grid firstrun-grid alerts-grid alertevents-grid\">\n                                        <ion-row class=\"sheriff-row modal-row firstrun-row alertssubheader-row alertevents\">\n                                            <ion-col size=\"12\" class=\"sheriff-col modal-col firstrun-col alertssubheader-col\">\n                                                <div class=\"fr-alerts-subheader-text alertmethods\">alert events</div>\n                                            </ion-col>\n                                        </ion-row>\n                                        <ion-row class=\"sheriff-row modal-row firstrun-row alerts-cb-row alertevents\">\n                                            <ion-col size=\"4\" class=\"sheriff-col firstrun-col alertevents-col shift\">\n                                                <div (click)=\"toggleAlertE($event,'shift')\" class=\"fr-alertevents-wrapper shift {{finalModalData.alertOpts.alertEvents.value.shift}}\">\n                                                    <ion-checkbox [ngStyle]=\"{'display':(finalModalData.alertOpts.alertEvents.value.shift)?'inline-block':'none'}\" class=\"sheriff-checkbox fr-alertevents-cb shift\" [mode]=\"'ios'\" [checked]=\"finalModalData.alertOpts.alertEvents.value.shift\"></ion-checkbox>\n                                                    <ion-icon class=\"alertevents-ico shift {{finalModalData.alertOpts.alertEvents.value.shift}}\" name=\"alarm\"></ion-icon>\n                                                    <div class=\"alertevents-label shift {{finalModalData.alertOpts.alertEvents.value.shift}}\">Shift</div>\n                                                </div>\n                                            </ion-col>\n                                            <ion-col size=\"4\" class=\"sheriff-col firstrun-col alertevents-col task\">\n                                              <div (click)=\"toggleAlertE($event,'task')\" class=\"fr-alertevents-wrapper task {{finalModalData.alertOpts.alertEvents.value.task}}\">\n                                                  <ion-checkbox [ngStyle]=\"{'display':(finalModalData.alertOpts.alertEvents.value.task)?'inline-block':'none'}\" class=\"sheriff-checkbox fr-alertevents-cb task\" [mode]=\"'ios'\" [checked]=\"finalModalData.alertOpts.alertEvents.value.task\"></ion-checkbox>\n                                                  <ion-icon class=\"alertevents-ico task {{finalModalData.alertOpts.alertEvents.value.task}}\" name=\"list\"></ion-icon>\n                                                  <div class=\"alertevents-label task {{finalModalData.alertOpts.alertEvents.value.task}}\">Task</div>\n                                              </div>\n                                          </ion-col>\n                                          <ion-col class=\"sheriff-col firstrun-col alertevents-col tsheet\">\n                                            <div (click)=\"toggleAlertE($event,'tsheet')\" class=\"fr-alertevents-wrapper tsheet {{finalModalData.alertOpts.alertEvents.value.tsheet}}\">\n                                                <ion-checkbox [ngStyle]=\"{'display':(finalModalData.alertOpts.alertEvents.value.tsheet)?'inline-block':'none'}\" class=\"sheriff-checkbox fr-alertevents-cb tsheet\" [mode]=\"'ios'\" [checked]=\"finalModalData.alertOpts.alertEvents.value.tsheet\"></ion-checkbox>\n                                                <ion-icon class=\"alertevents-ico tsheet {{finalModalData.alertOpts.alertEvents.value.tsheet}}\" name=\"stopwatch\"></ion-icon>\n                                                <div class=\"alertevents-label shift {{finalModalData.alertOpts.alertEvents.value.tsheet}}\">TSheet</div>\n                                            </div>\n                                        </ion-col>\n                                        </ion-row>\n                                    </ion-grid>\n                                </div>\n                                <div class=\"fr-swipe2continue-wrapper dimable\">\n                                    <span class=\"sheriff-green\">CHECK<span style=\"color:#aaa;padding:0px 2px\">/</span><span style=\"color:var(--ion-color-danger)\">CHANGE</span></span>\n                                    <ion-icon class=\"fr-s2c-ico\" name=\"remove-outline\"></ion-icon>\n                                    <span class=\"fr-continueref\">SWIPE TO FINISH</span>\n                                    <ion-icon class=\"fr-s2c-ico\" name=\"chevron-forward-outline\"></ion-icon>\n                                </div>\n                            </div>\n                        </ion-slide>\n                        <!-- /////////////////////////////////////////////////////////////////// -->\n                    </ion-slides>\n                    <div class=\"sheriff-pagination-backer\"></div>\n                    <div *ngIf=\"usingDefaults\" class=\"fr-using-defaults-notice-wrapper outter animate__animated animate__zoomIn\">\n                      <div class=\"fr-using-defaults-notice-wrapper inner\">\n                        <div class=\"fr-using-defaults-notice-content-wrapper\"> \n                          <ion-grid class=\"sheriff-grid using-defaults-grid\">\n                            <ion-row class=\"sheriff-row using-defaults-row\">\n                              <ion-col size=\"2\" class=\"sheriff-col using-defaults-col ico-col\">\n                                <ion-icon class=\"fr-using-defaults-bigico\" name=\"play-skip-forward\"></ion-icon>      \n                              </ion-col>\n                              <ion-col size=\"10\" class=\"sheriff-col using-defaults-col txt-col\">\n                                <div class=\"fr-using-defaults-txt line1\">\n                                  <span class=\"fr-fastfwd-txt\">using</span><span class=\"fr-ff-using-def-txt\">defaults</span>\n                                </div>\n                                <div class=\"fr-using-defaults-txt line2\">\n                                  <span class=\"fr-ff-sheriff-txt\">sheriff</span><span class=\"fr-ff-will-txt\">will auto-complete</span>\n                                </div>\n                                <div class=\"fr-using-defaults-txt line3\">\n                                  <span class=\"fr-ff-andenter-txt\">& enter main app</span><span class=\"fr-ff-sheriff-txt shortly\">shortly</span>\n                                </div>\n                              </ion-col>\n                            </ion-row>\n                          </ion-grid>\n                        </div>\n                      </div>\n                    </div>\n                </ion-col>\n            </ion-row>\n        </ion-grid>\n    </div>\n    <!-- SLIDER NAV START /////////////////////////////////////////////////////////////////// -->\n    <div class=\"sheriff-frmodal-slider-section-wrapper nav\">\n        <ion-grid *ngIf=\"!dloadInProgress&&!usingDefaults\" class=\"sheriff-grid frmodal-slider-nav-grid\">\n            <ion-row *ngIf=\"thisSlideNo!==3\" class=\"sheriff-row frmodal-slider-nav-row\">\n                <ion-col size=\"2\" class=\"sheriff-col sheriff-frmodal-slider-nav-col1 prev-arrow\">\n                    <div *ngIf=\"!lockPrev\" class=\"sheriff-slider-nav-arrow-wrapper back-arrow-outter-wrapper\" (click)=\"slidePrev(slideWithNav)\">\n                        <div class=\"sheriff-slider-nav-arrow-wrapper forward-arrow-inner-wrapper\">\n                            <img class=\"sheriff-slider-arrow-icon frslidericon backicon\" src=\"../../../assets/img/sheriff-firstrun-backarrow.svg\">\n                        </div>\n                    </div>\n                </ion-col>\n                <ion-col size=\"8\" class=\"sheriff-col sheriff-frmodal-slider-nav-col2 navbtns\">\n                    <div *ngIf=\"thisSlideNo===1&&wpNoOf<1\" (click)=\"exitSheriff()\" class=\"firstrun-searchformissing-workplace-btn firstrun-btn firstrun-corenavbtn nowps exitsheriff ion-activatable ripple-parent\">\n                        <div class=\"fr-exitsheriff-btn-inner-wrap\">\n                          <ion-icon class=\"fr-exitsheriff-ico\" name=\"exit-outline\"></ion-icon>\n                          <div class=\"fr-existsheriff-btn-txt\">Exit Sheriff</div>\n                        </div>\n                        <ion-ripple-effect></ion-ripple-effect>\n                    </div>\n                    <div *ngIf=\"thisSlideNo===1&&wpNoOf===1\" (click)=\"useDefaults()\" class=\"firstrun-btn firstrun-corenavbtn skip ion-activatable ripple-parent\" id=\"firstrun-skipdefault-btn\">\n                      <div class=\"fr-defaultsskipsheriff-btn-inner-wrap\">\n                        <div class=\"fr-defaultsskip-btn-txt\">Use Default/Skip</div>\n                        <ion-icon class=\"fr-skip-ico\" name=\"play-skip-forward-outline\"></ion-icon>\n                      </div>\n                      <ion-ripple-effect></ion-ripple-effect>\n                    </div>\n                </ion-col>\n                <ion-col size=\"2\" class=\"sheriff-col sheriff-frmodal-slider-nav-col3 next-arrow\">\n                    <div  *ngIf=\"!lockNext\" class=\"sheriff-slider-nav-arrow-wrapper forward-arrow-outter-wrapper\" (click)=\"slideNext(slideWithNav)\">\n                        <div class=\"sheriff-slider-nav-arrow-wrapper forward-arrow-inner-wrapper\">\n                            <img class=\"sheriff-slider-arrow-icon frslidericon forwardicon\" src=\"../../../assets/img/sheriff-firstrun-fwdarrow.svg\">\n                        </div>\n                    </div>\n                </ion-col>\n            </ion-row>\n            <!-- FINAL NAV ROW ---------------------------------------------------------- -->\n            <ion-row *ngIf=\"thisSlideNo===3\" class=\"sheriff-row frmodal-slider-nav-row\">\n                <ion-col size=\"2\" class=\"sheriff-col sheriff-frmodal-slider-nav-col1 prev-arrow\">\n                    <div *ngIf=\"!lockPrev\" class=\"sheriff-slider-nav-arrow-wrapper back-arrow-outter-wrapper\" (click)=\"slidePrev(slideWithNav)\">\n                        <div class=\"sheriff-slider-nav-arrow-wrapper forward-arrow-inner-wrapper\">\n                            <img class=\"sheriff-slider-arrow-icon frslidericon backicon\" src=\"../../../assets/img/sheriff-firstrun-backarrow.svg\">\n                        </div>\n                    </div>\n                </ion-col>\n                <ion-col size=\"4\" class=\"sheriff-col sheriff-frmodal-slider-nav-col2 navbtns skip\"></ion-col>\n                <ion-col size=\"6\" class=\"sheriff-col sheriff-frmodal-slider-nav-col3 next-arrow lastslidealigncolcenter\">\n                    <ion-button (click)=\"firstRunCompleted()\" class=\"animate__animated animate__pulse animate__infinite animate__slow firstrun-btn firstrun-corenavbtn closemodal\" id=\"firstrun-closemodal-btn\">\n                        <div class=\"fr-letsgobtn-txt1\"><span class=\"start\">SAVE</span><span class=\"andwha\">&</span><span class=\"enter\">ENTER<span style=\"font-weight:300;padding-left:1px;\">></span></span>\n                        </div>\n                        <div class=\"fr-letsgobtn-txt2\">SHERIFF</div>\n                        <ion-icon class=\"letsgoico\" name=\"rocket-outline\"></ion-icon>\n                    </ion-button>\n                </ion-col>\n            </ion-row>\n        </ion-grid>\n    </div>\n    <!-- SLIDER NAV END /////////////////////////////////////////////////////////////////// -->\n    <!-- MODAL FEAT PICS START //////////////////////////////////////////////////////////// -->\n    <div id=\"fr-featimages-wrapper\">\n        <!-- SLIDE 1 BACKGROUND -->\n        <div class=\"fr-featimg-wrapper slide1\">\n            <div class=\"slide1skybacker\"></div>\n            <div class=\"stars\"></div>\n            <div class=\"clouds\"></div>\n            <div class=\"slide-bg slide1 fore\"></div>\n        </div>\n        <!-- SLIDE 2 BACKGROUND -->\n        <div class=\"fr-featimg-wrapper slide2\">\n            <div class=\"slide-bg slide2\">\n                <div class=\"stars2\"></div>\n                <div id=\"slide2-sunlayer\"></div>\n                <div class=\"slide-bg slide2 shootingstar\">\n                    <div class=\"shooting\">\n                        <div class=\"core\"></div>\n                        <div class=\"trail\"></div>\n                    </div>\n                </div>\n                <div class=\"clouds2\"></div>\n                <div class=\"slide-bg slide2 fore\"></div>\n            </div>\n        </div>\n        <!-- SLIDE 3 BACKGROUND -->\n        <div class=\"fr-featimg-wrapper slide3\">\n            <div class=\"slide-bg slide3\">\n                <div class=\"stars\"></div>\n                <div class=\"clouds3\"></div>\n                <div class=\"slide-bg slide3 fore\"></div>\n            </div>\n        </div>\n    </div>\n    <!-- MODAL FEAT PICS END //////////////////////////////////////////////////////////// -->\n</ion-content>");

/***/ }),

/***/ 19234:
/*!******************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/modals/inapp-pushnote/inapp-pushnote.page.html ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div class=\"inapp-pushnote-outter-wrapper\">\n  <div *ngIf=\"modalTitle!==null&&modalBody!null\" class=\"inapp-pushnote-inner-wrapper\">\n    <ion-grid class=\"sheriff-grid inapp-pushnote-grid header-grid\">\n      <ion-row class=\"sheriff-row inapp-pushnote-header-row\">\n          <ion-col size=\"12\" class=\"sheriff-col inapp-pushnote-header-col title-col\">\n              <div class=\"inapp-pushnote-header-title-wrapper\">{{modalTitle}}</div> \n          </ion-col>\n      </ion-row>\n    </ion-grid>\n    <ion-grid class=\"sheriff-grid inapp-pushnote-grid message-grid\">\n      <ion-row class=\"sheriff-row inapp-pushnote-row message-row\">\n        <ion-col class=\"sheriff-col inapp-pushnote-col message-col\">\n          <div class=\"sheriff-inapppushnote-div\">{{modalBody}}</div>\n        </ion-col>\n      </ion-row>\n    </ion-grid>\n    <ion-grid class=\"sheriff-grid inapp-pushnote-grid footer-grid\">\n      <ion-row class=\"sheriff-row inapp-pushnote-footer-row\">\n          <ion-col size=\"12\" class=\"sheriff-col inapp-pushnote-footer-col closebtn-col\">\n              <ion-button (click)=\"closeModal()\" class=\"sheriff-btn settings-alertschedule-close-btn\">\n                <ion-icon name=\"close\" class=\"sheriff-btn-ico settings-alertschedule-close-btn-ico\"></ion-icon>\n                <div class=\"sheriff-btn-txt settings-alertschedule-close-btn-txt\">close</div>\n              </ion-button>\n          </ion-col>          \n      </ion-row>\n    </ion-grid>\n  </div>\n</div>");

/***/ }),

/***/ 2729:
/*!********************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/modals/profilecsselect/profilecsselect.page.html ***!
  \********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-content class=\"profile-csselectlist-listcontent\">\n    <div slot=\"fixed\" class=\"profile-csselectlist-headerwrapper\">\n        <ion-grid class=\"sheriff-grid profile-csselectlist-header-grid\">\n            <ion-row class=\"sheriff-row profile-csselectlist-header-title-row\">\n                <ion-col size=\"2\" class=\"sheriff-col profile-csselectlist-header-space-col\"></ion-col>\n                <ion-col size=\"8\" class=\"sheriff-col profile-csselectlist-header-title-col\">\n                    <div class=\"profile-csselectlist-header-title-wrapper\">{{labelProp}}</div>\n                </ion-col>\n                <ion-col size=\"2\" class=\"sheriff-col profile-csselectlist-header-close-col\">\n                  <ion-button (click)=\"cancelChange()\" class=\"sheriff-btn profile-csselectlist-close-btn\">\n                    <ion-icon class=\"sheriff-btn-ico css-selectlist-close-ico\" name=\"close\"></ion-icon>\n                  </ion-button>\n                </ion-col>\n            </ion-row>\n            <ion-row class=\"sheriff-row profile-csselectlist-header-current-selection-row\">\n                <ion-col size=\"12\" class=\"sheriff-col profile-csselectlist-currentselection-col\">\n                    <div class=\"profile-csselectlist-currentselection-wrapper\"><span *ngIf=\"noSelection===false&&selectedSubT!==null\">Selected: {{selectedSubT}}</span><span *ngIf=\"noSelection===true\">Select a {{labelProp}}</span></div>\n                </ion-col>\n            </ion-row>\n        </ion-grid>\n    </div>\n    <div class=\"profile-csselectlist-list-outterwrapper-div\">\n      <ion-searchbar slot=\"fixed\" *ngIf=\"labelProp==='Country'\" #cSearchBar class=\"sheriff-searchbar profile-clist-searchbar\" [type]=\"'text'\" [showClearButton]=\"true\" [searchIcon]=\"'search'\" [placeholder]=\"'Start typing...'\" [mode]=\"'md'\" [inputmode]=\"'search'\" [debounce]=\"250\" [animated]=\"false\" [value] (ionInput)=\"countrySearch(cSearchBar.value)\"></ion-searchbar>\n        <div *ngIf=\"labelProp==='Country'\" class=\"sheriff-countrysb-status-wrapper\">\n          <div *ngIf=\"sbCs<minSBCs\" class=\"sheriff-countrysb-xmorechars-txt\">{{minSBCs-sbCs}} more characters</div>\n          <div *ngIf=\"sbCs>=minSBCs&&!isSearch\" class=\"sheriff-countrysb-results-txt\">\n            <span [ngStyle]=\"{'color':listData.length===0?'var(--ion-color-danger)':'#848484'}\" class=\"sb-noresults\">found {{listData.length}} matches</span>\n          </div>\n          <div *ngIf=\"sbCs>=minSBCs&&isSearch\" class=\"sheriff-countrysb-status-spinner-wrapper\">\n            <ion-spinner *ngIf=\"\" style=\"--color:#848484\" class=\"sheriff-countrysb-search-spinner\" [name]=\"'dots'\" [duration]=\"500\"></ion-spinner>\n          </div>\n        </div>\n        <ion-list *ngIf=\"listData.length>0&&!isSearch\" class=\"profile-csselectlist-list\">\n            <ion-item *ngFor=\"let cs of listData\" (click)=\"selectItem(cs)\" [disabled]=\"cs.isChecked\" [button]=\"true\" [lines]=\"'none'\" [ngClass]=\"{'csitem-ischecked':cs.isChecked}\" class=\"sheriff-item profile-csselectlist-item\">\n              <ion-grid class=\"sheriff-grid profile-csselectlist-item-grid\">\n                <ion-row class=\"sheriff-row profile-csselectlist-item-row\">\n                  <ion-col size=\"2\" class=\"sheriff-col profile-csselectlist-item-col cb-col\">\n                    <ion-checkbox class=\"profile-csselectlist-item-checkbox\" [mode]=\"'ios'\" [checked]=\"cs.isChecked\"></ion-checkbox>\n                  </ion-col>\n                  <ion-col size=\"10\" class=\"sheriff-col profile-csselectlist-item-col label-col\">\n                    <div class=\"profile-csselectlist-item-label-wrapper\">\n                      {{cs.label}}\n                    </div>\n                  </ion-col>\n                </ion-row>\n              </ion-grid>\n            </ion-item>\n        </ion-list>\n    </div>\n    <div slot=\"fixed\" class=\"profile-csselectlist-footerwrapper\">\n        <ion-grid slot=\"fixed\" class=\"sheriff-grid profile-csselectlist-footer-grid\">\n            <ion-row class=\"sheriff-row profile-csselectlist-footer-row\">\n              <ion-col size=\"12\" class=\"sheriff-col profile-cssselectlist-footer-col\">\n                <div class=\"profile-csselect-list-footer-div-wrapper\"></div>\n              </ion-col>\n            </ion-row>\n        </ion-grid>\n    </div>\n</ion-content>");

/***/ }),

/***/ 29695:
/*!*******************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/popovers/datepresets/datepresets.component.html ***!
  \*******************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-grid class=\"sheriff-grid popover-grid dppop-grid\">\n    <ion-row (click)=\"presetSelect(preset.name,i)\" *ngFor=\"let preset of presets;let i = index\" class=\"ion-activatable ripple-parent sheriff-row dppop-row preset{{i}} preset{{preset.name}}\" [ngClass]=\"{'presetselected':preset.selected}\">\n        <ion-col size=\"12\" class=\"sheriff-col dppop-col dppop-label-col ion-activatable ripple-parent\" [ngStyle]=\"{'color': (preset.selected) ? '#aaaaaa' : '#848484'}\">\n            <div class=\"dppop-label\">{{preset.label}}</div>\n            <ion-ripple-effect></ion-ripple-effect>\n        </ion-col>\n        <div class=\"pop-selected-bar\" [ngClass]=\"{'on':preset.selected}\"></div>\n    </ion-row>\n</ion-grid>");

/***/ }),

/***/ 43482:
/*!*****************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/popovers/detailmenu/detailmenu.component.html ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div class=\"detail-edit-main-wrapper\">\n    <ion-grid class=\"sheriff-grid detail-edit-popover\">\n        <ion-row class=\"sheriff-row detail-edit-row save-row ion-activatable ripple-parent\">\n            <ion-col class=\"sheriff-col detail-edit-col save-label-col\">\n                <div (click)=\"closePopover('save')\" class=\"detail-edit-item update\">\n                    <ion-icon class=\"detail-pop-ico save-ico\" name=\"save-outline\"></ion-icon>\n                    <div class=\"detail-edit-menu-item-label update\">Update</div>\n                    <ion-ripple-effect></ion-ripple-effect>\n                </div>\n            </ion-col>\n        </ion-row>\n        <ion-row class=\"sheriff-row sheriff-detail-edit-row discard-row ion-activatable ripple-parent\">\n            <ion-col class=\"sheriff-col detail-edit-col discard-label-col\">\n                <div (click)=\"closePopover('discard')\" class=\"detail-edit-item discard\">\n                    <ion-icon class=\"detail-pop-ico discard-ico\" name=\"trash-outline\"></ion-icon>\n                    <div class=\"detail-edit-menu-item-label discard\">Discard</div>\n                    <ion-ripple-effect></ion-ripple-effect>\n                </div>\n            </ion-col>\n        </ion-row>\n    </ion-grid>\n</div>");

/***/ }),

/***/ 6318:
/*!*********************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/popovers/peopledetail/peopledetail.component.html ***!
  \*********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div class=\"pop-peopledetail-main-wrapper\">\n    <ion-grid class=\"sheriff-grid pop-people-detail-grid header-grid\">\n        <ion-row class=\"sheriff-row pop-people-detail-header-row\">\n            <ion-col size=\"2\" class=\"sheriff-col pop-people-detail-header-col title-col\">\n\n                <div class=\"pop-people-detail-header-closebtn-wrapper\">\n                    <ion-button (click)=\"closePopover()\" class=\"sheriff-btn pop-people-detail-close-btn\">\n                        <ion-icon name=\"close\" class=\"sheriff-btn-ico pop-people-detail-close-btn\"></ion-icon>\n                    </ion-button>\n                </div>\n\n            </ion-col>\n            <ion-col size=\"7\" class=\"sheriff-col pop-people-detail-header-col confirmreq-col\">\n                <div class=\"pop-people-detail-header-title-wrapper\">Recipients:</div>\n            </ion-col>\n            <ion-col size=\"3\" class=\"sheriff-col pop-people-detail-header-col closebtn-col\">\n                <div class=\"pop-people-detail-header-confirmreq-wrapper\">\n                    <div class=\"confreqtext\">Confirm</div>\n                </div>\n\n            </ion-col>\n        </ion-row>\n    </ion-grid>\n    <ion-list class=\"sheriff-list pop-people-detail-item-list\">\n        <ion-item *ngFor=\"let person of people;let i=index\" [ngClass]=\"{'pop-people-detail-isyou':person.Employee===myEmpId}\" class=\"sheriff-item pop-people-detail-item\">\n            <ion-grid class=\"sheriff-grid pop-people-detail-grid person-grid\">\n                <ion-row class=\"sheriff-row pop-people-detail-row person-row\">\n                    <ion-col size=\"2\" class=\"sheriff-col pop-people-detail-col person-col person-ava-col\">\n                        <div class=\"pop-person-ava-wrapper\">\n                            <img src=\"{{person.Photo}}\" class=\"pop-person-ava-img\">\n                        </div>\n                    </ion-col>\n                    <ion-col size=\"8\" class=\"sheriff-col pop-people-detail-col person-col person-name-col\">\n                        <div class=\"pop-person-name-wrapper\">\n                            {{person.DisplayName}}\n                        </div>\n                    </ion-col>\n                    <ion-col size=\"2\" class=\"sheriff-col pop-people-detail-col person-col person-hasconf-col\">\n                        <div *ngIf=\"!confReq\" class=\"pop-person-hasconfirm-wrapper notreq\">\n                            N/A\n                        </div>\n                        <div *ngIf=\"confReq\" class=\"pop-person-hasconf-wrapper\">\n                            <ion-icon *ngIf=\"pplConfStatus[i]===true\" style=\"color:var(--ion-color-success)\" class=\"sheriff-ico pop-person-hasconf-ico yes-ico\" name=\"checkmark\"></ion-icon>\n                            <ion-icon *ngIf=\"pplConfStatus[i]===false\" style=\"color:var(--ion-color-danger)\" class=\"sheriff-ico pop-person-hasconf-ico no-ico\" name=\"close\"></ion-icon>\n                            <ion-icon *ngIf=\"pplConfStatus[i]!==true&&pplConfStatus[i]!==false\" style=\"color:var(--ion-color-warning)\" class=\"sheriff-ico pop-person-hasconf-ico nk-ico\" name=\"help\"></ion-icon>\n                        </div>\n                    </ion-col>\n                </ion-row>\n            </ion-grid>\n        </ion-item>\n    </ion-list>\n</div>");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ "use strict";
/******/ 
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["vendor"], function() { return __webpack_exec__(14431); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=main-es2015.js.map